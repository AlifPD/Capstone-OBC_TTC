#include <RH_RF24.h> // include Si446x.h library

#define rf_receive PA12
#define rf_transmit PB3
#define power_hpa PA1

uint8_t message[191] = 
{
  0xEE, 0x2C, 0x74, 0xE6, 0x70, 0xC9, 0x33, 0x15,
  0xD1, 0x65, 0xE6, 0xAA, 0x17, 0xD4, 0xED, 0xC5,
  0x22, 0x52, 0x85, 0xF2, 0xEB, 0x47, 0x2A, 0xB8,
  0x72, 0x78, 0x39, 0xD4, 0x2A, 0x7F, 0x4B, 0xAE,
  0xC4, 0x14, 0x20, 0x5D, 0x4D, 0x0E, 0x86, 0xD4,
  0xDF, 0xB4, 0x39, 0x4F, 0x87, 0x27, 0x5C, 0x4E,
  0xCF, 0x8B, 0x15, 0x3E, 0xA5, 0x24, 0x3F, 0x29,
  0xDB, 0xF9, 0x5B, 0x58, 0xB4, 0x46, 0x1A, 0x7C,
  0x3E, 0xE0, 0x8D, 0xF1, 0x90, 0xC3, 0x49, 0x35,
  0x8C, 0xE5, 0xBC, 0x26, 0xEE, 0x5A, 0x0A, 0xA4,
  0xA4, 0x28, 0xE8, 0x40, 0x03, 0xAB, 0x23, 0x5E,
  0x6F, 0x5C, 0x03, 0x45, 0xC3, 0x0B, 0x54, 0xB7,
  0x72, 0xD6, 0x8C, 0x8E, 0x55, 0x6D, 0x02, 0x13,
  0xE2, 0x24, 0xBE, 0x64, 0xB6, 0x70, 0xFC, 0x39,
  0x73, 0xBB, 0x15, 0x9A, 0xA3, 0x70, 0xAA, 0xF9,
  0xB1, 0x6C, 0x88, 0x56, 0xBB, 0x1B, 0xF3, 0xE6,
  0x03, 0x7E, 0x9C, 0x42, 0xA5, 0xD2, 0x93, 0x6C,
  0x1C, 0x8A, 0xDA, 0x5E, 0xF2, 0x94, 0xDC, 0x35,
  0x6E, 0xAD, 0xD4, 0xCB, 0xB4, 0x9B, 0xF0, 0x83,
  0xC4, 0x6B, 0x7E, 0xCC, 0x2C, 0xB8, 0xCC, 0x44,
  0x9E, 0x83, 0x20, 0x94, 0xA5, 0x79, 0x2F, 0xA2,
  0x1C, 0x0F, 0x94, 0x06, 0x39, 0x53, 0x45, 0x8C,
  0x94, 0x42, 0x8F, 0xD5, 0x73, 0xAB, 0x38, 0xB5,
  0xEE, 0xEE, 0x8B, 0x82, 0xFE, 0x6F, 0x16
}; // Test Message
static int counter; // Variable to count number of transmitted data

RH_RF24 rf4463(PA4, PB1, PB0); // Initiali ze RF4463 Object

// Main Setup function
void setup() {
  SystemClock_Config();

  pinMode(rf_receive, OUTPUT);
  pinMode(rf_transmit, OUTPUT);
  pinMode(power_hpa, OUTPUT);

  digitalWrite(rf_receive, LOW);
  digitalWrite(rf_transmit, HIGH);
  digitalWrite(power_hpa, HIGH);

  Serial.begin(115200);

  while (!rf4463.init())
    Serial.println("Init Failed");
  Serial.println("Init Success");  
  rf4463.setTxPower(0x7F);                                     
}

// Main Loop function
void loop() {
  Serial.print("TTC Test, Data: ");
  for(int i=0; i<191; i++){
    Serial.print(" ");
    Serial.print(message[i]);
  }
  Serial.println();
  
  if(rf4463.send(message, sizeof(message))){
    counter++;
  }else{
    Serial.println("Transmit Failed");
  }

  Serial.print("Totals : ");
  Serial.print(counter);
  Serial.println(" Data");
  Serial.println("+++++++");
}

void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }
}