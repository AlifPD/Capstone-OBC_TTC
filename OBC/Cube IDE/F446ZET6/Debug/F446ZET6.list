
F446ZET6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004414  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080045d8  080045d8  000145d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045f0  080045f0  00021018  2**0
                  CONTENTS
  4 .ARM          00000008  080045f0  080045f0  000145f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045f8  080045f8  00021018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045f8  080045f8  000145f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045fc  080045fc  000145fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001018  20000000  08004600  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001148  20001018  08005618  00021018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002160  08005618  00022160  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00021018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e622  00000000  00000000  00021048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e0c  00000000  00000000  0002f66a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c90  00000000  00000000  00031478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c38  00000000  00000000  00032108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000217a6  00000000  00000000  00032d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010044  00000000  00000000  000544e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbb56  00000000  00000000  0006452a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00130080  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000348c  00000000  00000000  001300d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20001018 	.word	0x20001018
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080045c0 	.word	0x080045c0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000101c 	.word	0x2000101c
 8000200:	080045c0 	.word	0x080045c0

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f000 ff4f 	bl	80013b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f86b 	bl	80005ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 f969 	bl	80007ec <MX_GPIO_Init>
  MX_I2C1_Init();
 800051a:	f000 f8d9 	bl	80006d0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800051e:	f000 f93b 	bl	8000798 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8000522:	f000 f903 	bl	800072c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  while(!W25qxx_Init()){
 8000526:	e002      	b.n	800052e <main+0x26>
  	  initRes = false;
 8000528:	4b27      	ldr	r3, [pc, #156]	; (80005c8 <main+0xc0>)
 800052a:	2200      	movs	r2, #0
 800052c:	701a      	strb	r2, [r3, #0]
  while(!W25qxx_Init()){
 800052e:	f000 fc0f 	bl	8000d50 <W25qxx_Init>
 8000532:	4603      	mov	r3, r0
 8000534:	f083 0301 	eor.w	r3, r3, #1
 8000538:	b2db      	uxtb	r3, r3
 800053a:	2b00      	cmp	r3, #0
 800053c:	d1f4      	bne.n	8000528 <main+0x20>
    }
    initRes = true;
 800053e:	4b22      	ldr	r3, [pc, #136]	; (80005c8 <main+0xc0>)
 8000540:	2201      	movs	r2, #1
 8000542:	701a      	strb	r2, [r3, #0]

    W25qxx_EraseSector(1);
 8000544:	2001      	movs	r0, #1
 8000546:	f000 fcd5 	bl	8000ef4 <W25qxx_EraseSector>
    W25qxx_WriteSector(dummy1, 1, 0, 4096);
 800054a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800054e:	2200      	movs	r2, #0
 8000550:	2101      	movs	r1, #1
 8000552:	481e      	ldr	r0, [pc, #120]	; (80005cc <main+0xc4>)
 8000554:	f000 fdc0 	bl	80010d8 <W25qxx_WriteSector>
    W25qxx_ReadSector(buffer1, 1, 0, 4096);
 8000558:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800055c:	2200      	movs	r2, #0
 800055e:	2101      	movs	r1, #1
 8000560:	481b      	ldr	r0, [pc, #108]	; (80005d0 <main+0xc8>)
 8000562:	f000 fe99 	bl	8001298 <W25qxx_ReadSector>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  resTx = HAL_I2C_Master_Transmit(&hi2c1, ADDRESS_TTC<<1, i2cTxBuf, 8, 1000);
 8000566:	4b1b      	ldr	r3, [pc, #108]	; (80005d4 <main+0xcc>)
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	b29b      	uxth	r3, r3
 800056c:	005b      	lsls	r3, r3, #1
 800056e:	b299      	uxth	r1, r3
 8000570:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000574:	9300      	str	r3, [sp, #0]
 8000576:	2308      	movs	r3, #8
 8000578:	4a17      	ldr	r2, [pc, #92]	; (80005d8 <main+0xd0>)
 800057a:	4818      	ldr	r0, [pc, #96]	; (80005dc <main+0xd4>)
 800057c:	f001 fb86 	bl	8001c8c <HAL_I2C_Master_Transmit>
 8000580:	4603      	mov	r3, r0
 8000582:	461a      	mov	r2, r3
 8000584:	4b16      	ldr	r3, [pc, #88]	; (80005e0 <main+0xd8>)
 8000586:	701a      	strb	r2, [r3, #0]
	  i2cTxBuf[7]++;
 8000588:	4b13      	ldr	r3, [pc, #76]	; (80005d8 <main+0xd0>)
 800058a:	79db      	ldrb	r3, [r3, #7]
 800058c:	3301      	adds	r3, #1
 800058e:	b2da      	uxtb	r2, r3
 8000590:	4b11      	ldr	r3, [pc, #68]	; (80005d8 <main+0xd0>)
 8000592:	71da      	strb	r2, [r3, #7]
	  if(resTx == HAL_OK){
 8000594:	4b12      	ldr	r3, [pc, #72]	; (80005e0 <main+0xd8>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d110      	bne.n	80005be <main+0xb6>
		  resRx = HAL_I2C_Master_Receive(&hi2c1, ADDRESS_TTC<<1, i2cRxBuf, 8, 1000);
 800059c:	4b0d      	ldr	r3, [pc, #52]	; (80005d4 <main+0xcc>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	b29b      	uxth	r3, r3
 80005a2:	005b      	lsls	r3, r3, #1
 80005a4:	b299      	uxth	r1, r3
 80005a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005aa:	9300      	str	r3, [sp, #0]
 80005ac:	2308      	movs	r3, #8
 80005ae:	4a0d      	ldr	r2, [pc, #52]	; (80005e4 <main+0xdc>)
 80005b0:	480a      	ldr	r0, [pc, #40]	; (80005dc <main+0xd4>)
 80005b2:	f001 fc69 	bl	8001e88 <HAL_I2C_Master_Receive>
 80005b6:	4603      	mov	r3, r0
 80005b8:	461a      	mov	r2, r3
 80005ba:	4b0b      	ldr	r3, [pc, #44]	; (80005e8 <main+0xe0>)
 80005bc:	701a      	strb	r2, [r3, #0]
	  }
	  HAL_Delay(500);
 80005be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005c2:	f000 ff67 	bl	8001494 <HAL_Delay>
	  resTx = HAL_I2C_Master_Transmit(&hi2c1, ADDRESS_TTC<<1, i2cTxBuf, 8, 1000);
 80005c6:	e7ce      	b.n	8000566 <main+0x5e>
 80005c8:	20002130 	.word	0x20002130
 80005cc:	20000000 	.word	0x20000000
 80005d0:	20001130 	.word	0x20001130
 80005d4:	20001000 	.word	0x20001000
 80005d8:	20001004 	.word	0x20001004
 80005dc:	20001034 	.word	0x20001034
 80005e0:	2000112c 	.word	0x2000112c
 80005e4:	20001124 	.word	0x20001124
 80005e8:	2000112d 	.word	0x2000112d

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b094      	sub	sp, #80	; 0x50
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 031c 	add.w	r3, r7, #28
 80005f6:	2234      	movs	r2, #52	; 0x34
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f003 ffd8 	bl	80045b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	f107 0308 	add.w	r3, r7, #8
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000610:	2300      	movs	r3, #0
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	4b2c      	ldr	r3, [pc, #176]	; (80006c8 <SystemClock_Config+0xdc>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	4a2b      	ldr	r2, [pc, #172]	; (80006c8 <SystemClock_Config+0xdc>)
 800061a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061e:	6413      	str	r3, [r2, #64]	; 0x40
 8000620:	4b29      	ldr	r3, [pc, #164]	; (80006c8 <SystemClock_Config+0xdc>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800062c:	2300      	movs	r3, #0
 800062e:	603b      	str	r3, [r7, #0]
 8000630:	4b26      	ldr	r3, [pc, #152]	; (80006cc <SystemClock_Config+0xe0>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a25      	ldr	r2, [pc, #148]	; (80006cc <SystemClock_Config+0xe0>)
 8000636:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800063a:	6013      	str	r3, [r2, #0]
 800063c:	4b23      	ldr	r3, [pc, #140]	; (80006cc <SystemClock_Config+0xe0>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000644:	603b      	str	r3, [r7, #0]
 8000646:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000648:	2302      	movs	r3, #2
 800064a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800064c:	2301      	movs	r3, #1
 800064e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000650:	2310      	movs	r3, #16
 8000652:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000654:	2302      	movs	r3, #2
 8000656:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000658:	2300      	movs	r3, #0
 800065a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800065c:	2308      	movs	r3, #8
 800065e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000660:	23b4      	movs	r3, #180	; 0xb4
 8000662:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000664:	2302      	movs	r3, #2
 8000666:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000668:	2302      	movs	r3, #2
 800066a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800066c:	2302      	movs	r3, #2
 800066e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000670:	f107 031c 	add.w	r3, r7, #28
 8000674:	4618      	mov	r0, r3
 8000676:	f002 fc6f 	bl	8002f58 <HAL_RCC_OscConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000680:	f000 f91c 	bl	80008bc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000684:	f002 f954 	bl	8002930 <HAL_PWREx_EnableOverDrive>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800068e:	f000 f915 	bl	80008bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000692:	230f      	movs	r3, #15
 8000694:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000696:	2302      	movs	r3, #2
 8000698:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800069e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006aa:	f107 0308 	add.w	r3, r7, #8
 80006ae:	2105      	movs	r1, #5
 80006b0:	4618      	mov	r0, r3
 80006b2:	f002 f98d 	bl	80029d0 <HAL_RCC_ClockConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80006bc:	f000 f8fe 	bl	80008bc <Error_Handler>
  }
}
 80006c0:	bf00      	nop
 80006c2:	3750      	adds	r7, #80	; 0x50
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40007000 	.word	0x40007000

080006d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006d4:	4b13      	ldr	r3, [pc, #76]	; (8000724 <MX_I2C1_Init+0x54>)
 80006d6:	4a14      	ldr	r2, [pc, #80]	; (8000728 <MX_I2C1_Init+0x58>)
 80006d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 40000;
 80006da:	4b12      	ldr	r3, [pc, #72]	; (8000724 <MX_I2C1_Init+0x54>)
 80006dc:	f649 4240 	movw	r2, #40000	; 0x9c40
 80006e0:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006e2:	4b10      	ldr	r3, [pc, #64]	; (8000724 <MX_I2C1_Init+0x54>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006e8:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <MX_I2C1_Init+0x54>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ee:	4b0d      	ldr	r3, [pc, #52]	; (8000724 <MX_I2C1_Init+0x54>)
 80006f0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006f6:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <MX_I2C1_Init+0x54>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006fc:	4b09      	ldr	r3, [pc, #36]	; (8000724 <MX_I2C1_Init+0x54>)
 80006fe:	2200      	movs	r2, #0
 8000700:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000702:	4b08      	ldr	r3, [pc, #32]	; (8000724 <MX_I2C1_Init+0x54>)
 8000704:	2200      	movs	r2, #0
 8000706:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000708:	4b06      	ldr	r3, [pc, #24]	; (8000724 <MX_I2C1_Init+0x54>)
 800070a:	2200      	movs	r2, #0
 800070c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800070e:	4805      	ldr	r0, [pc, #20]	; (8000724 <MX_I2C1_Init+0x54>)
 8000710:	f001 f978 	bl	8001a04 <HAL_I2C_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 800071a:	f000 f8cf 	bl	80008bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20001034 	.word	0x20001034
 8000728:	40005400 	.word	0x40005400

0800072c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000730:	4b17      	ldr	r3, [pc, #92]	; (8000790 <MX_SPI1_Init+0x64>)
 8000732:	4a18      	ldr	r2, [pc, #96]	; (8000794 <MX_SPI1_Init+0x68>)
 8000734:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000736:	4b16      	ldr	r3, [pc, #88]	; (8000790 <MX_SPI1_Init+0x64>)
 8000738:	f44f 7282 	mov.w	r2, #260	; 0x104
 800073c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800073e:	4b14      	ldr	r3, [pc, #80]	; (8000790 <MX_SPI1_Init+0x64>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000744:	4b12      	ldr	r3, [pc, #72]	; (8000790 <MX_SPI1_Init+0x64>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800074a:	4b11      	ldr	r3, [pc, #68]	; (8000790 <MX_SPI1_Init+0x64>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <MX_SPI1_Init+0x64>)
 8000752:	2200      	movs	r2, #0
 8000754:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <MX_SPI1_Init+0x64>)
 8000758:	f44f 7200 	mov.w	r2, #512	; 0x200
 800075c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800075e:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <MX_SPI1_Init+0x64>)
 8000760:	2200      	movs	r2, #0
 8000762:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000764:	4b0a      	ldr	r3, [pc, #40]	; (8000790 <MX_SPI1_Init+0x64>)
 8000766:	2200      	movs	r2, #0
 8000768:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800076a:	4b09      	ldr	r3, [pc, #36]	; (8000790 <MX_SPI1_Init+0x64>)
 800076c:	2200      	movs	r2, #0
 800076e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000770:	4b07      	ldr	r3, [pc, #28]	; (8000790 <MX_SPI1_Init+0x64>)
 8000772:	2200      	movs	r2, #0
 8000774:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <MX_SPI1_Init+0x64>)
 8000778:	220a      	movs	r2, #10
 800077a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800077c:	4804      	ldr	r0, [pc, #16]	; (8000790 <MX_SPI1_Init+0x64>)
 800077e:	f002 fe89 	bl	8003494 <HAL_SPI_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000788:	f000 f898 	bl	80008bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20001088 	.word	0x20001088
 8000794:	40013000 	.word	0x40013000

08000798 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800079c:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 800079e:	4a12      	ldr	r2, [pc, #72]	; (80007e8 <MX_USART1_UART_Init+0x50>)
 80007a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007a2:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007bc:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007be:	220c      	movs	r2, #12
 80007c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c2:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007ce:	4805      	ldr	r0, [pc, #20]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007d0:	f003 fc08 	bl	8003fe4 <HAL_UART_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007da:	f000 f86f 	bl	80008bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	200010e0 	.word	0x200010e0
 80007e8:	40011000 	.word	0x40011000

080007ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b088      	sub	sp, #32
 80007f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f2:	f107 030c 	add.w	r3, r7, #12
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	60bb      	str	r3, [r7, #8]
 8000806:	4b2a      	ldr	r3, [pc, #168]	; (80008b0 <MX_GPIO_Init+0xc4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a29      	ldr	r2, [pc, #164]	; (80008b0 <MX_GPIO_Init+0xc4>)
 800080c:	f043 0304 	orr.w	r3, r3, #4
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b27      	ldr	r3, [pc, #156]	; (80008b0 <MX_GPIO_Init+0xc4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0304 	and.w	r3, r3, #4
 800081a:	60bb      	str	r3, [r7, #8]
 800081c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	607b      	str	r3, [r7, #4]
 8000822:	4b23      	ldr	r3, [pc, #140]	; (80008b0 <MX_GPIO_Init+0xc4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a22      	ldr	r2, [pc, #136]	; (80008b0 <MX_GPIO_Init+0xc4>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b20      	ldr	r3, [pc, #128]	; (80008b0 <MX_GPIO_Init+0xc4>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	603b      	str	r3, [r7, #0]
 800083e:	4b1c      	ldr	r3, [pc, #112]	; (80008b0 <MX_GPIO_Init+0xc4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a1b      	ldr	r2, [pc, #108]	; (80008b0 <MX_GPIO_Init+0xc4>)
 8000844:	f043 0302 	orr.w	r3, r3, #2
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b19      	ldr	r3, [pc, #100]	; (80008b0 <MX_GPIO_Init+0xc4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0302 	and.w	r3, r3, #2
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800085c:	4815      	ldr	r0, [pc, #84]	; (80008b4 <MX_GPIO_Init+0xc8>)
 800085e:	f001 f8b7 	bl	80019d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	2110      	movs	r1, #16
 8000866:	4814      	ldr	r0, [pc, #80]	; (80008b8 <MX_GPIO_Init+0xcc>)
 8000868:	f001 f8b2 	bl	80019d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800086c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000870:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000872:	2301      	movs	r3, #1
 8000874:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 030c 	add.w	r3, r7, #12
 8000882:	4619      	mov	r1, r3
 8000884:	480b      	ldr	r0, [pc, #44]	; (80008b4 <MX_GPIO_Init+0xc8>)
 8000886:	f000 ff0f 	bl	80016a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_CS_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 800088a:	2310      	movs	r3, #16
 800088c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088e:	2301      	movs	r3, #1
 8000890:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2300      	movs	r3, #0
 8000898:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 800089a:	f107 030c 	add.w	r3, r7, #12
 800089e:	4619      	mov	r1, r3
 80008a0:	4805      	ldr	r0, [pc, #20]	; (80008b8 <MX_GPIO_Init+0xcc>)
 80008a2:	f000 ff01 	bl	80016a8 <HAL_GPIO_Init>

}
 80008a6:	bf00      	nop
 80008a8:	3720      	adds	r7, #32
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40023800 	.word	0x40023800
 80008b4:	40020800 	.word	0x40020800
 80008b8:	40020000 	.word	0x40020000

080008bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c0:	b672      	cpsid	i
}
 80008c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <Error_Handler+0x8>
	...

080008c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	4b10      	ldr	r3, [pc, #64]	; (8000914 <HAL_MspInit+0x4c>)
 80008d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d6:	4a0f      	ldr	r2, [pc, #60]	; (8000914 <HAL_MspInit+0x4c>)
 80008d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008dc:	6453      	str	r3, [r2, #68]	; 0x44
 80008de:	4b0d      	ldr	r3, [pc, #52]	; (8000914 <HAL_MspInit+0x4c>)
 80008e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	603b      	str	r3, [r7, #0]
 80008ee:	4b09      	ldr	r3, [pc, #36]	; (8000914 <HAL_MspInit+0x4c>)
 80008f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f2:	4a08      	ldr	r2, [pc, #32]	; (8000914 <HAL_MspInit+0x4c>)
 80008f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f8:	6413      	str	r3, [r2, #64]	; 0x40
 80008fa:	4b06      	ldr	r3, [pc, #24]	; (8000914 <HAL_MspInit+0x4c>)
 80008fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000902:	603b      	str	r3, [r7, #0]
 8000904:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	40023800 	.word	0x40023800

08000918 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b08a      	sub	sp, #40	; 0x28
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000920:	f107 0314 	add.w	r3, r7, #20
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]
 800092e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a19      	ldr	r2, [pc, #100]	; (800099c <HAL_I2C_MspInit+0x84>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d12b      	bne.n	8000992 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	613b      	str	r3, [r7, #16]
 800093e:	4b18      	ldr	r3, [pc, #96]	; (80009a0 <HAL_I2C_MspInit+0x88>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a17      	ldr	r2, [pc, #92]	; (80009a0 <HAL_I2C_MspInit+0x88>)
 8000944:	f043 0302 	orr.w	r3, r3, #2
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <HAL_I2C_MspInit+0x88>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0302 	and.w	r3, r3, #2
 8000952:	613b      	str	r3, [r7, #16]
 8000954:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000956:	23c0      	movs	r3, #192	; 0xc0
 8000958:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800095a:	2312      	movs	r3, #18
 800095c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000962:	2303      	movs	r3, #3
 8000964:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000966:	2304      	movs	r3, #4
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	4619      	mov	r1, r3
 8000970:	480c      	ldr	r0, [pc, #48]	; (80009a4 <HAL_I2C_MspInit+0x8c>)
 8000972:	f000 fe99 	bl	80016a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <HAL_I2C_MspInit+0x88>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	4a08      	ldr	r2, [pc, #32]	; (80009a0 <HAL_I2C_MspInit+0x88>)
 8000980:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000984:	6413      	str	r3, [r2, #64]	; 0x40
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <HAL_I2C_MspInit+0x88>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000992:	bf00      	nop
 8000994:	3728      	adds	r7, #40	; 0x28
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40005400 	.word	0x40005400
 80009a0:	40023800 	.word	0x40023800
 80009a4:	40020400 	.word	0x40020400

080009a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	; 0x28
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a19      	ldr	r2, [pc, #100]	; (8000a2c <HAL_SPI_MspInit+0x84>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d12b      	bne.n	8000a22 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	613b      	str	r3, [r7, #16]
 80009ce:	4b18      	ldr	r3, [pc, #96]	; (8000a30 <HAL_SPI_MspInit+0x88>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d2:	4a17      	ldr	r2, [pc, #92]	; (8000a30 <HAL_SPI_MspInit+0x88>)
 80009d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009d8:	6453      	str	r3, [r2, #68]	; 0x44
 80009da:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <HAL_SPI_MspInit+0x88>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009e2:	613b      	str	r3, [r7, #16]
 80009e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <HAL_SPI_MspInit+0x88>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a10      	ldr	r2, [pc, #64]	; (8000a30 <HAL_SPI_MspInit+0x88>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <HAL_SPI_MspInit+0x88>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a02:	23e0      	movs	r3, #224	; 0xe0
 8000a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a06:	2302      	movs	r3, #2
 8000a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0e:	2303      	movs	r3, #3
 8000a10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a12:	2305      	movs	r3, #5
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a16:	f107 0314 	add.w	r3, r7, #20
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4805      	ldr	r0, [pc, #20]	; (8000a34 <HAL_SPI_MspInit+0x8c>)
 8000a1e:	f000 fe43 	bl	80016a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a22:	bf00      	nop
 8000a24:	3728      	adds	r7, #40	; 0x28
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40013000 	.word	0x40013000
 8000a30:	40023800 	.word	0x40023800
 8000a34:	40020000 	.word	0x40020000

08000a38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08a      	sub	sp, #40	; 0x28
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a19      	ldr	r2, [pc, #100]	; (8000abc <HAL_UART_MspInit+0x84>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d12c      	bne.n	8000ab4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	613b      	str	r3, [r7, #16]
 8000a5e:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <HAL_UART_MspInit+0x88>)
 8000a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a62:	4a17      	ldr	r2, [pc, #92]	; (8000ac0 <HAL_UART_MspInit+0x88>)
 8000a64:	f043 0310 	orr.w	r3, r3, #16
 8000a68:	6453      	str	r3, [r2, #68]	; 0x44
 8000a6a:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <HAL_UART_MspInit+0x88>)
 8000a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6e:	f003 0310 	and.w	r3, r3, #16
 8000a72:	613b      	str	r3, [r7, #16]
 8000a74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <HAL_UART_MspInit+0x88>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a10      	ldr	r2, [pc, #64]	; (8000ac0 <HAL_UART_MspInit+0x88>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <HAL_UART_MspInit+0x88>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a92:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000aa4:	2307      	movs	r3, #7
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4619      	mov	r1, r3
 8000aae:	4805      	ldr	r0, [pc, #20]	; (8000ac4 <HAL_UART_MspInit+0x8c>)
 8000ab0:	f000 fdfa 	bl	80016a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ab4:	bf00      	nop
 8000ab6:	3728      	adds	r7, #40	; 0x28
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40011000 	.word	0x40011000
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40020000 	.word	0x40020000

08000ac8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000acc:	e7fe      	b.n	8000acc <NMI_Handler+0x4>

08000ace <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad2:	e7fe      	b.n	8000ad2 <HardFault_Handler+0x4>

08000ad4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <MemManage_Handler+0x4>

08000ada <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ade:	e7fe      	b.n	8000ade <BusFault_Handler+0x4>

08000ae0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <UsageFault_Handler+0x4>

08000ae6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr

08000b02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b14:	f000 fc9e 	bl	8001454 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <SystemInit+0x20>)
 8000b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b26:	4a05      	ldr	r2, [pc, #20]	; (8000b3c <SystemInit+0x20>)
 8000b28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af02      	add	r7, sp, #8
 8000b46:	4603      	mov	r3, r0
 8000b48:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8000b4a:	f107 020f 	add.w	r2, r7, #15
 8000b4e:	1df9      	adds	r1, r7, #7
 8000b50:	2364      	movs	r3, #100	; 0x64
 8000b52:	9300      	str	r3, [sp, #0]
 8000b54:	2301      	movs	r3, #1
 8000b56:	4804      	ldr	r0, [pc, #16]	; (8000b68 <W25qxx_Spi+0x28>)
 8000b58:	f002 ff72 	bl	8003a40 <HAL_SPI_TransmitReceive>
	return ret;
 8000b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3710      	adds	r7, #16
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20001088 	.word	0x20001088

08000b6c <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	2300      	movs	r3, #0
 8000b78:	60bb      	str	r3, [r7, #8]
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	2300      	movs	r3, #0
 8000b80:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2110      	movs	r1, #16
 8000b86:	4813      	ldr	r0, [pc, #76]	; (8000bd4 <W25qxx_ReadID+0x68>)
 8000b88:	f000 ff22 	bl	80019d0 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8000b8c:	209f      	movs	r0, #159	; 0x9f
 8000b8e:	f7ff ffd7 	bl	8000b40 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000b92:	20a5      	movs	r0, #165	; 0xa5
 8000b94:	f7ff ffd4 	bl	8000b40 <W25qxx_Spi>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000b9c:	20a5      	movs	r0, #165	; 0xa5
 8000b9e:	f7ff ffcf 	bl	8000b40 <W25qxx_Spi>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000ba6:	20a5      	movs	r0, #165	; 0xa5
 8000ba8:	f7ff ffca 	bl	8000b40 <W25qxx_Spi>
 8000bac:	4603      	mov	r3, r0
 8000bae:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	2110      	movs	r1, #16
 8000bb4:	4807      	ldr	r0, [pc, #28]	; (8000bd4 <W25qxx_ReadID+0x68>)
 8000bb6:	f000 ff0b 	bl	80019d0 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	041a      	lsls	r2, r3, #16
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	021b      	lsls	r3, r3, #8
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	683a      	ldr	r2, [r7, #0]
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	60fb      	str	r3, [r7, #12]
	return Temp;
 8000bca:	68fb      	ldr	r3, [r7, #12]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3710      	adds	r7, #16
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40020000 	.word	0x40020000

08000bd8 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8000bd8:	b590      	push	{r4, r7, lr}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2110      	movs	r1, #16
 8000be2:	4816      	ldr	r0, [pc, #88]	; (8000c3c <W25qxx_ReadUniqID+0x64>)
 8000be4:	f000 fef4 	bl	80019d0 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8000be8:	204b      	movs	r0, #75	; 0x4b
 8000bea:	f7ff ffa9 	bl	8000b40 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8000bee:	2300      	movs	r3, #0
 8000bf0:	71fb      	strb	r3, [r7, #7]
 8000bf2:	e005      	b.n	8000c00 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000bf4:	20a5      	movs	r0, #165	; 0xa5
 8000bf6:	f7ff ffa3 	bl	8000b40 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	71fb      	strb	r3, [r7, #7]
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	2b03      	cmp	r3, #3
 8000c04:	d9f6      	bls.n	8000bf4 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 8000c06:	2300      	movs	r3, #0
 8000c08:	71bb      	strb	r3, [r7, #6]
 8000c0a:	e00b      	b.n	8000c24 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000c0c:	79bc      	ldrb	r4, [r7, #6]
 8000c0e:	20a5      	movs	r0, #165	; 0xa5
 8000c10:	f7ff ff96 	bl	8000b40 <W25qxx_Spi>
 8000c14:	4603      	mov	r3, r0
 8000c16:	461a      	mov	r2, r3
 8000c18:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <W25qxx_ReadUniqID+0x68>)
 8000c1a:	4423      	add	r3, r4
 8000c1c:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8000c1e:	79bb      	ldrb	r3, [r7, #6]
 8000c20:	3301      	adds	r3, #1
 8000c22:	71bb      	strb	r3, [r7, #6]
 8000c24:	79bb      	ldrb	r3, [r7, #6]
 8000c26:	2b07      	cmp	r3, #7
 8000c28:	d9f0      	bls.n	8000c0c <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	2110      	movs	r1, #16
 8000c2e:	4803      	ldr	r0, [pc, #12]	; (8000c3c <W25qxx_ReadUniqID+0x64>)
 8000c30:	f000 fece 	bl	80019d0 <HAL_GPIO_WritePin>
}
 8000c34:	bf00      	nop
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd90      	pop	{r4, r7, pc}
 8000c3c:	40020000 	.word	0x40020000
 8000c40:	20002134 	.word	0x20002134

08000c44 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2110      	movs	r1, #16
 8000c4c:	4807      	ldr	r0, [pc, #28]	; (8000c6c <W25qxx_WriteEnable+0x28>)
 8000c4e:	f000 febf 	bl	80019d0 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 8000c52:	2006      	movs	r0, #6
 8000c54:	f7ff ff74 	bl	8000b40 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8000c58:	2201      	movs	r2, #1
 8000c5a:	2110      	movs	r1, #16
 8000c5c:	4803      	ldr	r0, [pc, #12]	; (8000c6c <W25qxx_WriteEnable+0x28>)
 8000c5e:	f000 feb7 	bl	80019d0 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8000c62:	2001      	movs	r0, #1
 8000c64:	f000 fc16 	bl	8001494 <HAL_Delay>
}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40020000 	.word	0x40020000

08000c70 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2110      	movs	r1, #16
 8000c82:	481c      	ldr	r0, [pc, #112]	; (8000cf4 <W25qxx_ReadStatusRegister+0x84>)
 8000c84:	f000 fea4 	bl	80019d0 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d10c      	bne.n	8000ca8 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 8000c8e:	2005      	movs	r0, #5
 8000c90:	f7ff ff56 	bl	8000b40 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000c94:	20a5      	movs	r0, #165	; 0xa5
 8000c96:	f7ff ff53 	bl	8000b40 <W25qxx_Spi>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8000c9e:	4a16      	ldr	r2, [pc, #88]	; (8000cf8 <W25qxx_ReadStatusRegister+0x88>)
 8000ca0:	7bfb      	ldrb	r3, [r7, #15]
 8000ca2:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8000ca6:	e01b      	b.n	8000ce0 <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	2b02      	cmp	r3, #2
 8000cac:	d10c      	bne.n	8000cc8 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 8000cae:	2035      	movs	r0, #53	; 0x35
 8000cb0:	f7ff ff46 	bl	8000b40 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000cb4:	20a5      	movs	r0, #165	; 0xa5
 8000cb6:	f7ff ff43 	bl	8000b40 <W25qxx_Spi>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8000cbe:	4a0e      	ldr	r2, [pc, #56]	; (8000cf8 <W25qxx_ReadStatusRegister+0x88>)
 8000cc0:	7bfb      	ldrb	r3, [r7, #15]
 8000cc2:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8000cc6:	e00b      	b.n	8000ce0 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8000cc8:	2015      	movs	r0, #21
 8000cca:	f7ff ff39 	bl	8000b40 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000cce:	20a5      	movs	r0, #165	; 0xa5
 8000cd0:	f7ff ff36 	bl	8000b40 <W25qxx_Spi>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8000cd8:	4a07      	ldr	r2, [pc, #28]	; (8000cf8 <W25qxx_ReadStatusRegister+0x88>)
 8000cda:	7bfb      	ldrb	r3, [r7, #15]
 8000cdc:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	2110      	movs	r1, #16
 8000ce4:	4803      	ldr	r0, [pc, #12]	; (8000cf4 <W25qxx_ReadStatusRegister+0x84>)
 8000ce6:	f000 fe73 	bl	80019d0 <HAL_GPIO_WritePin>
	return status;
 8000cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3710      	adds	r7, #16
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40020000 	.word	0x40020000
 8000cf8:	20002134 	.word	0x20002134

08000cfc <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8000d00:	2001      	movs	r0, #1
 8000d02:	f000 fbc7 	bl	8001494 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2110      	movs	r1, #16
 8000d0a:	480f      	ldr	r0, [pc, #60]	; (8000d48 <W25qxx_WaitForWriteEnd+0x4c>)
 8000d0c:	f000 fe60 	bl	80019d0 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8000d10:	2005      	movs	r0, #5
 8000d12:	f7ff ff15 	bl	8000b40 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000d16:	20a5      	movs	r0, #165	; 0xa5
 8000d18:	f7ff ff12 	bl	8000b40 <W25qxx_Spi>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	461a      	mov	r2, r3
 8000d20:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <W25qxx_WaitForWriteEnd+0x50>)
 8000d22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8000d26:	2001      	movs	r0, #1
 8000d28:	f000 fbb4 	bl	8001494 <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8000d2c:	4b07      	ldr	r3, [pc, #28]	; (8000d4c <W25qxx_WaitForWriteEnd+0x50>)
 8000d2e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d1ed      	bne.n	8000d16 <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	2110      	movs	r1, #16
 8000d3e:	4802      	ldr	r0, [pc, #8]	; (8000d48 <W25qxx_WaitForWriteEnd+0x4c>)
 8000d40:	f000 fe46 	bl	80019d0 <HAL_GPIO_WritePin>
}
 8000d44:	bf00      	nop
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40020000 	.word	0x40020000
 8000d4c:	20002134 	.word	0x20002134

08000d50 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8000d56:	4b65      	ldr	r3, [pc, #404]	; (8000eec <W25qxx_Init+0x19c>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 8000d5e:	e002      	b.n	8000d66 <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8000d60:	2001      	movs	r0, #1
 8000d62:	f000 fb97 	bl	8001494 <HAL_Delay>
	while (HAL_GetTick() < 100)
 8000d66:	f000 fb89 	bl	800147c <HAL_GetTick>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b63      	cmp	r3, #99	; 0x63
 8000d6e:	d9f7      	bls.n	8000d60 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8000d70:	2201      	movs	r2, #1
 8000d72:	2110      	movs	r1, #16
 8000d74:	485e      	ldr	r0, [pc, #376]	; (8000ef0 <W25qxx_Init+0x1a0>)
 8000d76:	f000 fe2b 	bl	80019d0 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8000d7a:	2064      	movs	r0, #100	; 0x64
 8000d7c:	f000 fb8a 	bl	8001494 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 8000d80:	f7ff fef4 	bl	8000b6c <W25qxx_ReadID>
 8000d84:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	3b11      	subs	r3, #17
 8000d8c:	2b0f      	cmp	r3, #15
 8000d8e:	d86c      	bhi.n	8000e6a <W25qxx_Init+0x11a>
 8000d90:	a201      	add	r2, pc, #4	; (adr r2, 8000d98 <W25qxx_Init+0x48>)
 8000d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d96:	bf00      	nop
 8000d98:	08000e5d 	.word	0x08000e5d
 8000d9c:	08000e4f 	.word	0x08000e4f
 8000da0:	08000e41 	.word	0x08000e41
 8000da4:	08000e33 	.word	0x08000e33
 8000da8:	08000e25 	.word	0x08000e25
 8000dac:	08000e17 	.word	0x08000e17
 8000db0:	08000e09 	.word	0x08000e09
 8000db4:	08000df9 	.word	0x08000df9
 8000db8:	08000de9 	.word	0x08000de9
 8000dbc:	08000e6b 	.word	0x08000e6b
 8000dc0:	08000e6b 	.word	0x08000e6b
 8000dc4:	08000e6b 	.word	0x08000e6b
 8000dc8:	08000e6b 	.word	0x08000e6b
 8000dcc:	08000e6b 	.word	0x08000e6b
 8000dd0:	08000e6b 	.word	0x08000e6b
 8000dd4:	08000dd9 	.word	0x08000dd9
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8000dd8:	4b44      	ldr	r3, [pc, #272]	; (8000eec <W25qxx_Init+0x19c>)
 8000dda:	220a      	movs	r2, #10
 8000ddc:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 8000dde:	4b43      	ldr	r3, [pc, #268]	; (8000eec <W25qxx_Init+0x19c>)
 8000de0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000de4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 8000de6:	e046      	b.n	8000e76 <W25qxx_Init+0x126>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8000de8:	4b40      	ldr	r3, [pc, #256]	; (8000eec <W25qxx_Init+0x19c>)
 8000dea:	2209      	movs	r2, #9
 8000dec:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8000dee:	4b3f      	ldr	r3, [pc, #252]	; (8000eec <W25qxx_Init+0x19c>)
 8000df0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000df4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 8000df6:	e03e      	b.n	8000e76 <W25qxx_Init+0x126>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8000df8:	4b3c      	ldr	r3, [pc, #240]	; (8000eec <W25qxx_Init+0x19c>)
 8000dfa:	2208      	movs	r2, #8
 8000dfc:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8000dfe:	4b3b      	ldr	r3, [pc, #236]	; (8000eec <W25qxx_Init+0x19c>)
 8000e00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e04:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 8000e06:	e036      	b.n	8000e76 <W25qxx_Init+0x126>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8000e08:	4b38      	ldr	r3, [pc, #224]	; (8000eec <W25qxx_Init+0x19c>)
 8000e0a:	2207      	movs	r2, #7
 8000e0c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 8000e0e:	4b37      	ldr	r3, [pc, #220]	; (8000eec <W25qxx_Init+0x19c>)
 8000e10:	2280      	movs	r2, #128	; 0x80
 8000e12:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 8000e14:	e02f      	b.n	8000e76 <W25qxx_Init+0x126>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8000e16:	4b35      	ldr	r3, [pc, #212]	; (8000eec <W25qxx_Init+0x19c>)
 8000e18:	2206      	movs	r2, #6
 8000e1a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8000e1c:	4b33      	ldr	r3, [pc, #204]	; (8000eec <W25qxx_Init+0x19c>)
 8000e1e:	2240      	movs	r2, #64	; 0x40
 8000e20:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 8000e22:	e028      	b.n	8000e76 <W25qxx_Init+0x126>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8000e24:	4b31      	ldr	r3, [pc, #196]	; (8000eec <W25qxx_Init+0x19c>)
 8000e26:	2205      	movs	r2, #5
 8000e28:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8000e2a:	4b30      	ldr	r3, [pc, #192]	; (8000eec <W25qxx_Init+0x19c>)
 8000e2c:	2220      	movs	r2, #32
 8000e2e:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 8000e30:	e021      	b.n	8000e76 <W25qxx_Init+0x126>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 8000e32:	4b2e      	ldr	r3, [pc, #184]	; (8000eec <W25qxx_Init+0x19c>)
 8000e34:	2204      	movs	r2, #4
 8000e36:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8000e38:	4b2c      	ldr	r3, [pc, #176]	; (8000eec <W25qxx_Init+0x19c>)
 8000e3a:	2210      	movs	r2, #16
 8000e3c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 8000e3e:	e01a      	b.n	8000e76 <W25qxx_Init+0x126>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8000e40:	4b2a      	ldr	r3, [pc, #168]	; (8000eec <W25qxx_Init+0x19c>)
 8000e42:	2203      	movs	r2, #3
 8000e44:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8000e46:	4b29      	ldr	r3, [pc, #164]	; (8000eec <W25qxx_Init+0x19c>)
 8000e48:	2208      	movs	r2, #8
 8000e4a:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 8000e4c:	e013      	b.n	8000e76 <W25qxx_Init+0x126>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8000e4e:	4b27      	ldr	r3, [pc, #156]	; (8000eec <W25qxx_Init+0x19c>)
 8000e50:	2202      	movs	r2, #2
 8000e52:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8000e54:	4b25      	ldr	r3, [pc, #148]	; (8000eec <W25qxx_Init+0x19c>)
 8000e56:	2204      	movs	r2, #4
 8000e58:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 8000e5a:	e00c      	b.n	8000e76 <W25qxx_Init+0x126>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8000e5c:	4b23      	ldr	r3, [pc, #140]	; (8000eec <W25qxx_Init+0x19c>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8000e62:	4b22      	ldr	r3, [pc, #136]	; (8000eec <W25qxx_Init+0x19c>)
 8000e64:	2202      	movs	r2, #2
 8000e66:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 8000e68:	e005      	b.n	8000e76 <W25qxx_Init+0x126>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 8000e6a:	4b20      	ldr	r3, [pc, #128]	; (8000eec <W25qxx_Init+0x19c>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8000e72:	2300      	movs	r3, #0
 8000e74:	e036      	b.n	8000ee4 <W25qxx_Init+0x194>
	}
	w25qxx.PageSize = 256;
 8000e76:	4b1d      	ldr	r3, [pc, #116]	; (8000eec <W25qxx_Init+0x19c>)
 8000e78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e7c:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8000e7e:	4b1b      	ldr	r3, [pc, #108]	; (8000eec <W25qxx_Init+0x19c>)
 8000e80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e84:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8000e86:	4b19      	ldr	r3, [pc, #100]	; (8000eec <W25qxx_Init+0x19c>)
 8000e88:	69db      	ldr	r3, [r3, #28]
 8000e8a:	011b      	lsls	r3, r3, #4
 8000e8c:	4a17      	ldr	r2, [pc, #92]	; (8000eec <W25qxx_Init+0x19c>)
 8000e8e:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8000e90:	4b16      	ldr	r3, [pc, #88]	; (8000eec <W25qxx_Init+0x19c>)
 8000e92:	695b      	ldr	r3, [r3, #20]
 8000e94:	4a15      	ldr	r2, [pc, #84]	; (8000eec <W25qxx_Init+0x19c>)
 8000e96:	6912      	ldr	r2, [r2, #16]
 8000e98:	fb02 f303 	mul.w	r3, r2, r3
 8000e9c:	4a13      	ldr	r2, [pc, #76]	; (8000eec <W25qxx_Init+0x19c>)
 8000e9e:	8952      	ldrh	r2, [r2, #10]
 8000ea0:	fbb3 f3f2 	udiv	r3, r3, r2
 8000ea4:	4a11      	ldr	r2, [pc, #68]	; (8000eec <W25qxx_Init+0x19c>)
 8000ea6:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8000ea8:	4b10      	ldr	r3, [pc, #64]	; (8000eec <W25qxx_Init+0x19c>)
 8000eaa:	691b      	ldr	r3, [r3, #16]
 8000eac:	011b      	lsls	r3, r3, #4
 8000eae:	4a0f      	ldr	r2, [pc, #60]	; (8000eec <W25qxx_Init+0x19c>)
 8000eb0:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8000eb2:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <W25qxx_Init+0x19c>)
 8000eb4:	695b      	ldr	r3, [r3, #20]
 8000eb6:	4a0d      	ldr	r2, [pc, #52]	; (8000eec <W25qxx_Init+0x19c>)
 8000eb8:	6912      	ldr	r2, [r2, #16]
 8000eba:	fb02 f303 	mul.w	r3, r2, r3
 8000ebe:	0a9b      	lsrs	r3, r3, #10
 8000ec0:	4a0a      	ldr	r2, [pc, #40]	; (8000eec <W25qxx_Init+0x19c>)
 8000ec2:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8000ec4:	f7ff fe88 	bl	8000bd8 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8000ec8:	2001      	movs	r0, #1
 8000eca:	f7ff fed1 	bl	8000c70 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8000ece:	2002      	movs	r0, #2
 8000ed0:	f7ff fece 	bl	8000c70 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8000ed4:	2003      	movs	r0, #3
 8000ed6:	f7ff fecb 	bl	8000c70 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 8000eda:	4b04      	ldr	r3, [pc, #16]	; (8000eec <W25qxx_Init+0x19c>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8000ee2:	2301      	movs	r3, #1
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20002134 	.word	0x20002134
 8000ef0:	40020000 	.word	0x40020000

08000ef4 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8000efc:	e002      	b.n	8000f04 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 8000efe:	2001      	movs	r0, #1
 8000f00:	f000 fac8 	bl	8001494 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8000f04:	4b25      	ldr	r3, [pc, #148]	; (8000f9c <W25qxx_EraseSector+0xa8>)
 8000f06:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d0f7      	beq.n	8000efe <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 8000f0e:	4b23      	ldr	r3, [pc, #140]	; (8000f9c <W25qxx_EraseSector+0xa8>)
 8000f10:	2201      	movs	r2, #1
 8000f12:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
#endif
	W25qxx_WaitForWriteEnd();
 8000f16:	f7ff fef1 	bl	8000cfc <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 8000f1a:	4b20      	ldr	r3, [pc, #128]	; (8000f9c <W25qxx_EraseSector+0xa8>)
 8000f1c:	691a      	ldr	r2, [r3, #16]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	fb02 f303 	mul.w	r3, r2, r3
 8000f24:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 8000f26:	f7ff fe8d 	bl	8000c44 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2110      	movs	r1, #16
 8000f2e:	481c      	ldr	r0, [pc, #112]	; (8000fa0 <W25qxx_EraseSector+0xac>)
 8000f30:	f000 fd4e 	bl	80019d0 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8000f34:	4b19      	ldr	r3, [pc, #100]	; (8000f9c <W25qxx_EraseSector+0xa8>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2b08      	cmp	r3, #8
 8000f3a:	d909      	bls.n	8000f50 <W25qxx_EraseSector+0x5c>
	{
		W25qxx_Spi(0x21);
 8000f3c:	2021      	movs	r0, #33	; 0x21
 8000f3e:	f7ff fdff 	bl	8000b40 <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	0e1b      	lsrs	r3, r3, #24
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff fdf9 	bl	8000b40 <W25qxx_Spi>
 8000f4e:	e002      	b.n	8000f56 <W25qxx_EraseSector+0x62>
	}
	else
	{
		W25qxx_Spi(0x20);
 8000f50:	2020      	movs	r0, #32
 8000f52:	f7ff fdf5 	bl	8000b40 <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	0c1b      	lsrs	r3, r3, #16
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff fdef 	bl	8000b40 <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	0a1b      	lsrs	r3, r3, #8
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff fde9 	bl	8000b40 <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff fde4 	bl	8000b40 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8000f78:	2201      	movs	r2, #1
 8000f7a:	2110      	movs	r1, #16
 8000f7c:	4808      	ldr	r0, [pc, #32]	; (8000fa0 <W25qxx_EraseSector+0xac>)
 8000f7e:	f000 fd27 	bl	80019d0 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8000f82:	f7ff febb 	bl	8000cfc <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
#endif
	W25qxx_Delay(1);
 8000f86:	2001      	movs	r0, #1
 8000f88:	f000 fa84 	bl	8001494 <HAL_Delay>
	w25qxx.Lock = 0;
 8000f8c:	4b03      	ldr	r3, [pc, #12]	; (8000f9c <W25qxx_EraseSector+0xa8>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20002134 	.word	0x20002134
 8000fa0:	40020000 	.word	0x40020000

08000fa4 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8000fac:	4b07      	ldr	r3, [pc, #28]	; (8000fcc <W25qxx_SectorToPage+0x28>)
 8000fae:	691b      	ldr	r3, [r3, #16]
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	fb02 f303 	mul.w	r3, r2, r3
 8000fb6:	4a05      	ldr	r2, [pc, #20]	; (8000fcc <W25qxx_SectorToPage+0x28>)
 8000fb8:	8952      	ldrh	r2, [r2, #10]
 8000fba:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	20002134 	.word	0x20002134

08000fd0 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
 8000fdc:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8000fde:	e002      	b.n	8000fe6 <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8000fe0:	2001      	movs	r0, #1
 8000fe2:	f000 fa57 	bl	8001494 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8000fe6:	4b39      	ldr	r3, [pc, #228]	; (80010cc <W25qxx_WritePage+0xfc>)
 8000fe8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d0f7      	beq.n	8000fe0 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 8000ff0:	4b36      	ldr	r3, [pc, #216]	; (80010cc <W25qxx_WritePage+0xfc>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8000ff8:	683a      	ldr	r2, [r7, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	4a33      	ldr	r2, [pc, #204]	; (80010cc <W25qxx_WritePage+0xfc>)
 8001000:	8952      	ldrh	r2, [r2, #10]
 8001002:	4293      	cmp	r3, r2
 8001004:	d802      	bhi.n	800100c <W25qxx_WritePage+0x3c>
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d105      	bne.n	8001018 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800100c:	4b2f      	ldr	r3, [pc, #188]	; (80010cc <W25qxx_WritePage+0xfc>)
 800100e:	895b      	ldrh	r3, [r3, #10]
 8001010:	461a      	mov	r2, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	4413      	add	r3, r2
 800101e:	4a2b      	ldr	r2, [pc, #172]	; (80010cc <W25qxx_WritePage+0xfc>)
 8001020:	8952      	ldrh	r2, [r2, #10]
 8001022:	4293      	cmp	r3, r2
 8001024:	d905      	bls.n	8001032 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8001026:	4b29      	ldr	r3, [pc, #164]	; (80010cc <W25qxx_WritePage+0xfc>)
 8001028:	895b      	ldrh	r3, [r3, #10]
 800102a:	461a      	mov	r2, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	W25qxx_WaitForWriteEnd();
 8001032:	f7ff fe63 	bl	8000cfc <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 8001036:	f7ff fe05 	bl	8000c44 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800103a:	2200      	movs	r2, #0
 800103c:	2110      	movs	r1, #16
 800103e:	4824      	ldr	r0, [pc, #144]	; (80010d0 <W25qxx_WritePage+0x100>)
 8001040:	f000 fcc6 	bl	80019d0 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8001044:	4b21      	ldr	r3, [pc, #132]	; (80010cc <W25qxx_WritePage+0xfc>)
 8001046:	895b      	ldrh	r3, [r3, #10]
 8001048:	461a      	mov	r2, r3
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	fb02 f303 	mul.w	r3, r2, r3
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	4413      	add	r3, r2
 8001054:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 8001056:	4b1d      	ldr	r3, [pc, #116]	; (80010cc <W25qxx_WritePage+0xfc>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b08      	cmp	r3, #8
 800105c:	d909      	bls.n	8001072 <W25qxx_WritePage+0xa2>
	{
		W25qxx_Spi(0x12);
 800105e:	2012      	movs	r0, #18
 8001060:	f7ff fd6e 	bl	8000b40 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	0e1b      	lsrs	r3, r3, #24
 8001068:	b2db      	uxtb	r3, r3
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff fd68 	bl	8000b40 <W25qxx_Spi>
 8001070:	e002      	b.n	8001078 <W25qxx_WritePage+0xa8>
	}
	else
	{
		W25qxx_Spi(0x02);
 8001072:	2002      	movs	r0, #2
 8001074:	f7ff fd64 	bl	8000b40 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	0c1b      	lsrs	r3, r3, #16
 800107c:	b2db      	uxtb	r3, r3
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff fd5e 	bl	8000b40 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	0a1b      	lsrs	r3, r3, #8
 8001088:	b2db      	uxtb	r3, r3
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff fd58 	bl	8000b40 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	b2db      	uxtb	r3, r3
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fd53 	bl	8000b40 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	b29a      	uxth	r2, r3
 800109e:	2364      	movs	r3, #100	; 0x64
 80010a0:	68f9      	ldr	r1, [r7, #12]
 80010a2:	480c      	ldr	r0, [pc, #48]	; (80010d4 <W25qxx_WritePage+0x104>)
 80010a4:	f002 fa7f 	bl	80035a6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80010a8:	2201      	movs	r2, #1
 80010aa:	2110      	movs	r1, #16
 80010ac:	4808      	ldr	r0, [pc, #32]	; (80010d0 <W25qxx_WritePage+0x100>)
 80010ae:	f000 fc8f 	bl	80019d0 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 80010b2:	f7ff fe23 	bl	8000cfc <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f000 f9ec 	bl	8001494 <HAL_Delay>
	w25qxx.Lock = 0;
 80010bc:	4b03      	ldr	r3, [pc, #12]	; (80010cc <W25qxx_WritePage+0xfc>)
 80010be:	2200      	movs	r2, #0
 80010c0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80010c4:	bf00      	nop
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20002134 	.word	0x20002134
 80010d0:	40020000 	.word	0x40020000
 80010d4:	20001088 	.word	0x20001088

080010d8 <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b088      	sub	sp, #32
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
 80010e4:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 80010e6:	4b2c      	ldr	r3, [pc, #176]	; (8001198 <W25qxx_WriteSector+0xc0>)
 80010e8:	691b      	ldr	r3, [r3, #16]
 80010ea:	683a      	ldr	r2, [r7, #0]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d802      	bhi.n	80010f6 <W25qxx_WriteSector+0x1e>
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d102      	bne.n	80010fc <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 80010f6:	4b28      	ldr	r3, [pc, #160]	; (8001198 <W25qxx_WriteSector+0xc0>)
 80010f8:	691b      	ldr	r3, [r3, #16]
 80010fa:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 80010fc:	4b26      	ldr	r3, [pc, #152]	; (8001198 <W25qxx_WriteSector+0xc0>)
 80010fe:	691b      	ldr	r3, [r3, #16]
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	429a      	cmp	r2, r3
 8001104:	d243      	bcs.n	800118e <W25qxx_WriteSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	441a      	add	r2, r3
 800110c:	4b22      	ldr	r3, [pc, #136]	; (8001198 <W25qxx_WriteSector+0xc0>)
 800110e:	691b      	ldr	r3, [r3, #16]
 8001110:	429a      	cmp	r2, r3
 8001112:	d905      	bls.n	8001120 <W25qxx_WriteSector+0x48>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 8001114:	4b20      	ldr	r3, [pc, #128]	; (8001198 <W25qxx_WriteSector+0xc0>)
 8001116:	691a      	ldr	r2, [r3, #16]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	61bb      	str	r3, [r7, #24]
 800111e:	e001      	b.n	8001124 <W25qxx_WriteSector+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8001124:	68b8      	ldr	r0, [r7, #8]
 8001126:	f7ff ff3d 	bl	8000fa4 <W25qxx_SectorToPage>
 800112a:	4602      	mov	r2, r0
 800112c:	4b1a      	ldr	r3, [pc, #104]	; (8001198 <W25qxx_WriteSector+0xc0>)
 800112e:	895b      	ldrh	r3, [r3, #10]
 8001130:	4619      	mov	r1, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	fbb3 f3f1 	udiv	r3, r3, r1
 8001138:	4413      	add	r3, r2
 800113a:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 800113c:	4b16      	ldr	r3, [pc, #88]	; (8001198 <W25qxx_WriteSector+0xc0>)
 800113e:	895b      	ldrh	r3, [r3, #10]
 8001140:	461a      	mov	r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	fbb3 f1f2 	udiv	r1, r3, r2
 8001148:	fb01 f202 	mul.w	r2, r1, r2
 800114c:	1a9b      	subs	r3, r3, r2
 800114e:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	697a      	ldr	r2, [r7, #20]
 8001154:	69f9      	ldr	r1, [r7, #28]
 8001156:	68f8      	ldr	r0, [r7, #12]
 8001158:	f7ff ff3a 	bl	8000fd0 <W25qxx_WritePage>
		StartPage++;
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	3301      	adds	r3, #1
 8001160:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 8001162:	4b0d      	ldr	r3, [pc, #52]	; (8001198 <W25qxx_WriteSector+0xc0>)
 8001164:	895b      	ldrh	r3, [r3, #10]
 8001166:	461a      	mov	r2, r3
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	1a9a      	subs	r2, r3, r2
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	4413      	add	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8001172:	4b09      	ldr	r3, [pc, #36]	; (8001198 <W25qxx_WriteSector+0xc0>)
 8001174:	895b      	ldrh	r3, [r3, #10]
 8001176:	461a      	mov	r2, r3
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	68fa      	ldr	r2, [r7, #12]
 800117e:	4413      	add	r3, r2
 8001180:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	2b00      	cmp	r3, #0
 800118a:	dce1      	bgt.n	8001150 <W25qxx_WriteSector+0x78>
 800118c:	e000      	b.n	8001190 <W25qxx_WriteSector+0xb8>
		return;
 800118e:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 8001190:	3720      	adds	r7, #32
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20002134 	.word	0x20002134

0800119c <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
 80011a8:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 80011aa:	e002      	b.n	80011b2 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 80011ac:	2001      	movs	r0, #1
 80011ae:	f000 f971 	bl	8001494 <HAL_Delay>
	while (w25qxx.Lock == 1)
 80011b2:	4b36      	ldr	r3, [pc, #216]	; (800128c <W25qxx_ReadPage+0xf0>)
 80011b4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d0f7      	beq.n	80011ac <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 80011bc:	4b33      	ldr	r3, [pc, #204]	; (800128c <W25qxx_ReadPage+0xf0>)
 80011be:	2201      	movs	r2, #1
 80011c0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 80011c4:	4b31      	ldr	r3, [pc, #196]	; (800128c <W25qxx_ReadPage+0xf0>)
 80011c6:	895b      	ldrh	r3, [r3, #10]
 80011c8:	461a      	mov	r2, r3
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d802      	bhi.n	80011d6 <W25qxx_ReadPage+0x3a>
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d102      	bne.n	80011dc <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 80011d6:	4b2d      	ldr	r3, [pc, #180]	; (800128c <W25qxx_ReadPage+0xf0>)
 80011d8:	895b      	ldrh	r3, [r3, #10]
 80011da:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	4413      	add	r3, r2
 80011e2:	4a2a      	ldr	r2, [pc, #168]	; (800128c <W25qxx_ReadPage+0xf0>)
 80011e4:	8952      	ldrh	r2, [r2, #10]
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d905      	bls.n	80011f6 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80011ea:	4b28      	ldr	r3, [pc, #160]	; (800128c <W25qxx_ReadPage+0xf0>)
 80011ec:	895b      	ldrh	r3, [r3, #10]
 80011ee:	461a      	mov	r2, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 80011f6:	4b25      	ldr	r3, [pc, #148]	; (800128c <W25qxx_ReadPage+0xf0>)
 80011f8:	895b      	ldrh	r3, [r3, #10]
 80011fa:	461a      	mov	r2, r3
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	fb02 f303 	mul.w	r3, r2, r3
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	4413      	add	r3, r2
 8001206:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001208:	2200      	movs	r2, #0
 800120a:	2110      	movs	r1, #16
 800120c:	4820      	ldr	r0, [pc, #128]	; (8001290 <W25qxx_ReadPage+0xf4>)
 800120e:	f000 fbdf 	bl	80019d0 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8001212:	4b1e      	ldr	r3, [pc, #120]	; (800128c <W25qxx_ReadPage+0xf0>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	2b08      	cmp	r3, #8
 8001218:	d909      	bls.n	800122e <W25qxx_ReadPage+0x92>
	{
		W25qxx_Spi(0x0C);
 800121a:	200c      	movs	r0, #12
 800121c:	f7ff fc90 	bl	8000b40 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	0e1b      	lsrs	r3, r3, #24
 8001224:	b2db      	uxtb	r3, r3
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff fc8a 	bl	8000b40 <W25qxx_Spi>
 800122c:	e002      	b.n	8001234 <W25qxx_ReadPage+0x98>
	}
	else
	{
		W25qxx_Spi(0x0B);
 800122e:	200b      	movs	r0, #11
 8001230:	f7ff fc86 	bl	8000b40 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	0c1b      	lsrs	r3, r3, #16
 8001238:	b2db      	uxtb	r3, r3
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff fc80 	bl	8000b40 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	0a1b      	lsrs	r3, r3, #8
 8001244:	b2db      	uxtb	r3, r3
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff fc7a 	bl	8000b40 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	b2db      	uxtb	r3, r3
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff fc75 	bl	8000b40 <W25qxx_Spi>
	W25qxx_Spi(0);
 8001256:	2000      	movs	r0, #0
 8001258:	f7ff fc72 	bl	8000b40 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	b29a      	uxth	r2, r3
 8001260:	2364      	movs	r3, #100	; 0x64
 8001262:	68f9      	ldr	r1, [r7, #12]
 8001264:	480b      	ldr	r0, [pc, #44]	; (8001294 <W25qxx_ReadPage+0xf8>)
 8001266:	f002 fada 	bl	800381e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800126a:	2201      	movs	r2, #1
 800126c:	2110      	movs	r1, #16
 800126e:	4808      	ldr	r0, [pc, #32]	; (8001290 <W25qxx_ReadPage+0xf4>)
 8001270:	f000 fbae 	bl	80019d0 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8001274:	2001      	movs	r0, #1
 8001276:	f000 f90d 	bl	8001494 <HAL_Delay>
	w25qxx.Lock = 0;
 800127a:	4b04      	ldr	r3, [pc, #16]	; (800128c <W25qxx_ReadPage+0xf0>)
 800127c:	2200      	movs	r2, #0
 800127e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8001282:	bf00      	nop
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20002134 	.word	0x20002134
 8001290:	40020000 	.word	0x40020000
 8001294:	20001088 	.word	0x20001088

08001298 <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b088      	sub	sp, #32
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
 80012a4:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 80012a6:	4b2c      	ldr	r3, [pc, #176]	; (8001358 <W25qxx_ReadSector+0xc0>)
 80012a8:	691b      	ldr	r3, [r3, #16]
 80012aa:	683a      	ldr	r2, [r7, #0]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d802      	bhi.n	80012b6 <W25qxx_ReadSector+0x1e>
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d102      	bne.n	80012bc <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 80012b6:	4b28      	ldr	r3, [pc, #160]	; (8001358 <W25qxx_ReadSector+0xc0>)
 80012b8:	691b      	ldr	r3, [r3, #16]
 80012ba:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 80012bc:	4b26      	ldr	r3, [pc, #152]	; (8001358 <W25qxx_ReadSector+0xc0>)
 80012be:	691b      	ldr	r3, [r3, #16]
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	d243      	bcs.n	800134e <W25qxx_ReadSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	441a      	add	r2, r3
 80012cc:	4b22      	ldr	r3, [pc, #136]	; (8001358 <W25qxx_ReadSector+0xc0>)
 80012ce:	691b      	ldr	r3, [r3, #16]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d905      	bls.n	80012e0 <W25qxx_ReadSector+0x48>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 80012d4:	4b20      	ldr	r3, [pc, #128]	; (8001358 <W25qxx_ReadSector+0xc0>)
 80012d6:	691a      	ldr	r2, [r3, #16]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	61bb      	str	r3, [r7, #24]
 80012de:	e001      	b.n	80012e4 <W25qxx_ReadSector+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 80012e4:	68b8      	ldr	r0, [r7, #8]
 80012e6:	f7ff fe5d 	bl	8000fa4 <W25qxx_SectorToPage>
 80012ea:	4602      	mov	r2, r0
 80012ec:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <W25qxx_ReadSector+0xc0>)
 80012ee:	895b      	ldrh	r3, [r3, #10]
 80012f0:	4619      	mov	r1, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	fbb3 f3f1 	udiv	r3, r3, r1
 80012f8:	4413      	add	r3, r2
 80012fa:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 80012fc:	4b16      	ldr	r3, [pc, #88]	; (8001358 <W25qxx_ReadSector+0xc0>)
 80012fe:	895b      	ldrh	r3, [r3, #10]
 8001300:	461a      	mov	r2, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	fbb3 f1f2 	udiv	r1, r3, r2
 8001308:	fb01 f202 	mul.w	r2, r1, r2
 800130c:	1a9b      	subs	r3, r3, r2
 800130e:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	697a      	ldr	r2, [r7, #20]
 8001314:	69f9      	ldr	r1, [r7, #28]
 8001316:	68f8      	ldr	r0, [r7, #12]
 8001318:	f7ff ff40 	bl	800119c <W25qxx_ReadPage>
		StartPage++;
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	3301      	adds	r3, #1
 8001320:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 8001322:	4b0d      	ldr	r3, [pc, #52]	; (8001358 <W25qxx_ReadSector+0xc0>)
 8001324:	895b      	ldrh	r3, [r3, #10]
 8001326:	461a      	mov	r2, r3
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	1a9a      	subs	r2, r3, r2
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	4413      	add	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8001332:	4b09      	ldr	r3, [pc, #36]	; (8001358 <W25qxx_ReadSector+0xc0>)
 8001334:	895b      	ldrh	r3, [r3, #10]
 8001336:	461a      	mov	r2, r3
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	68fa      	ldr	r2, [r7, #12]
 800133e:	4413      	add	r3, r2
 8001340:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8001342:	2300      	movs	r3, #0
 8001344:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	2b00      	cmp	r3, #0
 800134a:	dce1      	bgt.n	8001310 <W25qxx_ReadSector+0x78>
 800134c:	e000      	b.n	8001350 <W25qxx_ReadSector+0xb8>
		return;
 800134e:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 8001350:	3720      	adds	r7, #32
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20002134 	.word	0x20002134

0800135c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800135c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001394 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001360:	480d      	ldr	r0, [pc, #52]	; (8001398 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001362:	490e      	ldr	r1, [pc, #56]	; (800139c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001364:	4a0e      	ldr	r2, [pc, #56]	; (80013a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001366:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001368:	e002      	b.n	8001370 <LoopCopyDataInit>

0800136a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800136a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800136c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800136e:	3304      	adds	r3, #4

08001370 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001370:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001372:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001374:	d3f9      	bcc.n	800136a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001376:	4a0b      	ldr	r2, [pc, #44]	; (80013a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001378:	4c0b      	ldr	r4, [pc, #44]	; (80013a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800137a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800137c:	e001      	b.n	8001382 <LoopFillZerobss>

0800137e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800137e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001380:	3204      	adds	r2, #4

08001382 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001382:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001384:	d3fb      	bcc.n	800137e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001386:	f7ff fbc9 	bl	8000b1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800138a:	f003 f8ed 	bl	8004568 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800138e:	f7ff f8bb 	bl	8000508 <main>
  bx  lr    
 8001392:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001394:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001398:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800139c:	20001018 	.word	0x20001018
  ldr r2, =_sidata
 80013a0:	08004600 	.word	0x08004600
  ldr r2, =_sbss
 80013a4:	20001018 	.word	0x20001018
  ldr r4, =_ebss
 80013a8:	20002160 	.word	0x20002160

080013ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013ac:	e7fe      	b.n	80013ac <ADC_IRQHandler>
	...

080013b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013b4:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <HAL_Init+0x40>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a0d      	ldr	r2, [pc, #52]	; (80013f0 <HAL_Init+0x40>)
 80013ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013c0:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <HAL_Init+0x40>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a0a      	ldr	r2, [pc, #40]	; (80013f0 <HAL_Init+0x40>)
 80013c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013cc:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <HAL_Init+0x40>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a07      	ldr	r2, [pc, #28]	; (80013f0 <HAL_Init+0x40>)
 80013d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d8:	2003      	movs	r0, #3
 80013da:	f000 f931 	bl	8001640 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013de:	200f      	movs	r0, #15
 80013e0:	f000 f808 	bl	80013f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013e4:	f7ff fa70 	bl	80008c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40023c00 	.word	0x40023c00

080013f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013fc:	4b12      	ldr	r3, [pc, #72]	; (8001448 <HAL_InitTick+0x54>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4b12      	ldr	r3, [pc, #72]	; (800144c <HAL_InitTick+0x58>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	4619      	mov	r1, r3
 8001406:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800140a:	fbb3 f3f1 	udiv	r3, r3, r1
 800140e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001412:	4618      	mov	r0, r3
 8001414:	f000 f93b 	bl	800168e <HAL_SYSTICK_Config>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e00e      	b.n	8001440 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2b0f      	cmp	r3, #15
 8001426:	d80a      	bhi.n	800143e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001428:	2200      	movs	r2, #0
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	f04f 30ff 	mov.w	r0, #4294967295
 8001430:	f000 f911 	bl	8001656 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001434:	4a06      	ldr	r2, [pc, #24]	; (8001450 <HAL_InitTick+0x5c>)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800143a:	2300      	movs	r3, #0
 800143c:	e000      	b.n	8001440 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
}
 8001440:	4618      	mov	r0, r3
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	2000100c 	.word	0x2000100c
 800144c:	20001014 	.word	0x20001014
 8001450:	20001010 	.word	0x20001010

08001454 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001458:	4b06      	ldr	r3, [pc, #24]	; (8001474 <HAL_IncTick+0x20>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	461a      	mov	r2, r3
 800145e:	4b06      	ldr	r3, [pc, #24]	; (8001478 <HAL_IncTick+0x24>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4413      	add	r3, r2
 8001464:	4a04      	ldr	r2, [pc, #16]	; (8001478 <HAL_IncTick+0x24>)
 8001466:	6013      	str	r3, [r2, #0]
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	20001014 	.word	0x20001014
 8001478:	2000215c 	.word	0x2000215c

0800147c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  return uwTick;
 8001480:	4b03      	ldr	r3, [pc, #12]	; (8001490 <HAL_GetTick+0x14>)
 8001482:	681b      	ldr	r3, [r3, #0]
}
 8001484:	4618      	mov	r0, r3
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	2000215c 	.word	0x2000215c

08001494 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800149c:	f7ff ffee 	bl	800147c <HAL_GetTick>
 80014a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ac:	d005      	beq.n	80014ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ae:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <HAL_Delay+0x44>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	461a      	mov	r2, r3
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	4413      	add	r3, r2
 80014b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014ba:	bf00      	nop
 80014bc:	f7ff ffde 	bl	800147c <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	68fa      	ldr	r2, [r7, #12]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d8f7      	bhi.n	80014bc <HAL_Delay+0x28>
  {
  }
}
 80014cc:	bf00      	nop
 80014ce:	bf00      	nop
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20001014 	.word	0x20001014

080014dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014ec:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <__NVIC_SetPriorityGrouping+0x44>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014f2:	68ba      	ldr	r2, [r7, #8]
 80014f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014f8:	4013      	ands	r3, r2
 80014fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001504:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800150c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800150e:	4a04      	ldr	r2, [pc, #16]	; (8001520 <__NVIC_SetPriorityGrouping+0x44>)
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	60d3      	str	r3, [r2, #12]
}
 8001514:	bf00      	nop
 8001516:	3714      	adds	r7, #20
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	e000ed00 	.word	0xe000ed00

08001524 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001528:	4b04      	ldr	r3, [pc, #16]	; (800153c <__NVIC_GetPriorityGrouping+0x18>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	0a1b      	lsrs	r3, r3, #8
 800152e:	f003 0307 	and.w	r3, r3, #7
}
 8001532:	4618      	mov	r0, r3
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	6039      	str	r1, [r7, #0]
 800154a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800154c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001550:	2b00      	cmp	r3, #0
 8001552:	db0a      	blt.n	800156a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	b2da      	uxtb	r2, r3
 8001558:	490c      	ldr	r1, [pc, #48]	; (800158c <__NVIC_SetPriority+0x4c>)
 800155a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155e:	0112      	lsls	r2, r2, #4
 8001560:	b2d2      	uxtb	r2, r2
 8001562:	440b      	add	r3, r1
 8001564:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001568:	e00a      	b.n	8001580 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	b2da      	uxtb	r2, r3
 800156e:	4908      	ldr	r1, [pc, #32]	; (8001590 <__NVIC_SetPriority+0x50>)
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	f003 030f 	and.w	r3, r3, #15
 8001576:	3b04      	subs	r3, #4
 8001578:	0112      	lsls	r2, r2, #4
 800157a:	b2d2      	uxtb	r2, r2
 800157c:	440b      	add	r3, r1
 800157e:	761a      	strb	r2, [r3, #24]
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	e000e100 	.word	0xe000e100
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001594:	b480      	push	{r7}
 8001596:	b089      	sub	sp, #36	; 0x24
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f003 0307 	and.w	r3, r3, #7
 80015a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	f1c3 0307 	rsb	r3, r3, #7
 80015ae:	2b04      	cmp	r3, #4
 80015b0:	bf28      	it	cs
 80015b2:	2304      	movcs	r3, #4
 80015b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	3304      	adds	r3, #4
 80015ba:	2b06      	cmp	r3, #6
 80015bc:	d902      	bls.n	80015c4 <NVIC_EncodePriority+0x30>
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	3b03      	subs	r3, #3
 80015c2:	e000      	b.n	80015c6 <NVIC_EncodePriority+0x32>
 80015c4:	2300      	movs	r3, #0
 80015c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c8:	f04f 32ff 	mov.w	r2, #4294967295
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	43da      	mvns	r2, r3
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	401a      	ands	r2, r3
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015dc:	f04f 31ff 	mov.w	r1, #4294967295
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	fa01 f303 	lsl.w	r3, r1, r3
 80015e6:	43d9      	mvns	r1, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ec:	4313      	orrs	r3, r2
         );
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3724      	adds	r7, #36	; 0x24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
	...

080015fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3b01      	subs	r3, #1
 8001608:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800160c:	d301      	bcc.n	8001612 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800160e:	2301      	movs	r3, #1
 8001610:	e00f      	b.n	8001632 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001612:	4a0a      	ldr	r2, [pc, #40]	; (800163c <SysTick_Config+0x40>)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3b01      	subs	r3, #1
 8001618:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800161a:	210f      	movs	r1, #15
 800161c:	f04f 30ff 	mov.w	r0, #4294967295
 8001620:	f7ff ff8e 	bl	8001540 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001624:	4b05      	ldr	r3, [pc, #20]	; (800163c <SysTick_Config+0x40>)
 8001626:	2200      	movs	r2, #0
 8001628:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800162a:	4b04      	ldr	r3, [pc, #16]	; (800163c <SysTick_Config+0x40>)
 800162c:	2207      	movs	r2, #7
 800162e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	e000e010 	.word	0xe000e010

08001640 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f7ff ff47 	bl	80014dc <__NVIC_SetPriorityGrouping>
}
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001656:	b580      	push	{r7, lr}
 8001658:	b086      	sub	sp, #24
 800165a:	af00      	add	r7, sp, #0
 800165c:	4603      	mov	r3, r0
 800165e:	60b9      	str	r1, [r7, #8]
 8001660:	607a      	str	r2, [r7, #4]
 8001662:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001668:	f7ff ff5c 	bl	8001524 <__NVIC_GetPriorityGrouping>
 800166c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	68b9      	ldr	r1, [r7, #8]
 8001672:	6978      	ldr	r0, [r7, #20]
 8001674:	f7ff ff8e 	bl	8001594 <NVIC_EncodePriority>
 8001678:	4602      	mov	r2, r0
 800167a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800167e:	4611      	mov	r1, r2
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff ff5d 	bl	8001540 <__NVIC_SetPriority>
}
 8001686:	bf00      	nop
 8001688:	3718      	adds	r7, #24
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b082      	sub	sp, #8
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f7ff ffb0 	bl	80015fc <SysTick_Config>
 800169c:	4603      	mov	r3, r0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
	...

080016a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b089      	sub	sp, #36	; 0x24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016b6:	2300      	movs	r3, #0
 80016b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016be:	2300      	movs	r3, #0
 80016c0:	61fb      	str	r3, [r7, #28]
 80016c2:	e165      	b.n	8001990 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016c4:	2201      	movs	r2, #1
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	697a      	ldr	r2, [r7, #20]
 80016d4:	4013      	ands	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	429a      	cmp	r2, r3
 80016de:	f040 8154 	bne.w	800198a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f003 0303 	and.w	r3, r3, #3
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d005      	beq.n	80016fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d130      	bne.n	800175c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	2203      	movs	r2, #3
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	43db      	mvns	r3, r3
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	4013      	ands	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	68da      	ldr	r2, [r3, #12]
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4313      	orrs	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001730:	2201      	movs	r2, #1
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	43db      	mvns	r3, r3
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	4013      	ands	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	091b      	lsrs	r3, r3, #4
 8001746:	f003 0201 	and.w	r2, r3, #1
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	4313      	orrs	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f003 0303 	and.w	r3, r3, #3
 8001764:	2b03      	cmp	r3, #3
 8001766:	d017      	beq.n	8001798 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	2203      	movs	r2, #3
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	43db      	mvns	r3, r3
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4013      	ands	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	689a      	ldr	r2, [r3, #8]
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4313      	orrs	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f003 0303 	and.w	r3, r3, #3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d123      	bne.n	80017ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	08da      	lsrs	r2, r3, #3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3208      	adds	r2, #8
 80017ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	f003 0307 	and.w	r3, r3, #7
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	220f      	movs	r2, #15
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	4013      	ands	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	691a      	ldr	r2, [r3, #16]
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4313      	orrs	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	08da      	lsrs	r2, r3, #3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	3208      	adds	r2, #8
 80017e6:	69b9      	ldr	r1, [r7, #24]
 80017e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	2203      	movs	r2, #3
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	43db      	mvns	r3, r3
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	4013      	ands	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f003 0203 	and.w	r2, r3, #3
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4313      	orrs	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001828:	2b00      	cmp	r3, #0
 800182a:	f000 80ae 	beq.w	800198a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	4b5d      	ldr	r3, [pc, #372]	; (80019a8 <HAL_GPIO_Init+0x300>)
 8001834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001836:	4a5c      	ldr	r2, [pc, #368]	; (80019a8 <HAL_GPIO_Init+0x300>)
 8001838:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800183c:	6453      	str	r3, [r2, #68]	; 0x44
 800183e:	4b5a      	ldr	r3, [pc, #360]	; (80019a8 <HAL_GPIO_Init+0x300>)
 8001840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800184a:	4a58      	ldr	r2, [pc, #352]	; (80019ac <HAL_GPIO_Init+0x304>)
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	089b      	lsrs	r3, r3, #2
 8001850:	3302      	adds	r3, #2
 8001852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001856:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	f003 0303 	and.w	r3, r3, #3
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	220f      	movs	r2, #15
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	43db      	mvns	r3, r3
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	4013      	ands	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a4f      	ldr	r2, [pc, #316]	; (80019b0 <HAL_GPIO_Init+0x308>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d025      	beq.n	80018c2 <HAL_GPIO_Init+0x21a>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a4e      	ldr	r2, [pc, #312]	; (80019b4 <HAL_GPIO_Init+0x30c>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d01f      	beq.n	80018be <HAL_GPIO_Init+0x216>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a4d      	ldr	r2, [pc, #308]	; (80019b8 <HAL_GPIO_Init+0x310>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d019      	beq.n	80018ba <HAL_GPIO_Init+0x212>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a4c      	ldr	r2, [pc, #304]	; (80019bc <HAL_GPIO_Init+0x314>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d013      	beq.n	80018b6 <HAL_GPIO_Init+0x20e>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a4b      	ldr	r2, [pc, #300]	; (80019c0 <HAL_GPIO_Init+0x318>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d00d      	beq.n	80018b2 <HAL_GPIO_Init+0x20a>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a4a      	ldr	r2, [pc, #296]	; (80019c4 <HAL_GPIO_Init+0x31c>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d007      	beq.n	80018ae <HAL_GPIO_Init+0x206>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a49      	ldr	r2, [pc, #292]	; (80019c8 <HAL_GPIO_Init+0x320>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d101      	bne.n	80018aa <HAL_GPIO_Init+0x202>
 80018a6:	2306      	movs	r3, #6
 80018a8:	e00c      	b.n	80018c4 <HAL_GPIO_Init+0x21c>
 80018aa:	2307      	movs	r3, #7
 80018ac:	e00a      	b.n	80018c4 <HAL_GPIO_Init+0x21c>
 80018ae:	2305      	movs	r3, #5
 80018b0:	e008      	b.n	80018c4 <HAL_GPIO_Init+0x21c>
 80018b2:	2304      	movs	r3, #4
 80018b4:	e006      	b.n	80018c4 <HAL_GPIO_Init+0x21c>
 80018b6:	2303      	movs	r3, #3
 80018b8:	e004      	b.n	80018c4 <HAL_GPIO_Init+0x21c>
 80018ba:	2302      	movs	r3, #2
 80018bc:	e002      	b.n	80018c4 <HAL_GPIO_Init+0x21c>
 80018be:	2301      	movs	r3, #1
 80018c0:	e000      	b.n	80018c4 <HAL_GPIO_Init+0x21c>
 80018c2:	2300      	movs	r3, #0
 80018c4:	69fa      	ldr	r2, [r7, #28]
 80018c6:	f002 0203 	and.w	r2, r2, #3
 80018ca:	0092      	lsls	r2, r2, #2
 80018cc:	4093      	lsls	r3, r2
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018d4:	4935      	ldr	r1, [pc, #212]	; (80019ac <HAL_GPIO_Init+0x304>)
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	089b      	lsrs	r3, r3, #2
 80018da:	3302      	adds	r3, #2
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018e2:	4b3a      	ldr	r3, [pc, #232]	; (80019cc <HAL_GPIO_Init+0x324>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	43db      	mvns	r3, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4013      	ands	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d003      	beq.n	8001906 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	4313      	orrs	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001906:	4a31      	ldr	r2, [pc, #196]	; (80019cc <HAL_GPIO_Init+0x324>)
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800190c:	4b2f      	ldr	r3, [pc, #188]	; (80019cc <HAL_GPIO_Init+0x324>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	43db      	mvns	r3, r3
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4013      	ands	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d003      	beq.n	8001930 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	4313      	orrs	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001930:	4a26      	ldr	r2, [pc, #152]	; (80019cc <HAL_GPIO_Init+0x324>)
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001936:	4b25      	ldr	r3, [pc, #148]	; (80019cc <HAL_GPIO_Init+0x324>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	43db      	mvns	r3, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4013      	ands	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d003      	beq.n	800195a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	4313      	orrs	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800195a:	4a1c      	ldr	r2, [pc, #112]	; (80019cc <HAL_GPIO_Init+0x324>)
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001960:	4b1a      	ldr	r3, [pc, #104]	; (80019cc <HAL_GPIO_Init+0x324>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	43db      	mvns	r3, r3
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	4013      	ands	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d003      	beq.n	8001984 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	4313      	orrs	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001984:	4a11      	ldr	r2, [pc, #68]	; (80019cc <HAL_GPIO_Init+0x324>)
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	3301      	adds	r3, #1
 800198e:	61fb      	str	r3, [r7, #28]
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	2b0f      	cmp	r3, #15
 8001994:	f67f ae96 	bls.w	80016c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001998:	bf00      	nop
 800199a:	bf00      	nop
 800199c:	3724      	adds	r7, #36	; 0x24
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	40023800 	.word	0x40023800
 80019ac:	40013800 	.word	0x40013800
 80019b0:	40020000 	.word	0x40020000
 80019b4:	40020400 	.word	0x40020400
 80019b8:	40020800 	.word	0x40020800
 80019bc:	40020c00 	.word	0x40020c00
 80019c0:	40021000 	.word	0x40021000
 80019c4:	40021400 	.word	0x40021400
 80019c8:	40021800 	.word	0x40021800
 80019cc:	40013c00 	.word	0x40013c00

080019d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	460b      	mov	r3, r1
 80019da:	807b      	strh	r3, [r7, #2]
 80019dc:	4613      	mov	r3, r2
 80019de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019e0:	787b      	ldrb	r3, [r7, #1]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d003      	beq.n	80019ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019e6:	887a      	ldrh	r2, [r7, #2]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019ec:	e003      	b.n	80019f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019ee:	887b      	ldrh	r3, [r7, #2]
 80019f0:	041a      	lsls	r2, r3, #16
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	619a      	str	r2, [r3, #24]
}
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
	...

08001a04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e12b      	b.n	8001c6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d106      	bne.n	8001a30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7fe ff74 	bl	8000918 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2224      	movs	r2, #36	; 0x24
 8001a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f022 0201 	bic.w	r2, r2, #1
 8001a46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a68:	f001 f8a4 	bl	8002bb4 <HAL_RCC_GetPCLK1Freq>
 8001a6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	4a81      	ldr	r2, [pc, #516]	; (8001c78 <HAL_I2C_Init+0x274>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d807      	bhi.n	8001a88 <HAL_I2C_Init+0x84>
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	4a80      	ldr	r2, [pc, #512]	; (8001c7c <HAL_I2C_Init+0x278>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	bf94      	ite	ls
 8001a80:	2301      	movls	r3, #1
 8001a82:	2300      	movhi	r3, #0
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	e006      	b.n	8001a96 <HAL_I2C_Init+0x92>
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	4a7d      	ldr	r2, [pc, #500]	; (8001c80 <HAL_I2C_Init+0x27c>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	bf94      	ite	ls
 8001a90:	2301      	movls	r3, #1
 8001a92:	2300      	movhi	r3, #0
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e0e7      	b.n	8001c6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	4a78      	ldr	r2, [pc, #480]	; (8001c84 <HAL_I2C_Init+0x280>)
 8001aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa6:	0c9b      	lsrs	r3, r3, #18
 8001aa8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	68ba      	ldr	r2, [r7, #8]
 8001aba:	430a      	orrs	r2, r1
 8001abc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6a1b      	ldr	r3, [r3, #32]
 8001ac4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	4a6a      	ldr	r2, [pc, #424]	; (8001c78 <HAL_I2C_Init+0x274>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d802      	bhi.n	8001ad8 <HAL_I2C_Init+0xd4>
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	e009      	b.n	8001aec <HAL_I2C_Init+0xe8>
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ade:	fb02 f303 	mul.w	r3, r2, r3
 8001ae2:	4a69      	ldr	r2, [pc, #420]	; (8001c88 <HAL_I2C_Init+0x284>)
 8001ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae8:	099b      	lsrs	r3, r3, #6
 8001aea:	3301      	adds	r3, #1
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	6812      	ldr	r2, [r2, #0]
 8001af0:	430b      	orrs	r3, r1
 8001af2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001afe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	495c      	ldr	r1, [pc, #368]	; (8001c78 <HAL_I2C_Init+0x274>)
 8001b08:	428b      	cmp	r3, r1
 8001b0a:	d819      	bhi.n	8001b40 <HAL_I2C_Init+0x13c>
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	1e59      	subs	r1, r3, #1
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b1a:	1c59      	adds	r1, r3, #1
 8001b1c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001b20:	400b      	ands	r3, r1
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d00a      	beq.n	8001b3c <HAL_I2C_Init+0x138>
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	1e59      	subs	r1, r3, #1
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b34:	3301      	adds	r3, #1
 8001b36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b3a:	e051      	b.n	8001be0 <HAL_I2C_Init+0x1dc>
 8001b3c:	2304      	movs	r3, #4
 8001b3e:	e04f      	b.n	8001be0 <HAL_I2C_Init+0x1dc>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d111      	bne.n	8001b6c <HAL_I2C_Init+0x168>
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	1e58      	subs	r0, r3, #1
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6859      	ldr	r1, [r3, #4]
 8001b50:	460b      	mov	r3, r1
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	440b      	add	r3, r1
 8001b56:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	bf0c      	ite	eq
 8001b64:	2301      	moveq	r3, #1
 8001b66:	2300      	movne	r3, #0
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	e012      	b.n	8001b92 <HAL_I2C_Init+0x18e>
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	1e58      	subs	r0, r3, #1
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6859      	ldr	r1, [r3, #4]
 8001b74:	460b      	mov	r3, r1
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	440b      	add	r3, r1
 8001b7a:	0099      	lsls	r1, r3, #2
 8001b7c:	440b      	add	r3, r1
 8001b7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b82:	3301      	adds	r3, #1
 8001b84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	bf0c      	ite	eq
 8001b8c:	2301      	moveq	r3, #1
 8001b8e:	2300      	movne	r3, #0
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <HAL_I2C_Init+0x196>
 8001b96:	2301      	movs	r3, #1
 8001b98:	e022      	b.n	8001be0 <HAL_I2C_Init+0x1dc>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d10e      	bne.n	8001bc0 <HAL_I2C_Init+0x1bc>
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	1e58      	subs	r0, r3, #1
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6859      	ldr	r1, [r3, #4]
 8001baa:	460b      	mov	r3, r1
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	440b      	add	r3, r1
 8001bb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bbe:	e00f      	b.n	8001be0 <HAL_I2C_Init+0x1dc>
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	1e58      	subs	r0, r3, #1
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6859      	ldr	r1, [r3, #4]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	440b      	add	r3, r1
 8001bce:	0099      	lsls	r1, r3, #2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001be0:	6879      	ldr	r1, [r7, #4]
 8001be2:	6809      	ldr	r1, [r1, #0]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	69da      	ldr	r2, [r3, #28]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a1b      	ldr	r3, [r3, #32]
 8001bfa:	431a      	orrs	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	430a      	orrs	r2, r1
 8001c02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	6911      	ldr	r1, [r2, #16]
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	68d2      	ldr	r2, [r2, #12]
 8001c1a:	4311      	orrs	r1, r2
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	6812      	ldr	r2, [r2, #0]
 8001c20:	430b      	orrs	r3, r1
 8001c22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	695a      	ldr	r2, [r3, #20]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	431a      	orrs	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f042 0201 	orr.w	r2, r2, #1
 8001c4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2220      	movs	r2, #32
 8001c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	000186a0 	.word	0x000186a0
 8001c7c:	001e847f 	.word	0x001e847f
 8001c80:	003d08ff 	.word	0x003d08ff
 8001c84:	431bde83 	.word	0x431bde83
 8001c88:	10624dd3 	.word	0x10624dd3

08001c8c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b088      	sub	sp, #32
 8001c90:	af02      	add	r7, sp, #8
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	607a      	str	r2, [r7, #4]
 8001c96:	461a      	mov	r2, r3
 8001c98:	460b      	mov	r3, r1
 8001c9a:	817b      	strh	r3, [r7, #10]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ca0:	f7ff fbec 	bl	800147c <HAL_GetTick>
 8001ca4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b20      	cmp	r3, #32
 8001cb0:	f040 80e0 	bne.w	8001e74 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	2319      	movs	r3, #25
 8001cba:	2201      	movs	r2, #1
 8001cbc:	4970      	ldr	r1, [pc, #448]	; (8001e80 <HAL_I2C_Master_Transmit+0x1f4>)
 8001cbe:	68f8      	ldr	r0, [r7, #12]
 8001cc0:	f000 fc58 	bl	8002574 <I2C_WaitOnFlagUntilTimeout>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	e0d3      	b.n	8001e76 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d101      	bne.n	8001cdc <HAL_I2C_Master_Transmit+0x50>
 8001cd8:	2302      	movs	r3, #2
 8001cda:	e0cc      	b.n	8001e76 <HAL_I2C_Master_Transmit+0x1ea>
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d007      	beq.n	8001d02 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f042 0201 	orr.w	r2, r2, #1
 8001d00:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d10:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2221      	movs	r2, #33	; 0x21
 8001d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2210      	movs	r2, #16
 8001d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2200      	movs	r2, #0
 8001d26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	893a      	ldrh	r2, [r7, #8]
 8001d32:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	4a50      	ldr	r2, [pc, #320]	; (8001e84 <HAL_I2C_Master_Transmit+0x1f8>)
 8001d42:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001d44:	8979      	ldrh	r1, [r7, #10]
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	6a3a      	ldr	r2, [r7, #32]
 8001d4a:	68f8      	ldr	r0, [r7, #12]
 8001d4c:	f000 fac2 	bl	80022d4 <I2C_MasterRequestWrite>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e08d      	b.n	8001e76 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	613b      	str	r3, [r7, #16]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	695b      	ldr	r3, [r3, #20]
 8001d64:	613b      	str	r3, [r7, #16]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	613b      	str	r3, [r7, #16]
 8001d6e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001d70:	e066      	b.n	8001e40 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d72:	697a      	ldr	r2, [r7, #20]
 8001d74:	6a39      	ldr	r1, [r7, #32]
 8001d76:	68f8      	ldr	r0, [r7, #12]
 8001d78:	f000 fcd2 	bl	8002720 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d00d      	beq.n	8001d9e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	2b04      	cmp	r3, #4
 8001d88:	d107      	bne.n	8001d9a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d98:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e06b      	b.n	8001e76 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da2:	781a      	ldrb	r2, [r3, #0]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dae:	1c5a      	adds	r2, r3, #1
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	b29a      	uxth	r2, r3
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	b29a      	uxth	r2, r3
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	695b      	ldr	r3, [r3, #20]
 8001dd4:	f003 0304 	and.w	r3, r3, #4
 8001dd8:	2b04      	cmp	r3, #4
 8001dda:	d11b      	bne.n	8001e14 <HAL_I2C_Master_Transmit+0x188>
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d017      	beq.n	8001e14 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de8:	781a      	ldrb	r2, [r3, #0]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df4:	1c5a      	adds	r2, r3, #1
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	3b01      	subs	r3, #1
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e14:	697a      	ldr	r2, [r7, #20]
 8001e16:	6a39      	ldr	r1, [r7, #32]
 8001e18:	68f8      	ldr	r0, [r7, #12]
 8001e1a:	f000 fcc2 	bl	80027a2 <I2C_WaitOnBTFFlagUntilTimeout>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d00d      	beq.n	8001e40 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e28:	2b04      	cmp	r3, #4
 8001e2a:	d107      	bne.n	8001e3c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e3a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e01a      	b.n	8001e76 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d194      	bne.n	8001d72 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2220      	movs	r2, #32
 8001e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001e70:	2300      	movs	r3, #0
 8001e72:	e000      	b.n	8001e76 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001e74:	2302      	movs	r3, #2
  }
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3718      	adds	r7, #24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	00100002 	.word	0x00100002
 8001e84:	ffff0000 	.word	0xffff0000

08001e88 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b08c      	sub	sp, #48	; 0x30
 8001e8c:	af02      	add	r7, sp, #8
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	607a      	str	r2, [r7, #4]
 8001e92:	461a      	mov	r2, r3
 8001e94:	460b      	mov	r3, r1
 8001e96:	817b      	strh	r3, [r7, #10]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e9c:	f7ff faee 	bl	800147c <HAL_GetTick>
 8001ea0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b20      	cmp	r3, #32
 8001eac:	f040 820b 	bne.w	80022c6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb2:	9300      	str	r3, [sp, #0]
 8001eb4:	2319      	movs	r3, #25
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	497c      	ldr	r1, [pc, #496]	; (80020ac <HAL_I2C_Master_Receive+0x224>)
 8001eba:	68f8      	ldr	r0, [r7, #12]
 8001ebc:	f000 fb5a 	bl	8002574 <I2C_WaitOnFlagUntilTimeout>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	e1fe      	b.n	80022c8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d101      	bne.n	8001ed8 <HAL_I2C_Master_Receive+0x50>
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	e1f7      	b.n	80022c8 <HAL_I2C_Master_Receive+0x440>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d007      	beq.n	8001efe <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f042 0201 	orr.w	r2, r2, #1
 8001efc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f0c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2222      	movs	r2, #34	; 0x22
 8001f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2210      	movs	r2, #16
 8001f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2200      	movs	r2, #0
 8001f22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	893a      	ldrh	r2, [r7, #8]
 8001f2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f34:	b29a      	uxth	r2, r3
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	4a5c      	ldr	r2, [pc, #368]	; (80020b0 <HAL_I2C_Master_Receive+0x228>)
 8001f3e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f40:	8979      	ldrh	r1, [r7, #10]
 8001f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f46:	68f8      	ldr	r0, [r7, #12]
 8001f48:	f000 fa46 	bl	80023d8 <I2C_MasterRequestRead>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e1b8      	b.n	80022c8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d113      	bne.n	8001f86 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f5e:	2300      	movs	r3, #0
 8001f60:	623b      	str	r3, [r7, #32]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	695b      	ldr	r3, [r3, #20]
 8001f68:	623b      	str	r3, [r7, #32]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	623b      	str	r3, [r7, #32]
 8001f72:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	e18c      	b.n	80022a0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d11b      	bne.n	8001fc6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	61fb      	str	r3, [r7, #28]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	695b      	ldr	r3, [r3, #20]
 8001fa8:	61fb      	str	r3, [r7, #28]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	61fb      	str	r3, [r7, #28]
 8001fb2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	e16c      	b.n	80022a0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d11b      	bne.n	8002006 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fdc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61bb      	str	r3, [r7, #24]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	695b      	ldr	r3, [r3, #20]
 8001ff8:	61bb      	str	r3, [r7, #24]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	61bb      	str	r3, [r7, #24]
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	e14c      	b.n	80022a0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002014:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002016:	2300      	movs	r3, #0
 8002018:	617b      	str	r3, [r7, #20]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	695b      	ldr	r3, [r3, #20]
 8002020:	617b      	str	r3, [r7, #20]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800202c:	e138      	b.n	80022a0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002032:	2b03      	cmp	r3, #3
 8002034:	f200 80f1 	bhi.w	800221a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800203c:	2b01      	cmp	r3, #1
 800203e:	d123      	bne.n	8002088 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002042:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002044:	68f8      	ldr	r0, [r7, #12]
 8002046:	f000 fbed 	bl	8002824 <I2C_WaitOnRXNEFlagUntilTimeout>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e139      	b.n	80022c8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	691a      	ldr	r2, [r3, #16]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205e:	b2d2      	uxtb	r2, r2
 8002060:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002066:	1c5a      	adds	r2, r3, #1
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002070:	3b01      	subs	r3, #1
 8002072:	b29a      	uxth	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800207c:	b29b      	uxth	r3, r3
 800207e:	3b01      	subs	r3, #1
 8002080:	b29a      	uxth	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002086:	e10b      	b.n	80022a0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800208c:	2b02      	cmp	r3, #2
 800208e:	d14e      	bne.n	800212e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002092:	9300      	str	r3, [sp, #0]
 8002094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002096:	2200      	movs	r2, #0
 8002098:	4906      	ldr	r1, [pc, #24]	; (80020b4 <HAL_I2C_Master_Receive+0x22c>)
 800209a:	68f8      	ldr	r0, [r7, #12]
 800209c:	f000 fa6a 	bl	8002574 <I2C_WaitOnFlagUntilTimeout>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d008      	beq.n	80020b8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e10e      	b.n	80022c8 <HAL_I2C_Master_Receive+0x440>
 80020aa:	bf00      	nop
 80020ac:	00100002 	.word	0x00100002
 80020b0:	ffff0000 	.word	0xffff0000
 80020b4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	691a      	ldr	r2, [r3, #16]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d2:	b2d2      	uxtb	r2, r2
 80020d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020da:	1c5a      	adds	r2, r3, #1
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e4:	3b01      	subs	r3, #1
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	3b01      	subs	r3, #1
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	691a      	ldr	r2, [r3, #16]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002104:	b2d2      	uxtb	r2, r2
 8002106:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210c:	1c5a      	adds	r2, r3, #1
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002116:	3b01      	subs	r3, #1
 8002118:	b29a      	uxth	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002122:	b29b      	uxth	r3, r3
 8002124:	3b01      	subs	r3, #1
 8002126:	b29a      	uxth	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800212c:	e0b8      	b.n	80022a0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800212e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002130:	9300      	str	r3, [sp, #0]
 8002132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002134:	2200      	movs	r2, #0
 8002136:	4966      	ldr	r1, [pc, #408]	; (80022d0 <HAL_I2C_Master_Receive+0x448>)
 8002138:	68f8      	ldr	r0, [r7, #12]
 800213a:	f000 fa1b 	bl	8002574 <I2C_WaitOnFlagUntilTimeout>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e0bf      	b.n	80022c8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002156:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	691a      	ldr	r2, [r3, #16]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002162:	b2d2      	uxtb	r2, r2
 8002164:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216a:	1c5a      	adds	r2, r3, #1
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002174:	3b01      	subs	r3, #1
 8002176:	b29a      	uxth	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002180:	b29b      	uxth	r3, r3
 8002182:	3b01      	subs	r3, #1
 8002184:	b29a      	uxth	r2, r3
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002190:	2200      	movs	r2, #0
 8002192:	494f      	ldr	r1, [pc, #316]	; (80022d0 <HAL_I2C_Master_Receive+0x448>)
 8002194:	68f8      	ldr	r0, [r7, #12]
 8002196:	f000 f9ed 	bl	8002574 <I2C_WaitOnFlagUntilTimeout>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e091      	b.n	80022c8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	691a      	ldr	r2, [r3, #16]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021be:	b2d2      	uxtb	r2, r2
 80021c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c6:	1c5a      	adds	r2, r3, #1
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021d0:	3b01      	subs	r3, #1
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021dc:	b29b      	uxth	r3, r3
 80021de:	3b01      	subs	r3, #1
 80021e0:	b29a      	uxth	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	691a      	ldr	r2, [r3, #16]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f0:	b2d2      	uxtb	r2, r2
 80021f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f8:	1c5a      	adds	r2, r3, #1
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002202:	3b01      	subs	r3, #1
 8002204:	b29a      	uxth	r2, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800220e:	b29b      	uxth	r3, r3
 8002210:	3b01      	subs	r3, #1
 8002212:	b29a      	uxth	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002218:	e042      	b.n	80022a0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800221a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800221c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800221e:	68f8      	ldr	r0, [r7, #12]
 8002220:	f000 fb00 	bl	8002824 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e04c      	b.n	80022c8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	691a      	ldr	r2, [r3, #16]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002238:	b2d2      	uxtb	r2, r2
 800223a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002240:	1c5a      	adds	r2, r3, #1
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800224a:	3b01      	subs	r3, #1
 800224c:	b29a      	uxth	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002256:	b29b      	uxth	r3, r3
 8002258:	3b01      	subs	r3, #1
 800225a:	b29a      	uxth	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	f003 0304 	and.w	r3, r3, #4
 800226a:	2b04      	cmp	r3, #4
 800226c:	d118      	bne.n	80022a0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	691a      	ldr	r2, [r3, #16]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002278:	b2d2      	uxtb	r2, r2
 800227a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002280:	1c5a      	adds	r2, r3, #1
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800228a:	3b01      	subs	r3, #1
 800228c:	b29a      	uxth	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002296:	b29b      	uxth	r3, r3
 8002298:	3b01      	subs	r3, #1
 800229a:	b29a      	uxth	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	f47f aec2 	bne.w	800202e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2220      	movs	r2, #32
 80022ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80022c2:	2300      	movs	r3, #0
 80022c4:	e000      	b.n	80022c8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80022c6:	2302      	movs	r3, #2
  }
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3728      	adds	r7, #40	; 0x28
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	00010004 	.word	0x00010004

080022d4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b088      	sub	sp, #32
 80022d8:	af02      	add	r7, sp, #8
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	607a      	str	r2, [r7, #4]
 80022de:	603b      	str	r3, [r7, #0]
 80022e0:	460b      	mov	r3, r1
 80022e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	2b08      	cmp	r3, #8
 80022ee:	d006      	beq.n	80022fe <I2C_MasterRequestWrite+0x2a>
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d003      	beq.n	80022fe <I2C_MasterRequestWrite+0x2a>
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80022fc:	d108      	bne.n	8002310 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800230c:	601a      	str	r2, [r3, #0]
 800230e:	e00b      	b.n	8002328 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002314:	2b12      	cmp	r3, #18
 8002316:	d107      	bne.n	8002328 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002326:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	9300      	str	r3, [sp, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002334:	68f8      	ldr	r0, [r7, #12]
 8002336:	f000 f91d 	bl	8002574 <I2C_WaitOnFlagUntilTimeout>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d00d      	beq.n	800235c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800234a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800234e:	d103      	bne.n	8002358 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002356:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e035      	b.n	80023c8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002364:	d108      	bne.n	8002378 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002366:	897b      	ldrh	r3, [r7, #10]
 8002368:	b2db      	uxtb	r3, r3
 800236a:	461a      	mov	r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002374:	611a      	str	r2, [r3, #16]
 8002376:	e01b      	b.n	80023b0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002378:	897b      	ldrh	r3, [r7, #10]
 800237a:	11db      	asrs	r3, r3, #7
 800237c:	b2db      	uxtb	r3, r3
 800237e:	f003 0306 	and.w	r3, r3, #6
 8002382:	b2db      	uxtb	r3, r3
 8002384:	f063 030f 	orn	r3, r3, #15
 8002388:	b2da      	uxtb	r2, r3
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	490e      	ldr	r1, [pc, #56]	; (80023d0 <I2C_MasterRequestWrite+0xfc>)
 8002396:	68f8      	ldr	r0, [r7, #12]
 8002398:	f000 f943 	bl	8002622 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e010      	b.n	80023c8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80023a6:	897b      	ldrh	r3, [r7, #10]
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	4907      	ldr	r1, [pc, #28]	; (80023d4 <I2C_MasterRequestWrite+0x100>)
 80023b6:	68f8      	ldr	r0, [r7, #12]
 80023b8:	f000 f933 	bl	8002622 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e000      	b.n	80023c8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3718      	adds	r7, #24
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	00010008 	.word	0x00010008
 80023d4:	00010002 	.word	0x00010002

080023d8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b088      	sub	sp, #32
 80023dc:	af02      	add	r7, sp, #8
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	607a      	str	r2, [r7, #4]
 80023e2:	603b      	str	r3, [r7, #0]
 80023e4:	460b      	mov	r3, r1
 80023e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ec:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80023fc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	2b08      	cmp	r3, #8
 8002402:	d006      	beq.n	8002412 <I2C_MasterRequestRead+0x3a>
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	2b01      	cmp	r3, #1
 8002408:	d003      	beq.n	8002412 <I2C_MasterRequestRead+0x3a>
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002410:	d108      	bne.n	8002424 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002420:	601a      	str	r2, [r3, #0]
 8002422:	e00b      	b.n	800243c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002428:	2b11      	cmp	r3, #17
 800242a:	d107      	bne.n	800243c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800243a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002448:	68f8      	ldr	r0, [r7, #12]
 800244a:	f000 f893 	bl	8002574 <I2C_WaitOnFlagUntilTimeout>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d00d      	beq.n	8002470 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800245e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002462:	d103      	bne.n	800246c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f44f 7200 	mov.w	r2, #512	; 0x200
 800246a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e079      	b.n	8002564 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002478:	d108      	bne.n	800248c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800247a:	897b      	ldrh	r3, [r7, #10]
 800247c:	b2db      	uxtb	r3, r3
 800247e:	f043 0301 	orr.w	r3, r3, #1
 8002482:	b2da      	uxtb	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	611a      	str	r2, [r3, #16]
 800248a:	e05f      	b.n	800254c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800248c:	897b      	ldrh	r3, [r7, #10]
 800248e:	11db      	asrs	r3, r3, #7
 8002490:	b2db      	uxtb	r3, r3
 8002492:	f003 0306 	and.w	r3, r3, #6
 8002496:	b2db      	uxtb	r3, r3
 8002498:	f063 030f 	orn	r3, r3, #15
 800249c:	b2da      	uxtb	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	4930      	ldr	r1, [pc, #192]	; (800256c <I2C_MasterRequestRead+0x194>)
 80024aa:	68f8      	ldr	r0, [r7, #12]
 80024ac:	f000 f8b9 	bl	8002622 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e054      	b.n	8002564 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80024ba:	897b      	ldrh	r3, [r7, #10]
 80024bc:	b2da      	uxtb	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	4929      	ldr	r1, [pc, #164]	; (8002570 <I2C_MasterRequestRead+0x198>)
 80024ca:	68f8      	ldr	r0, [r7, #12]
 80024cc:	f000 f8a9 	bl	8002622 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e044      	b.n	8002564 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024da:	2300      	movs	r3, #0
 80024dc:	613b      	str	r3, [r7, #16]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	695b      	ldr	r3, [r3, #20]
 80024e4:	613b      	str	r3, [r7, #16]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	613b      	str	r3, [r7, #16]
 80024ee:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024fe:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800250c:	68f8      	ldr	r0, [r7, #12]
 800250e:	f000 f831 	bl	8002574 <I2C_WaitOnFlagUntilTimeout>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00d      	beq.n	8002534 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002522:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002526:	d103      	bne.n	8002530 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800252e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e017      	b.n	8002564 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002534:	897b      	ldrh	r3, [r7, #10]
 8002536:	11db      	asrs	r3, r3, #7
 8002538:	b2db      	uxtb	r3, r3
 800253a:	f003 0306 	and.w	r3, r3, #6
 800253e:	b2db      	uxtb	r3, r3
 8002540:	f063 030e 	orn	r3, r3, #14
 8002544:	b2da      	uxtb	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	4907      	ldr	r1, [pc, #28]	; (8002570 <I2C_MasterRequestRead+0x198>)
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f000 f865 	bl	8002622 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e000      	b.n	8002564 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	3718      	adds	r7, #24
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	00010008 	.word	0x00010008
 8002570:	00010002 	.word	0x00010002

08002574 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	603b      	str	r3, [r7, #0]
 8002580:	4613      	mov	r3, r2
 8002582:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002584:	e025      	b.n	80025d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800258c:	d021      	beq.n	80025d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800258e:	f7fe ff75 	bl	800147c <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	429a      	cmp	r2, r3
 800259c:	d302      	bcc.n	80025a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d116      	bne.n	80025d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2200      	movs	r2, #0
 80025a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2220      	movs	r2, #32
 80025ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	f043 0220 	orr.w	r2, r3, #32
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e023      	b.n	800261a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	0c1b      	lsrs	r3, r3, #16
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d10d      	bne.n	80025f8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	43da      	mvns	r2, r3
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	4013      	ands	r3, r2
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	bf0c      	ite	eq
 80025ee:	2301      	moveq	r3, #1
 80025f0:	2300      	movne	r3, #0
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	461a      	mov	r2, r3
 80025f6:	e00c      	b.n	8002612 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	43da      	mvns	r2, r3
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	4013      	ands	r3, r2
 8002604:	b29b      	uxth	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	bf0c      	ite	eq
 800260a:	2301      	moveq	r3, #1
 800260c:	2300      	movne	r3, #0
 800260e:	b2db      	uxtb	r3, r3
 8002610:	461a      	mov	r2, r3
 8002612:	79fb      	ldrb	r3, [r7, #7]
 8002614:	429a      	cmp	r2, r3
 8002616:	d0b6      	beq.n	8002586 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b084      	sub	sp, #16
 8002626:	af00      	add	r7, sp, #0
 8002628:	60f8      	str	r0, [r7, #12]
 800262a:	60b9      	str	r1, [r7, #8]
 800262c:	607a      	str	r2, [r7, #4]
 800262e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002630:	e051      	b.n	80026d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	695b      	ldr	r3, [r3, #20]
 8002638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800263c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002640:	d123      	bne.n	800268a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002650:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800265a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2200      	movs	r2, #0
 8002660:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2220      	movs	r2, #32
 8002666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	f043 0204 	orr.w	r2, r3, #4
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e046      	b.n	8002718 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002690:	d021      	beq.n	80026d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002692:	f7fe fef3 	bl	800147c <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d302      	bcc.n	80026a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d116      	bne.n	80026d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2220      	movs	r2, #32
 80026b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	f043 0220 	orr.w	r2, r3, #32
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e020      	b.n	8002718 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	0c1b      	lsrs	r3, r3, #16
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d10c      	bne.n	80026fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	43da      	mvns	r2, r3
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	4013      	ands	r3, r2
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	bf14      	ite	ne
 80026f2:	2301      	movne	r3, #1
 80026f4:	2300      	moveq	r3, #0
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	e00b      	b.n	8002712 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	43da      	mvns	r2, r3
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	4013      	ands	r3, r2
 8002706:	b29b      	uxth	r3, r3
 8002708:	2b00      	cmp	r3, #0
 800270a:	bf14      	ite	ne
 800270c:	2301      	movne	r3, #1
 800270e:	2300      	moveq	r3, #0
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d18d      	bne.n	8002632 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	3710      	adds	r7, #16
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800272c:	e02d      	b.n	800278a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f000 f8ce 	bl	80028d0 <I2C_IsAcknowledgeFailed>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e02d      	b.n	800279a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002744:	d021      	beq.n	800278a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002746:	f7fe fe99 	bl	800147c <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	68ba      	ldr	r2, [r7, #8]
 8002752:	429a      	cmp	r2, r3
 8002754:	d302      	bcc.n	800275c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d116      	bne.n	800278a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2200      	movs	r2, #0
 8002760:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2220      	movs	r2, #32
 8002766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002776:	f043 0220 	orr.w	r2, r3, #32
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e007      	b.n	800279a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	695b      	ldr	r3, [r3, #20]
 8002790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002794:	2b80      	cmp	r3, #128	; 0x80
 8002796:	d1ca      	bne.n	800272e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b084      	sub	sp, #16
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	60f8      	str	r0, [r7, #12]
 80027aa:	60b9      	str	r1, [r7, #8]
 80027ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027ae:	e02d      	b.n	800280c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	f000 f88d 	bl	80028d0 <I2C_IsAcknowledgeFailed>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e02d      	b.n	800281c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c6:	d021      	beq.n	800280c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027c8:	f7fe fe58 	bl	800147c <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	68ba      	ldr	r2, [r7, #8]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d302      	bcc.n	80027de <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d116      	bne.n	800280c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2220      	movs	r2, #32
 80027e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f8:	f043 0220 	orr.w	r2, r3, #32
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e007      	b.n	800281c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	f003 0304 	and.w	r3, r3, #4
 8002816:	2b04      	cmp	r3, #4
 8002818:	d1ca      	bne.n	80027b0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002830:	e042      	b.n	80028b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	695b      	ldr	r3, [r3, #20]
 8002838:	f003 0310 	and.w	r3, r3, #16
 800283c:	2b10      	cmp	r3, #16
 800283e:	d119      	bne.n	8002874 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f06f 0210 	mvn.w	r2, #16
 8002848:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2200      	movs	r2, #0
 800284e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2220      	movs	r2, #32
 8002854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e029      	b.n	80028c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002874:	f7fe fe02 	bl	800147c <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	68ba      	ldr	r2, [r7, #8]
 8002880:	429a      	cmp	r2, r3
 8002882:	d302      	bcc.n	800288a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d116      	bne.n	80028b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2220      	movs	r2, #32
 8002894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a4:	f043 0220 	orr.w	r2, r3, #32
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e007      	b.n	80028c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028c2:	2b40      	cmp	r3, #64	; 0x40
 80028c4:	d1b5      	bne.n	8002832 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3710      	adds	r7, #16
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028e6:	d11b      	bne.n	8002920 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028f0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2220      	movs	r2, #32
 80028fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290c:	f043 0204 	orr.w	r2, r3, #4
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e000      	b.n	8002922 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
	...

08002930 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002936:	2300      	movs	r3, #0
 8002938:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800293a:	2300      	movs	r3, #0
 800293c:	603b      	str	r3, [r7, #0]
 800293e:	4b20      	ldr	r3, [pc, #128]	; (80029c0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	4a1f      	ldr	r2, [pc, #124]	; (80029c0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002948:	6413      	str	r3, [r2, #64]	; 0x40
 800294a:	4b1d      	ldr	r3, [pc, #116]	; (80029c0 <HAL_PWREx_EnableOverDrive+0x90>)
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002952:	603b      	str	r3, [r7, #0]
 8002954:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002956:	4b1b      	ldr	r3, [pc, #108]	; (80029c4 <HAL_PWREx_EnableOverDrive+0x94>)
 8002958:	2201      	movs	r2, #1
 800295a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800295c:	f7fe fd8e 	bl	800147c <HAL_GetTick>
 8002960:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002962:	e009      	b.n	8002978 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002964:	f7fe fd8a 	bl	800147c <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002972:	d901      	bls.n	8002978 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e01f      	b.n	80029b8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002978:	4b13      	ldr	r3, [pc, #76]	; (80029c8 <HAL_PWREx_EnableOverDrive+0x98>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002984:	d1ee      	bne.n	8002964 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002986:	4b11      	ldr	r3, [pc, #68]	; (80029cc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002988:	2201      	movs	r2, #1
 800298a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800298c:	f7fe fd76 	bl	800147c <HAL_GetTick>
 8002990:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002992:	e009      	b.n	80029a8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002994:	f7fe fd72 	bl	800147c <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029a2:	d901      	bls.n	80029a8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e007      	b.n	80029b8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80029a8:	4b07      	ldr	r3, [pc, #28]	; (80029c8 <HAL_PWREx_EnableOverDrive+0x98>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029b4:	d1ee      	bne.n	8002994 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40023800 	.word	0x40023800
 80029c4:	420e0040 	.word	0x420e0040
 80029c8:	40007000 	.word	0x40007000
 80029cc:	420e0044 	.word	0x420e0044

080029d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d101      	bne.n	80029e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e0cc      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029e4:	4b68      	ldr	r3, [pc, #416]	; (8002b88 <HAL_RCC_ClockConfig+0x1b8>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 030f 	and.w	r3, r3, #15
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d90c      	bls.n	8002a0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f2:	4b65      	ldr	r3, [pc, #404]	; (8002b88 <HAL_RCC_ClockConfig+0x1b8>)
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029fa:	4b63      	ldr	r3, [pc, #396]	; (8002b88 <HAL_RCC_ClockConfig+0x1b8>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d001      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e0b8      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d020      	beq.n	8002a5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d005      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a24:	4b59      	ldr	r3, [pc, #356]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	4a58      	ldr	r2, [pc, #352]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0308 	and.w	r3, r3, #8
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d005      	beq.n	8002a48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a3c:	4b53      	ldr	r3, [pc, #332]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	4a52      	ldr	r2, [pc, #328]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a48:	4b50      	ldr	r3, [pc, #320]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	494d      	ldr	r1, [pc, #308]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d044      	beq.n	8002af0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d107      	bne.n	8002a7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a6e:	4b47      	ldr	r3, [pc, #284]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d119      	bne.n	8002aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e07f      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d003      	beq.n	8002a8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a8a:	2b03      	cmp	r3, #3
 8002a8c:	d107      	bne.n	8002a9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a8e:	4b3f      	ldr	r3, [pc, #252]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d109      	bne.n	8002aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e06f      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a9e:	4b3b      	ldr	r3, [pc, #236]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e067      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aae:	4b37      	ldr	r3, [pc, #220]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f023 0203 	bic.w	r2, r3, #3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	4934      	ldr	r1, [pc, #208]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ac0:	f7fe fcdc 	bl	800147c <HAL_GetTick>
 8002ac4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ac6:	e00a      	b.n	8002ade <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ac8:	f7fe fcd8 	bl	800147c <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e04f      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ade:	4b2b      	ldr	r3, [pc, #172]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f003 020c 	and.w	r2, r3, #12
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d1eb      	bne.n	8002ac8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002af0:	4b25      	ldr	r3, [pc, #148]	; (8002b88 <HAL_RCC_ClockConfig+0x1b8>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 030f 	and.w	r3, r3, #15
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d20c      	bcs.n	8002b18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002afe:	4b22      	ldr	r3, [pc, #136]	; (8002b88 <HAL_RCC_ClockConfig+0x1b8>)
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	b2d2      	uxtb	r2, r2
 8002b04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b06:	4b20      	ldr	r3, [pc, #128]	; (8002b88 <HAL_RCC_ClockConfig+0x1b8>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 030f 	and.w	r3, r3, #15
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d001      	beq.n	8002b18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e032      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0304 	and.w	r3, r3, #4
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d008      	beq.n	8002b36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b24:	4b19      	ldr	r3, [pc, #100]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	4916      	ldr	r1, [pc, #88]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0308 	and.w	r3, r3, #8
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d009      	beq.n	8002b56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b42:	4b12      	ldr	r3, [pc, #72]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	490e      	ldr	r1, [pc, #56]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b56:	f000 f855 	bl	8002c04 <HAL_RCC_GetSysClockFreq>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	4b0b      	ldr	r3, [pc, #44]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	091b      	lsrs	r3, r3, #4
 8002b62:	f003 030f 	and.w	r3, r3, #15
 8002b66:	490a      	ldr	r1, [pc, #40]	; (8002b90 <HAL_RCC_ClockConfig+0x1c0>)
 8002b68:	5ccb      	ldrb	r3, [r1, r3]
 8002b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b6e:	4a09      	ldr	r2, [pc, #36]	; (8002b94 <HAL_RCC_ClockConfig+0x1c4>)
 8002b70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b72:	4b09      	ldr	r3, [pc, #36]	; (8002b98 <HAL_RCC_ClockConfig+0x1c8>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fe fc3c 	bl	80013f4 <HAL_InitTick>

  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	40023c00 	.word	0x40023c00
 8002b8c:	40023800 	.word	0x40023800
 8002b90:	080045d8 	.word	0x080045d8
 8002b94:	2000100c 	.word	0x2000100c
 8002b98:	20001010 	.word	0x20001010

08002b9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ba0:	4b03      	ldr	r3, [pc, #12]	; (8002bb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	2000100c 	.word	0x2000100c

08002bb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002bb8:	f7ff fff0 	bl	8002b9c <HAL_RCC_GetHCLKFreq>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	4b05      	ldr	r3, [pc, #20]	; (8002bd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	0a9b      	lsrs	r3, r3, #10
 8002bc4:	f003 0307 	and.w	r3, r3, #7
 8002bc8:	4903      	ldr	r1, [pc, #12]	; (8002bd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bca:	5ccb      	ldrb	r3, [r1, r3]
 8002bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	40023800 	.word	0x40023800
 8002bd8:	080045e8 	.word	0x080045e8

08002bdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002be0:	f7ff ffdc 	bl	8002b9c <HAL_RCC_GetHCLKFreq>
 8002be4:	4602      	mov	r2, r0
 8002be6:	4b05      	ldr	r3, [pc, #20]	; (8002bfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	0b5b      	lsrs	r3, r3, #13
 8002bec:	f003 0307 	and.w	r3, r3, #7
 8002bf0:	4903      	ldr	r1, [pc, #12]	; (8002c00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bf2:	5ccb      	ldrb	r3, [r1, r3]
 8002bf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	080045e8 	.word	0x080045e8

08002c04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c08:	b0a6      	sub	sp, #152	; 0x98
 8002c0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8002c12:	2300      	movs	r3, #0
 8002c14:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8002c24:	2300      	movs	r3, #0
 8002c26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c2a:	4bc8      	ldr	r3, [pc, #800]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x348>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f003 030c 	and.w	r3, r3, #12
 8002c32:	2b0c      	cmp	r3, #12
 8002c34:	f200 817e 	bhi.w	8002f34 <HAL_RCC_GetSysClockFreq+0x330>
 8002c38:	a201      	add	r2, pc, #4	; (adr r2, 8002c40 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c3e:	bf00      	nop
 8002c40:	08002c75 	.word	0x08002c75
 8002c44:	08002f35 	.word	0x08002f35
 8002c48:	08002f35 	.word	0x08002f35
 8002c4c:	08002f35 	.word	0x08002f35
 8002c50:	08002c7d 	.word	0x08002c7d
 8002c54:	08002f35 	.word	0x08002f35
 8002c58:	08002f35 	.word	0x08002f35
 8002c5c:	08002f35 	.word	0x08002f35
 8002c60:	08002c85 	.word	0x08002c85
 8002c64:	08002f35 	.word	0x08002f35
 8002c68:	08002f35 	.word	0x08002f35
 8002c6c:	08002f35 	.word	0x08002f35
 8002c70:	08002def 	.word	0x08002def
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c74:	4bb6      	ldr	r3, [pc, #728]	; (8002f50 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002c76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8002c7a:	e15f      	b.n	8002f3c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c7c:	4bb5      	ldr	r3, [pc, #724]	; (8002f54 <HAL_RCC_GetSysClockFreq+0x350>)
 8002c7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002c82:	e15b      	b.n	8002f3c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c84:	4bb1      	ldr	r3, [pc, #708]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x348>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c8c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c90:	4bae      	ldr	r3, [pc, #696]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x348>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d031      	beq.n	8002d00 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c9c:	4bab      	ldr	r3, [pc, #684]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x348>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	099b      	lsrs	r3, r3, #6
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ca6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002ca8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002caa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cae:	663b      	str	r3, [r7, #96]	; 0x60
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	667b      	str	r3, [r7, #100]	; 0x64
 8002cb4:	4ba7      	ldr	r3, [pc, #668]	; (8002f54 <HAL_RCC_GetSysClockFreq+0x350>)
 8002cb6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002cba:	462a      	mov	r2, r5
 8002cbc:	fb03 f202 	mul.w	r2, r3, r2
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	4621      	mov	r1, r4
 8002cc4:	fb01 f303 	mul.w	r3, r1, r3
 8002cc8:	4413      	add	r3, r2
 8002cca:	4aa2      	ldr	r2, [pc, #648]	; (8002f54 <HAL_RCC_GetSysClockFreq+0x350>)
 8002ccc:	4621      	mov	r1, r4
 8002cce:	fba1 1202 	umull	r1, r2, r1, r2
 8002cd2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002cd4:	460a      	mov	r2, r1
 8002cd6:	67ba      	str	r2, [r7, #120]	; 0x78
 8002cd8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002cda:	4413      	add	r3, r2
 8002cdc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002cde:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	65bb      	str	r3, [r7, #88]	; 0x58
 8002ce6:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002ce8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002cec:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002cf0:	f7fd fa88 	bl	8000204 <__aeabi_uldivmod>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002cfe:	e064      	b.n	8002dca <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d00:	4b92      	ldr	r3, [pc, #584]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x348>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	099b      	lsrs	r3, r3, #6
 8002d06:	2200      	movs	r2, #0
 8002d08:	653b      	str	r3, [r7, #80]	; 0x50
 8002d0a:	657a      	str	r2, [r7, #84]	; 0x54
 8002d0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d12:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d14:	2300      	movs	r3, #0
 8002d16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d18:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002d1c:	4622      	mov	r2, r4
 8002d1e:	462b      	mov	r3, r5
 8002d20:	f04f 0000 	mov.w	r0, #0
 8002d24:	f04f 0100 	mov.w	r1, #0
 8002d28:	0159      	lsls	r1, r3, #5
 8002d2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d2e:	0150      	lsls	r0, r2, #5
 8002d30:	4602      	mov	r2, r0
 8002d32:	460b      	mov	r3, r1
 8002d34:	4621      	mov	r1, r4
 8002d36:	1a51      	subs	r1, r2, r1
 8002d38:	6139      	str	r1, [r7, #16]
 8002d3a:	4629      	mov	r1, r5
 8002d3c:	eb63 0301 	sbc.w	r3, r3, r1
 8002d40:	617b      	str	r3, [r7, #20]
 8002d42:	f04f 0200 	mov.w	r2, #0
 8002d46:	f04f 0300 	mov.w	r3, #0
 8002d4a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d4e:	4659      	mov	r1, fp
 8002d50:	018b      	lsls	r3, r1, #6
 8002d52:	4651      	mov	r1, sl
 8002d54:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d58:	4651      	mov	r1, sl
 8002d5a:	018a      	lsls	r2, r1, #6
 8002d5c:	4651      	mov	r1, sl
 8002d5e:	ebb2 0801 	subs.w	r8, r2, r1
 8002d62:	4659      	mov	r1, fp
 8002d64:	eb63 0901 	sbc.w	r9, r3, r1
 8002d68:	f04f 0200 	mov.w	r2, #0
 8002d6c:	f04f 0300 	mov.w	r3, #0
 8002d70:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d74:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d78:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d7c:	4690      	mov	r8, r2
 8002d7e:	4699      	mov	r9, r3
 8002d80:	4623      	mov	r3, r4
 8002d82:	eb18 0303 	adds.w	r3, r8, r3
 8002d86:	60bb      	str	r3, [r7, #8]
 8002d88:	462b      	mov	r3, r5
 8002d8a:	eb49 0303 	adc.w	r3, r9, r3
 8002d8e:	60fb      	str	r3, [r7, #12]
 8002d90:	f04f 0200 	mov.w	r2, #0
 8002d94:	f04f 0300 	mov.w	r3, #0
 8002d98:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d9c:	4629      	mov	r1, r5
 8002d9e:	028b      	lsls	r3, r1, #10
 8002da0:	4621      	mov	r1, r4
 8002da2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002da6:	4621      	mov	r1, r4
 8002da8:	028a      	lsls	r2, r1, #10
 8002daa:	4610      	mov	r0, r2
 8002dac:	4619      	mov	r1, r3
 8002dae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002db2:	2200      	movs	r2, #0
 8002db4:	643b      	str	r3, [r7, #64]	; 0x40
 8002db6:	647a      	str	r2, [r7, #68]	; 0x44
 8002db8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002dbc:	f7fd fa22 	bl	8000204 <__aeabi_uldivmod>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002dca:	4b60      	ldr	r3, [pc, #384]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x348>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	0c1b      	lsrs	r3, r3, #16
 8002dd0:	f003 0303 	and.w	r3, r3, #3
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8002ddc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002de0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002dec:	e0a6      	b.n	8002f3c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dee:	4b57      	ldr	r3, [pc, #348]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x348>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002df6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dfa:	4b54      	ldr	r3, [pc, #336]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x348>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d02a      	beq.n	8002e5c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e06:	4b51      	ldr	r3, [pc, #324]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x348>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	099b      	lsrs	r3, r3, #6
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e10:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e14:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002e18:	2100      	movs	r1, #0
 8002e1a:	4b4e      	ldr	r3, [pc, #312]	; (8002f54 <HAL_RCC_GetSysClockFreq+0x350>)
 8002e1c:	fb03 f201 	mul.w	r2, r3, r1
 8002e20:	2300      	movs	r3, #0
 8002e22:	fb00 f303 	mul.w	r3, r0, r3
 8002e26:	4413      	add	r3, r2
 8002e28:	4a4a      	ldr	r2, [pc, #296]	; (8002f54 <HAL_RCC_GetSysClockFreq+0x350>)
 8002e2a:	fba0 1202 	umull	r1, r2, r0, r2
 8002e2e:	677a      	str	r2, [r7, #116]	; 0x74
 8002e30:	460a      	mov	r2, r1
 8002e32:	673a      	str	r2, [r7, #112]	; 0x70
 8002e34:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002e36:	4413      	add	r3, r2
 8002e38:	677b      	str	r3, [r7, #116]	; 0x74
 8002e3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e3e:	2200      	movs	r2, #0
 8002e40:	633b      	str	r3, [r7, #48]	; 0x30
 8002e42:	637a      	str	r2, [r7, #52]	; 0x34
 8002e44:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002e48:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002e4c:	f7fd f9da 	bl	8000204 <__aeabi_uldivmod>
 8002e50:	4602      	mov	r2, r0
 8002e52:	460b      	mov	r3, r1
 8002e54:	4613      	mov	r3, r2
 8002e56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002e5a:	e05b      	b.n	8002f14 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e5c:	4b3b      	ldr	r3, [pc, #236]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x348>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	099b      	lsrs	r3, r3, #6
 8002e62:	2200      	movs	r2, #0
 8002e64:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e6e:	623b      	str	r3, [r7, #32]
 8002e70:	2300      	movs	r3, #0
 8002e72:	627b      	str	r3, [r7, #36]	; 0x24
 8002e74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e78:	4642      	mov	r2, r8
 8002e7a:	464b      	mov	r3, r9
 8002e7c:	f04f 0000 	mov.w	r0, #0
 8002e80:	f04f 0100 	mov.w	r1, #0
 8002e84:	0159      	lsls	r1, r3, #5
 8002e86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e8a:	0150      	lsls	r0, r2, #5
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	460b      	mov	r3, r1
 8002e90:	4641      	mov	r1, r8
 8002e92:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e96:	4649      	mov	r1, r9
 8002e98:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e9c:	f04f 0200 	mov.w	r2, #0
 8002ea0:	f04f 0300 	mov.w	r3, #0
 8002ea4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ea8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002eac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002eb0:	ebb2 040a 	subs.w	r4, r2, sl
 8002eb4:	eb63 050b 	sbc.w	r5, r3, fp
 8002eb8:	f04f 0200 	mov.w	r2, #0
 8002ebc:	f04f 0300 	mov.w	r3, #0
 8002ec0:	00eb      	lsls	r3, r5, #3
 8002ec2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ec6:	00e2      	lsls	r2, r4, #3
 8002ec8:	4614      	mov	r4, r2
 8002eca:	461d      	mov	r5, r3
 8002ecc:	4643      	mov	r3, r8
 8002ece:	18e3      	adds	r3, r4, r3
 8002ed0:	603b      	str	r3, [r7, #0]
 8002ed2:	464b      	mov	r3, r9
 8002ed4:	eb45 0303 	adc.w	r3, r5, r3
 8002ed8:	607b      	str	r3, [r7, #4]
 8002eda:	f04f 0200 	mov.w	r2, #0
 8002ede:	f04f 0300 	mov.w	r3, #0
 8002ee2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ee6:	4629      	mov	r1, r5
 8002ee8:	028b      	lsls	r3, r1, #10
 8002eea:	4621      	mov	r1, r4
 8002eec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ef0:	4621      	mov	r1, r4
 8002ef2:	028a      	lsls	r2, r1, #10
 8002ef4:	4610      	mov	r0, r2
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002efc:	2200      	movs	r2, #0
 8002efe:	61bb      	str	r3, [r7, #24]
 8002f00:	61fa      	str	r2, [r7, #28]
 8002f02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f06:	f7fd f97d 	bl	8000204 <__aeabi_uldivmod>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	4613      	mov	r3, r2
 8002f10:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002f14:	4b0d      	ldr	r3, [pc, #52]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x348>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	0f1b      	lsrs	r3, r3, #28
 8002f1a:	f003 0307 	and.w	r3, r3, #7
 8002f1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8002f22:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002f26:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002f32:	e003      	b.n	8002f3c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f34:	4b06      	ldr	r3, [pc, #24]	; (8002f50 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002f36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002f3a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3798      	adds	r7, #152	; 0x98
 8002f44:	46bd      	mov	sp, r7
 8002f46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f4a:	bf00      	nop
 8002f4c:	40023800 	.word	0x40023800
 8002f50:	00f42400 	.word	0x00f42400
 8002f54:	017d7840 	.word	0x017d7840

08002f58 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e28d      	b.n	8003486 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f000 8083 	beq.w	800307e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002f78:	4b94      	ldr	r3, [pc, #592]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f003 030c 	and.w	r3, r3, #12
 8002f80:	2b04      	cmp	r3, #4
 8002f82:	d019      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f84:	4b91      	ldr	r3, [pc, #580]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002f8c:	2b08      	cmp	r3, #8
 8002f8e:	d106      	bne.n	8002f9e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f90:	4b8e      	ldr	r3, [pc, #568]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f9c:	d00c      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f9e:	4b8b      	ldr	r3, [pc, #556]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002fa6:	2b0c      	cmp	r3, #12
 8002fa8:	d112      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002faa:	4b88      	ldr	r3, [pc, #544]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fb6:	d10b      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fb8:	4b84      	ldr	r3, [pc, #528]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d05b      	beq.n	800307c <HAL_RCC_OscConfig+0x124>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d157      	bne.n	800307c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e25a      	b.n	8003486 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fd8:	d106      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x90>
 8002fda:	4b7c      	ldr	r3, [pc, #496]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a7b      	ldr	r2, [pc, #492]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 8002fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fe4:	6013      	str	r3, [r2, #0]
 8002fe6:	e01d      	b.n	8003024 <HAL_RCC_OscConfig+0xcc>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ff0:	d10c      	bne.n	800300c <HAL_RCC_OscConfig+0xb4>
 8002ff2:	4b76      	ldr	r3, [pc, #472]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a75      	ldr	r2, [pc, #468]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 8002ff8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ffc:	6013      	str	r3, [r2, #0]
 8002ffe:	4b73      	ldr	r3, [pc, #460]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a72      	ldr	r2, [pc, #456]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 8003004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003008:	6013      	str	r3, [r2, #0]
 800300a:	e00b      	b.n	8003024 <HAL_RCC_OscConfig+0xcc>
 800300c:	4b6f      	ldr	r3, [pc, #444]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a6e      	ldr	r2, [pc, #440]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 8003012:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003016:	6013      	str	r3, [r2, #0]
 8003018:	4b6c      	ldr	r3, [pc, #432]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a6b      	ldr	r2, [pc, #428]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 800301e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003022:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d013      	beq.n	8003054 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302c:	f7fe fa26 	bl	800147c <HAL_GetTick>
 8003030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003032:	e008      	b.n	8003046 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003034:	f7fe fa22 	bl	800147c <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b64      	cmp	r3, #100	; 0x64
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e21f      	b.n	8003486 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003046:	4b61      	ldr	r3, [pc, #388]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d0f0      	beq.n	8003034 <HAL_RCC_OscConfig+0xdc>
 8003052:	e014      	b.n	800307e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003054:	f7fe fa12 	bl	800147c <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800305c:	f7fe fa0e 	bl	800147c <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b64      	cmp	r3, #100	; 0x64
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e20b      	b.n	8003486 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800306e:	4b57      	ldr	r3, [pc, #348]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1f0      	bne.n	800305c <HAL_RCC_OscConfig+0x104>
 800307a:	e000      	b.n	800307e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800307c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d06f      	beq.n	800316a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800308a:	4b50      	ldr	r3, [pc, #320]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f003 030c 	and.w	r3, r3, #12
 8003092:	2b00      	cmp	r3, #0
 8003094:	d017      	beq.n	80030c6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003096:	4b4d      	ldr	r3, [pc, #308]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800309e:	2b08      	cmp	r3, #8
 80030a0:	d105      	bne.n	80030ae <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80030a2:	4b4a      	ldr	r3, [pc, #296]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00b      	beq.n	80030c6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030ae:	4b47      	ldr	r3, [pc, #284]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80030b6:	2b0c      	cmp	r3, #12
 80030b8:	d11c      	bne.n	80030f4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030ba:	4b44      	ldr	r3, [pc, #272]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d116      	bne.n	80030f4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030c6:	4b41      	ldr	r3, [pc, #260]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d005      	beq.n	80030de <HAL_RCC_OscConfig+0x186>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d001      	beq.n	80030de <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e1d3      	b.n	8003486 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030de:	4b3b      	ldr	r3, [pc, #236]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	4937      	ldr	r1, [pc, #220]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030f2:	e03a      	b.n	800316a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d020      	beq.n	800313e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030fc:	4b34      	ldr	r3, [pc, #208]	; (80031d0 <HAL_RCC_OscConfig+0x278>)
 80030fe:	2201      	movs	r2, #1
 8003100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003102:	f7fe f9bb 	bl	800147c <HAL_GetTick>
 8003106:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003108:	e008      	b.n	800311c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800310a:	f7fe f9b7 	bl	800147c <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e1b4      	b.n	8003486 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800311c:	4b2b      	ldr	r3, [pc, #172]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d0f0      	beq.n	800310a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003128:	4b28      	ldr	r3, [pc, #160]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	4925      	ldr	r1, [pc, #148]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 8003138:	4313      	orrs	r3, r2
 800313a:	600b      	str	r3, [r1, #0]
 800313c:	e015      	b.n	800316a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800313e:	4b24      	ldr	r3, [pc, #144]	; (80031d0 <HAL_RCC_OscConfig+0x278>)
 8003140:	2200      	movs	r2, #0
 8003142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003144:	f7fe f99a 	bl	800147c <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800314c:	f7fe f996 	bl	800147c <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e193      	b.n	8003486 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800315e:	4b1b      	ldr	r3, [pc, #108]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1f0      	bne.n	800314c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0308 	and.w	r3, r3, #8
 8003172:	2b00      	cmp	r3, #0
 8003174:	d036      	beq.n	80031e4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d016      	beq.n	80031ac <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800317e:	4b15      	ldr	r3, [pc, #84]	; (80031d4 <HAL_RCC_OscConfig+0x27c>)
 8003180:	2201      	movs	r2, #1
 8003182:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003184:	f7fe f97a 	bl	800147c <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800318c:	f7fe f976 	bl	800147c <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e173      	b.n	8003486 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800319e:	4b0b      	ldr	r3, [pc, #44]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 80031a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d0f0      	beq.n	800318c <HAL_RCC_OscConfig+0x234>
 80031aa:	e01b      	b.n	80031e4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031ac:	4b09      	ldr	r3, [pc, #36]	; (80031d4 <HAL_RCC_OscConfig+0x27c>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b2:	f7fe f963 	bl	800147c <HAL_GetTick>
 80031b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031b8:	e00e      	b.n	80031d8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031ba:	f7fe f95f 	bl	800147c <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d907      	bls.n	80031d8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e15c      	b.n	8003486 <HAL_RCC_OscConfig+0x52e>
 80031cc:	40023800 	.word	0x40023800
 80031d0:	42470000 	.word	0x42470000
 80031d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031d8:	4b8a      	ldr	r3, [pc, #552]	; (8003404 <HAL_RCC_OscConfig+0x4ac>)
 80031da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1ea      	bne.n	80031ba <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0304 	and.w	r3, r3, #4
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f000 8097 	beq.w	8003320 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031f2:	2300      	movs	r3, #0
 80031f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031f6:	4b83      	ldr	r3, [pc, #524]	; (8003404 <HAL_RCC_OscConfig+0x4ac>)
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10f      	bne.n	8003222 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003202:	2300      	movs	r3, #0
 8003204:	60bb      	str	r3, [r7, #8]
 8003206:	4b7f      	ldr	r3, [pc, #508]	; (8003404 <HAL_RCC_OscConfig+0x4ac>)
 8003208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320a:	4a7e      	ldr	r2, [pc, #504]	; (8003404 <HAL_RCC_OscConfig+0x4ac>)
 800320c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003210:	6413      	str	r3, [r2, #64]	; 0x40
 8003212:	4b7c      	ldr	r3, [pc, #496]	; (8003404 <HAL_RCC_OscConfig+0x4ac>)
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800321a:	60bb      	str	r3, [r7, #8]
 800321c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800321e:	2301      	movs	r3, #1
 8003220:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003222:	4b79      	ldr	r3, [pc, #484]	; (8003408 <HAL_RCC_OscConfig+0x4b0>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800322a:	2b00      	cmp	r3, #0
 800322c:	d118      	bne.n	8003260 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800322e:	4b76      	ldr	r3, [pc, #472]	; (8003408 <HAL_RCC_OscConfig+0x4b0>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a75      	ldr	r2, [pc, #468]	; (8003408 <HAL_RCC_OscConfig+0x4b0>)
 8003234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003238:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800323a:	f7fe f91f 	bl	800147c <HAL_GetTick>
 800323e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003240:	e008      	b.n	8003254 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003242:	f7fe f91b 	bl	800147c <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	2b02      	cmp	r3, #2
 800324e:	d901      	bls.n	8003254 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e118      	b.n	8003486 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003254:	4b6c      	ldr	r3, [pc, #432]	; (8003408 <HAL_RCC_OscConfig+0x4b0>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325c:	2b00      	cmp	r3, #0
 800325e:	d0f0      	beq.n	8003242 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d106      	bne.n	8003276 <HAL_RCC_OscConfig+0x31e>
 8003268:	4b66      	ldr	r3, [pc, #408]	; (8003404 <HAL_RCC_OscConfig+0x4ac>)
 800326a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326c:	4a65      	ldr	r2, [pc, #404]	; (8003404 <HAL_RCC_OscConfig+0x4ac>)
 800326e:	f043 0301 	orr.w	r3, r3, #1
 8003272:	6713      	str	r3, [r2, #112]	; 0x70
 8003274:	e01c      	b.n	80032b0 <HAL_RCC_OscConfig+0x358>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	2b05      	cmp	r3, #5
 800327c:	d10c      	bne.n	8003298 <HAL_RCC_OscConfig+0x340>
 800327e:	4b61      	ldr	r3, [pc, #388]	; (8003404 <HAL_RCC_OscConfig+0x4ac>)
 8003280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003282:	4a60      	ldr	r2, [pc, #384]	; (8003404 <HAL_RCC_OscConfig+0x4ac>)
 8003284:	f043 0304 	orr.w	r3, r3, #4
 8003288:	6713      	str	r3, [r2, #112]	; 0x70
 800328a:	4b5e      	ldr	r3, [pc, #376]	; (8003404 <HAL_RCC_OscConfig+0x4ac>)
 800328c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328e:	4a5d      	ldr	r2, [pc, #372]	; (8003404 <HAL_RCC_OscConfig+0x4ac>)
 8003290:	f043 0301 	orr.w	r3, r3, #1
 8003294:	6713      	str	r3, [r2, #112]	; 0x70
 8003296:	e00b      	b.n	80032b0 <HAL_RCC_OscConfig+0x358>
 8003298:	4b5a      	ldr	r3, [pc, #360]	; (8003404 <HAL_RCC_OscConfig+0x4ac>)
 800329a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800329c:	4a59      	ldr	r2, [pc, #356]	; (8003404 <HAL_RCC_OscConfig+0x4ac>)
 800329e:	f023 0301 	bic.w	r3, r3, #1
 80032a2:	6713      	str	r3, [r2, #112]	; 0x70
 80032a4:	4b57      	ldr	r3, [pc, #348]	; (8003404 <HAL_RCC_OscConfig+0x4ac>)
 80032a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a8:	4a56      	ldr	r2, [pc, #344]	; (8003404 <HAL_RCC_OscConfig+0x4ac>)
 80032aa:	f023 0304 	bic.w	r3, r3, #4
 80032ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d015      	beq.n	80032e4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b8:	f7fe f8e0 	bl	800147c <HAL_GetTick>
 80032bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032be:	e00a      	b.n	80032d6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032c0:	f7fe f8dc 	bl	800147c <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e0d7      	b.n	8003486 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d6:	4b4b      	ldr	r3, [pc, #300]	; (8003404 <HAL_RCC_OscConfig+0x4ac>)
 80032d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d0ee      	beq.n	80032c0 <HAL_RCC_OscConfig+0x368>
 80032e2:	e014      	b.n	800330e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e4:	f7fe f8ca 	bl	800147c <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032ea:	e00a      	b.n	8003302 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032ec:	f7fe f8c6 	bl	800147c <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e0c1      	b.n	8003486 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003302:	4b40      	ldr	r3, [pc, #256]	; (8003404 <HAL_RCC_OscConfig+0x4ac>)
 8003304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1ee      	bne.n	80032ec <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800330e:	7dfb      	ldrb	r3, [r7, #23]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d105      	bne.n	8003320 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003314:	4b3b      	ldr	r3, [pc, #236]	; (8003404 <HAL_RCC_OscConfig+0x4ac>)
 8003316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003318:	4a3a      	ldr	r2, [pc, #232]	; (8003404 <HAL_RCC_OscConfig+0x4ac>)
 800331a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800331e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	2b00      	cmp	r3, #0
 8003326:	f000 80ad 	beq.w	8003484 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800332a:	4b36      	ldr	r3, [pc, #216]	; (8003404 <HAL_RCC_OscConfig+0x4ac>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f003 030c 	and.w	r3, r3, #12
 8003332:	2b08      	cmp	r3, #8
 8003334:	d060      	beq.n	80033f8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	2b02      	cmp	r3, #2
 800333c:	d145      	bne.n	80033ca <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800333e:	4b33      	ldr	r3, [pc, #204]	; (800340c <HAL_RCC_OscConfig+0x4b4>)
 8003340:	2200      	movs	r2, #0
 8003342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003344:	f7fe f89a 	bl	800147c <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800334a:	e008      	b.n	800335e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800334c:	f7fe f896 	bl	800147c <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b02      	cmp	r3, #2
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e093      	b.n	8003486 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800335e:	4b29      	ldr	r3, [pc, #164]	; (8003404 <HAL_RCC_OscConfig+0x4ac>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1f0      	bne.n	800334c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	69da      	ldr	r2, [r3, #28]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	431a      	orrs	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003378:	019b      	lsls	r3, r3, #6
 800337a:	431a      	orrs	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003380:	085b      	lsrs	r3, r3, #1
 8003382:	3b01      	subs	r3, #1
 8003384:	041b      	lsls	r3, r3, #16
 8003386:	431a      	orrs	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338c:	061b      	lsls	r3, r3, #24
 800338e:	431a      	orrs	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003394:	071b      	lsls	r3, r3, #28
 8003396:	491b      	ldr	r1, [pc, #108]	; (8003404 <HAL_RCC_OscConfig+0x4ac>)
 8003398:	4313      	orrs	r3, r2
 800339a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800339c:	4b1b      	ldr	r3, [pc, #108]	; (800340c <HAL_RCC_OscConfig+0x4b4>)
 800339e:	2201      	movs	r2, #1
 80033a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a2:	f7fe f86b 	bl	800147c <HAL_GetTick>
 80033a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033a8:	e008      	b.n	80033bc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033aa:	f7fe f867 	bl	800147c <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d901      	bls.n	80033bc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e064      	b.n	8003486 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033bc:	4b11      	ldr	r3, [pc, #68]	; (8003404 <HAL_RCC_OscConfig+0x4ac>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d0f0      	beq.n	80033aa <HAL_RCC_OscConfig+0x452>
 80033c8:	e05c      	b.n	8003484 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ca:	4b10      	ldr	r3, [pc, #64]	; (800340c <HAL_RCC_OscConfig+0x4b4>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d0:	f7fe f854 	bl	800147c <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033d8:	f7fe f850 	bl	800147c <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e04d      	b.n	8003486 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ea:	4b06      	ldr	r3, [pc, #24]	; (8003404 <HAL_RCC_OscConfig+0x4ac>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1f0      	bne.n	80033d8 <HAL_RCC_OscConfig+0x480>
 80033f6:	e045      	b.n	8003484 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d107      	bne.n	8003410 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e040      	b.n	8003486 <HAL_RCC_OscConfig+0x52e>
 8003404:	40023800 	.word	0x40023800
 8003408:	40007000 	.word	0x40007000
 800340c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003410:	4b1f      	ldr	r3, [pc, #124]	; (8003490 <HAL_RCC_OscConfig+0x538>)
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d030      	beq.n	8003480 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003428:	429a      	cmp	r2, r3
 800342a:	d129      	bne.n	8003480 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003436:	429a      	cmp	r2, r3
 8003438:	d122      	bne.n	8003480 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003440:	4013      	ands	r3, r2
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003446:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003448:	4293      	cmp	r3, r2
 800344a:	d119      	bne.n	8003480 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003456:	085b      	lsrs	r3, r3, #1
 8003458:	3b01      	subs	r3, #1
 800345a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800345c:	429a      	cmp	r2, r3
 800345e:	d10f      	bne.n	8003480 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800346c:	429a      	cmp	r2, r3
 800346e:	d107      	bne.n	8003480 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800347c:	429a      	cmp	r2, r3
 800347e:	d001      	beq.n	8003484 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e000      	b.n	8003486 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3718      	adds	r7, #24
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	40023800 	.word	0x40023800

08003494 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d101      	bne.n	80034a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e07b      	b.n	800359e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d108      	bne.n	80034c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034b6:	d009      	beq.n	80034cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	61da      	str	r2, [r3, #28]
 80034be:	e005      	b.n	80034cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d106      	bne.n	80034ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f7fd fa5e 	bl	80009a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2202      	movs	r2, #2
 80034f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003502:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003514:	431a      	orrs	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800351e:	431a      	orrs	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	431a      	orrs	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	431a      	orrs	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800353c:	431a      	orrs	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	69db      	ldr	r3, [r3, #28]
 8003542:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003546:	431a      	orrs	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a1b      	ldr	r3, [r3, #32]
 800354c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003550:	ea42 0103 	orr.w	r1, r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003558:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	430a      	orrs	r2, r1
 8003562:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	0c1b      	lsrs	r3, r3, #16
 800356a:	f003 0104 	and.w	r1, r3, #4
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003572:	f003 0210 	and.w	r2, r3, #16
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	430a      	orrs	r2, r1
 800357c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	69da      	ldr	r2, [r3, #28]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800358c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3708      	adds	r7, #8
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b088      	sub	sp, #32
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	60f8      	str	r0, [r7, #12]
 80035ae:	60b9      	str	r1, [r7, #8]
 80035b0:	603b      	str	r3, [r7, #0]
 80035b2:	4613      	mov	r3, r2
 80035b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80035b6:	2300      	movs	r3, #0
 80035b8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d101      	bne.n	80035c8 <HAL_SPI_Transmit+0x22>
 80035c4:	2302      	movs	r3, #2
 80035c6:	e126      	b.n	8003816 <HAL_SPI_Transmit+0x270>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035d0:	f7fd ff54 	bl	800147c <HAL_GetTick>
 80035d4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80035d6:	88fb      	ldrh	r3, [r7, #6]
 80035d8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d002      	beq.n	80035ec <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80035e6:	2302      	movs	r3, #2
 80035e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035ea:	e10b      	b.n	8003804 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d002      	beq.n	80035f8 <HAL_SPI_Transmit+0x52>
 80035f2:	88fb      	ldrh	r3, [r7, #6]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d102      	bne.n	80035fe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035fc:	e102      	b.n	8003804 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2203      	movs	r2, #3
 8003602:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	68ba      	ldr	r2, [r7, #8]
 8003610:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	88fa      	ldrh	r2, [r7, #6]
 8003616:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	88fa      	ldrh	r2, [r7, #6]
 800361c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003644:	d10f      	bne.n	8003666 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003654:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003664:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003670:	2b40      	cmp	r3, #64	; 0x40
 8003672:	d007      	beq.n	8003684 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003682:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800368c:	d14b      	bne.n	8003726 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d002      	beq.n	800369c <HAL_SPI_Transmit+0xf6>
 8003696:	8afb      	ldrh	r3, [r7, #22]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d13e      	bne.n	800371a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a0:	881a      	ldrh	r2, [r3, #0]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ac:	1c9a      	adds	r2, r3, #2
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	3b01      	subs	r3, #1
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80036c0:	e02b      	b.n	800371a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d112      	bne.n	80036f6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d4:	881a      	ldrh	r2, [r3, #0]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e0:	1c9a      	adds	r2, r3, #2
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	3b01      	subs	r3, #1
 80036ee:	b29a      	uxth	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	86da      	strh	r2, [r3, #54]	; 0x36
 80036f4:	e011      	b.n	800371a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036f6:	f7fd fec1 	bl	800147c <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	429a      	cmp	r2, r3
 8003704:	d803      	bhi.n	800370e <HAL_SPI_Transmit+0x168>
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800370c:	d102      	bne.n	8003714 <HAL_SPI_Transmit+0x16e>
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d102      	bne.n	800371a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003718:	e074      	b.n	8003804 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800371e:	b29b      	uxth	r3, r3
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1ce      	bne.n	80036c2 <HAL_SPI_Transmit+0x11c>
 8003724:	e04c      	b.n	80037c0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d002      	beq.n	8003734 <HAL_SPI_Transmit+0x18e>
 800372e:	8afb      	ldrh	r3, [r7, #22]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d140      	bne.n	80037b6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	330c      	adds	r3, #12
 800373e:	7812      	ldrb	r2, [r2, #0]
 8003740:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003746:	1c5a      	adds	r2, r3, #1
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003750:	b29b      	uxth	r3, r3
 8003752:	3b01      	subs	r3, #1
 8003754:	b29a      	uxth	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800375a:	e02c      	b.n	80037b6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b02      	cmp	r3, #2
 8003768:	d113      	bne.n	8003792 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	330c      	adds	r3, #12
 8003774:	7812      	ldrb	r2, [r2, #0]
 8003776:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377c:	1c5a      	adds	r2, r3, #1
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003786:	b29b      	uxth	r3, r3
 8003788:	3b01      	subs	r3, #1
 800378a:	b29a      	uxth	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003790:	e011      	b.n	80037b6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003792:	f7fd fe73 	bl	800147c <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	683a      	ldr	r2, [r7, #0]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d803      	bhi.n	80037aa <HAL_SPI_Transmit+0x204>
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a8:	d102      	bne.n	80037b0 <HAL_SPI_Transmit+0x20a>
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d102      	bne.n	80037b6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80037b4:	e026      	b.n	8003804 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d1cd      	bne.n	800375c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	6839      	ldr	r1, [r7, #0]
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f000 fbcb 	bl	8003f60 <SPI_EndRxTxTransaction>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d002      	beq.n	80037d6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2220      	movs	r2, #32
 80037d4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10a      	bne.n	80037f4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037de:	2300      	movs	r3, #0
 80037e0:	613b      	str	r3, [r7, #16]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	613b      	str	r3, [r7, #16]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	613b      	str	r3, [r7, #16]
 80037f2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d002      	beq.n	8003802 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	77fb      	strb	r3, [r7, #31]
 8003800:	e000      	b.n	8003804 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003802:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003814:	7ffb      	ldrb	r3, [r7, #31]
}
 8003816:	4618      	mov	r0, r3
 8003818:	3720      	adds	r7, #32
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800381e:	b580      	push	{r7, lr}
 8003820:	b088      	sub	sp, #32
 8003822:	af02      	add	r7, sp, #8
 8003824:	60f8      	str	r0, [r7, #12]
 8003826:	60b9      	str	r1, [r7, #8]
 8003828:	603b      	str	r3, [r7, #0]
 800382a:	4613      	mov	r3, r2
 800382c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800382e:	2300      	movs	r3, #0
 8003830:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800383a:	d112      	bne.n	8003862 <HAL_SPI_Receive+0x44>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d10e      	bne.n	8003862 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2204      	movs	r2, #4
 8003848:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800384c:	88fa      	ldrh	r2, [r7, #6]
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	9300      	str	r3, [sp, #0]
 8003852:	4613      	mov	r3, r2
 8003854:	68ba      	ldr	r2, [r7, #8]
 8003856:	68b9      	ldr	r1, [r7, #8]
 8003858:	68f8      	ldr	r0, [r7, #12]
 800385a:	f000 f8f1 	bl	8003a40 <HAL_SPI_TransmitReceive>
 800385e:	4603      	mov	r3, r0
 8003860:	e0ea      	b.n	8003a38 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003868:	2b01      	cmp	r3, #1
 800386a:	d101      	bne.n	8003870 <HAL_SPI_Receive+0x52>
 800386c:	2302      	movs	r3, #2
 800386e:	e0e3      	b.n	8003a38 <HAL_SPI_Receive+0x21a>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003878:	f7fd fe00 	bl	800147c <HAL_GetTick>
 800387c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b01      	cmp	r3, #1
 8003888:	d002      	beq.n	8003890 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800388a:	2302      	movs	r3, #2
 800388c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800388e:	e0ca      	b.n	8003a26 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d002      	beq.n	800389c <HAL_SPI_Receive+0x7e>
 8003896:	88fb      	ldrh	r3, [r7, #6]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d102      	bne.n	80038a2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	75fb      	strb	r3, [r7, #23]
    goto error;
 80038a0:	e0c1      	b.n	8003a26 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2204      	movs	r2, #4
 80038a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	68ba      	ldr	r2, [r7, #8]
 80038b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	88fa      	ldrh	r2, [r7, #6]
 80038ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	88fa      	ldrh	r2, [r7, #6]
 80038c0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038e8:	d10f      	bne.n	800390a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003908:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003914:	2b40      	cmp	r3, #64	; 0x40
 8003916:	d007      	beq.n	8003928 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003926:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d162      	bne.n	80039f6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003930:	e02e      	b.n	8003990 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f003 0301 	and.w	r3, r3, #1
 800393c:	2b01      	cmp	r3, #1
 800393e:	d115      	bne.n	800396c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f103 020c 	add.w	r2, r3, #12
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394c:	7812      	ldrb	r2, [r2, #0]
 800394e:	b2d2      	uxtb	r2, r2
 8003950:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003956:	1c5a      	adds	r2, r3, #1
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003960:	b29b      	uxth	r3, r3
 8003962:	3b01      	subs	r3, #1
 8003964:	b29a      	uxth	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	87da      	strh	r2, [r3, #62]	; 0x3e
 800396a:	e011      	b.n	8003990 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800396c:	f7fd fd86 	bl	800147c <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	429a      	cmp	r2, r3
 800397a:	d803      	bhi.n	8003984 <HAL_SPI_Receive+0x166>
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003982:	d102      	bne.n	800398a <HAL_SPI_Receive+0x16c>
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d102      	bne.n	8003990 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800398e:	e04a      	b.n	8003a26 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003994:	b29b      	uxth	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1cb      	bne.n	8003932 <HAL_SPI_Receive+0x114>
 800399a:	e031      	b.n	8003a00 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d113      	bne.n	80039d2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68da      	ldr	r2, [r3, #12]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b4:	b292      	uxth	r2, r2
 80039b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039bc:	1c9a      	adds	r2, r3, #2
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	3b01      	subs	r3, #1
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80039d0:	e011      	b.n	80039f6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039d2:	f7fd fd53 	bl	800147c <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d803      	bhi.n	80039ea <HAL_SPI_Receive+0x1cc>
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e8:	d102      	bne.n	80039f0 <HAL_SPI_Receive+0x1d2>
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d102      	bne.n	80039f6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80039f4:	e017      	b.n	8003a26 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d1cd      	bne.n	800399c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	6839      	ldr	r1, [r7, #0]
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f000 fa45 	bl	8003e94 <SPI_EndRxTransaction>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d002      	beq.n	8003a16 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2220      	movs	r2, #32
 8003a14:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d002      	beq.n	8003a24 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	75fb      	strb	r3, [r7, #23]
 8003a22:	e000      	b.n	8003a26 <HAL_SPI_Receive+0x208>
  }

error :
 8003a24:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a36:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3718      	adds	r7, #24
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b08c      	sub	sp, #48	; 0x30
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
 8003a4c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003a52:	2300      	movs	r3, #0
 8003a54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d101      	bne.n	8003a66 <HAL_SPI_TransmitReceive+0x26>
 8003a62:	2302      	movs	r3, #2
 8003a64:	e18a      	b.n	8003d7c <HAL_SPI_TransmitReceive+0x33c>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a6e:	f7fd fd05 	bl	800147c <HAL_GetTick>
 8003a72:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003a84:	887b      	ldrh	r3, [r7, #2]
 8003a86:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d00f      	beq.n	8003ab0 <HAL_SPI_TransmitReceive+0x70>
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a96:	d107      	bne.n	8003aa8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d103      	bne.n	8003aa8 <HAL_SPI_TransmitReceive+0x68>
 8003aa0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003aa4:	2b04      	cmp	r3, #4
 8003aa6:	d003      	beq.n	8003ab0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003aae:	e15b      	b.n	8003d68 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d005      	beq.n	8003ac2 <HAL_SPI_TransmitReceive+0x82>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d002      	beq.n	8003ac2 <HAL_SPI_TransmitReceive+0x82>
 8003abc:	887b      	ldrh	r3, [r7, #2]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d103      	bne.n	8003aca <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003ac8:	e14e      	b.n	8003d68 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b04      	cmp	r3, #4
 8003ad4:	d003      	beq.n	8003ade <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2205      	movs	r2, #5
 8003ada:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	887a      	ldrh	r2, [r7, #2]
 8003aee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	887a      	ldrh	r2, [r7, #2]
 8003af4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	68ba      	ldr	r2, [r7, #8]
 8003afa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	887a      	ldrh	r2, [r7, #2]
 8003b00:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	887a      	ldrh	r2, [r7, #2]
 8003b06:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b1e:	2b40      	cmp	r3, #64	; 0x40
 8003b20:	d007      	beq.n	8003b32 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b30:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b3a:	d178      	bne.n	8003c2e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d002      	beq.n	8003b4a <HAL_SPI_TransmitReceive+0x10a>
 8003b44:	8b7b      	ldrh	r3, [r7, #26]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d166      	bne.n	8003c18 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4e:	881a      	ldrh	r2, [r3, #0]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5a:	1c9a      	adds	r2, r3, #2
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	3b01      	subs	r3, #1
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b6e:	e053      	b.n	8003c18 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d11b      	bne.n	8003bb6 <HAL_SPI_TransmitReceive+0x176>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d016      	beq.n	8003bb6 <HAL_SPI_TransmitReceive+0x176>
 8003b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d113      	bne.n	8003bb6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b92:	881a      	ldrh	r2, [r3, #0]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9e:	1c9a      	adds	r2, r3, #2
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	3b01      	subs	r3, #1
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f003 0301 	and.w	r3, r3, #1
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d119      	bne.n	8003bf8 <HAL_SPI_TransmitReceive+0x1b8>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d014      	beq.n	8003bf8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68da      	ldr	r2, [r3, #12]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd8:	b292      	uxth	r2, r2
 8003bda:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be0:	1c9a      	adds	r2, r3, #2
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	3b01      	subs	r3, #1
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003bf8:	f7fd fc40 	bl	800147c <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d807      	bhi.n	8003c18 <HAL_SPI_TransmitReceive+0x1d8>
 8003c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c0e:	d003      	beq.n	8003c18 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003c16:	e0a7      	b.n	8003d68 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1a6      	bne.n	8003b70 <HAL_SPI_TransmitReceive+0x130>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1a1      	bne.n	8003b70 <HAL_SPI_TransmitReceive+0x130>
 8003c2c:	e07c      	b.n	8003d28 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d002      	beq.n	8003c3c <HAL_SPI_TransmitReceive+0x1fc>
 8003c36:	8b7b      	ldrh	r3, [r7, #26]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d16b      	bne.n	8003d14 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	330c      	adds	r3, #12
 8003c46:	7812      	ldrb	r2, [r2, #0]
 8003c48:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4e:	1c5a      	adds	r2, r3, #1
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c62:	e057      	b.n	8003d14 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d11c      	bne.n	8003cac <HAL_SPI_TransmitReceive+0x26c>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d017      	beq.n	8003cac <HAL_SPI_TransmitReceive+0x26c>
 8003c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d114      	bne.n	8003cac <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	330c      	adds	r3, #12
 8003c8c:	7812      	ldrb	r2, [r2, #0]
 8003c8e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c94:	1c5a      	adds	r2, r3, #1
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	b29a      	uxth	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d119      	bne.n	8003cee <HAL_SPI_TransmitReceive+0x2ae>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d014      	beq.n	8003cee <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68da      	ldr	r2, [r3, #12]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cce:	b2d2      	uxtb	r2, r2
 8003cd0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd6:	1c5a      	adds	r2, r3, #1
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003cea:	2301      	movs	r3, #1
 8003cec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003cee:	f7fd fbc5 	bl	800147c <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d803      	bhi.n	8003d06 <HAL_SPI_TransmitReceive+0x2c6>
 8003cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d04:	d102      	bne.n	8003d0c <HAL_SPI_TransmitReceive+0x2cc>
 8003d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d103      	bne.n	8003d14 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003d12:	e029      	b.n	8003d68 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1a2      	bne.n	8003c64 <HAL_SPI_TransmitReceive+0x224>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d19d      	bne.n	8003c64 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f000 f917 	bl	8003f60 <SPI_EndRxTxTransaction>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d006      	beq.n	8003d46 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2220      	movs	r2, #32
 8003d42:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003d44:	e010      	b.n	8003d68 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d10b      	bne.n	8003d66 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d4e:	2300      	movs	r3, #0
 8003d50:	617b      	str	r3, [r7, #20]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	617b      	str	r3, [r7, #20]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	617b      	str	r3, [r7, #20]
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	e000      	b.n	8003d68 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003d66:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d78:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3730      	adds	r7, #48	; 0x30
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b088      	sub	sp, #32
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	603b      	str	r3, [r7, #0]
 8003d90:	4613      	mov	r3, r2
 8003d92:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d94:	f7fd fb72 	bl	800147c <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d9c:	1a9b      	subs	r3, r3, r2
 8003d9e:	683a      	ldr	r2, [r7, #0]
 8003da0:	4413      	add	r3, r2
 8003da2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003da4:	f7fd fb6a 	bl	800147c <HAL_GetTick>
 8003da8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003daa:	4b39      	ldr	r3, [pc, #228]	; (8003e90 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	015b      	lsls	r3, r3, #5
 8003db0:	0d1b      	lsrs	r3, r3, #20
 8003db2:	69fa      	ldr	r2, [r7, #28]
 8003db4:	fb02 f303 	mul.w	r3, r2, r3
 8003db8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dba:	e054      	b.n	8003e66 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dc2:	d050      	beq.n	8003e66 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003dc4:	f7fd fb5a 	bl	800147c <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	69fa      	ldr	r2, [r7, #28]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d902      	bls.n	8003dda <SPI_WaitFlagStateUntilTimeout+0x56>
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d13d      	bne.n	8003e56 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	685a      	ldr	r2, [r3, #4]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003de8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003df2:	d111      	bne.n	8003e18 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dfc:	d004      	beq.n	8003e08 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e06:	d107      	bne.n	8003e18 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e20:	d10f      	bne.n	8003e42 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e30:	601a      	str	r2, [r3, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e017      	b.n	8003e86 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d101      	bne.n	8003e60 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	3b01      	subs	r3, #1
 8003e64:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	689a      	ldr	r2, [r3, #8]
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	4013      	ands	r3, r2
 8003e70:	68ba      	ldr	r2, [r7, #8]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	bf0c      	ite	eq
 8003e76:	2301      	moveq	r3, #1
 8003e78:	2300      	movne	r3, #0
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	79fb      	ldrb	r3, [r7, #7]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d19b      	bne.n	8003dbc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3720      	adds	r7, #32
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	2000100c 	.word	0x2000100c

08003e94 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af02      	add	r7, sp, #8
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ea8:	d111      	bne.n	8003ece <SPI_EndRxTransaction+0x3a>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eb2:	d004      	beq.n	8003ebe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ebc:	d107      	bne.n	8003ece <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ecc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ed6:	d12a      	bne.n	8003f2e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ee0:	d012      	beq.n	8003f08 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	9300      	str	r3, [sp, #0]
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	2180      	movs	r1, #128	; 0x80
 8003eec:	68f8      	ldr	r0, [r7, #12]
 8003eee:	f7ff ff49 	bl	8003d84 <SPI_WaitFlagStateUntilTimeout>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d02d      	beq.n	8003f54 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003efc:	f043 0220 	orr.w	r2, r3, #32
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e026      	b.n	8003f56 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	9300      	str	r3, [sp, #0]
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	2101      	movs	r1, #1
 8003f12:	68f8      	ldr	r0, [r7, #12]
 8003f14:	f7ff ff36 	bl	8003d84 <SPI_WaitFlagStateUntilTimeout>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d01a      	beq.n	8003f54 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f22:	f043 0220 	orr.w	r2, r3, #32
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e013      	b.n	8003f56 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	9300      	str	r3, [sp, #0]
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	2200      	movs	r2, #0
 8003f36:	2101      	movs	r1, #1
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f7ff ff23 	bl	8003d84 <SPI_WaitFlagStateUntilTimeout>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d007      	beq.n	8003f54 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f48:	f043 0220 	orr.w	r2, r3, #32
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e000      	b.n	8003f56 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3710      	adds	r7, #16
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
	...

08003f60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b088      	sub	sp, #32
 8003f64:	af02      	add	r7, sp, #8
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003f6c:	4b1b      	ldr	r3, [pc, #108]	; (8003fdc <SPI_EndRxTxTransaction+0x7c>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a1b      	ldr	r2, [pc, #108]	; (8003fe0 <SPI_EndRxTxTransaction+0x80>)
 8003f72:	fba2 2303 	umull	r2, r3, r2, r3
 8003f76:	0d5b      	lsrs	r3, r3, #21
 8003f78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f7c:	fb02 f303 	mul.w	r3, r2, r3
 8003f80:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f8a:	d112      	bne.n	8003fb2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	9300      	str	r3, [sp, #0]
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	2200      	movs	r2, #0
 8003f94:	2180      	movs	r1, #128	; 0x80
 8003f96:	68f8      	ldr	r0, [r7, #12]
 8003f98:	f7ff fef4 	bl	8003d84 <SPI_WaitFlagStateUntilTimeout>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d016      	beq.n	8003fd0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa6:	f043 0220 	orr.w	r2, r3, #32
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e00f      	b.n	8003fd2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d00a      	beq.n	8003fce <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc8:	2b80      	cmp	r3, #128	; 0x80
 8003fca:	d0f2      	beq.n	8003fb2 <SPI_EndRxTxTransaction+0x52>
 8003fcc:	e000      	b.n	8003fd0 <SPI_EndRxTxTransaction+0x70>
        break;
 8003fce:	bf00      	nop
  }

  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3718      	adds	r7, #24
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	2000100c 	.word	0x2000100c
 8003fe0:	165e9f81 	.word	0x165e9f81

08003fe4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e03f      	b.n	8004076 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d106      	bne.n	8004010 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f7fc fd14 	bl	8000a38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2224      	movs	r2, #36	; 0x24
 8004014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68da      	ldr	r2, [r3, #12]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004026:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 f829 	bl	8004080 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	691a      	ldr	r2, [r3, #16]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800403c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	695a      	ldr	r2, [r3, #20]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800404c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68da      	ldr	r2, [r3, #12]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800405c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2220      	movs	r2, #32
 8004068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2220      	movs	r2, #32
 8004070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3708      	adds	r7, #8
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
	...

08004080 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004080:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004084:	b0c0      	sub	sp, #256	; 0x100
 8004086:	af00      	add	r7, sp, #0
 8004088:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800408c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800409c:	68d9      	ldr	r1, [r3, #12]
 800409e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	ea40 0301 	orr.w	r3, r0, r1
 80040a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80040aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ae:	689a      	ldr	r2, [r3, #8]
 80040b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	431a      	orrs	r2, r3
 80040b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	431a      	orrs	r2, r3
 80040c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040c4:	69db      	ldr	r3, [r3, #28]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80040cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80040d8:	f021 010c 	bic.w	r1, r1, #12
 80040dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80040e6:	430b      	orrs	r3, r1
 80040e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80040f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040fa:	6999      	ldr	r1, [r3, #24]
 80040fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	ea40 0301 	orr.w	r3, r0, r1
 8004106:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	4b8f      	ldr	r3, [pc, #572]	; (800434c <UART_SetConfig+0x2cc>)
 8004110:	429a      	cmp	r2, r3
 8004112:	d005      	beq.n	8004120 <UART_SetConfig+0xa0>
 8004114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	4b8d      	ldr	r3, [pc, #564]	; (8004350 <UART_SetConfig+0x2d0>)
 800411c:	429a      	cmp	r2, r3
 800411e:	d104      	bne.n	800412a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004120:	f7fe fd5c 	bl	8002bdc <HAL_RCC_GetPCLK2Freq>
 8004124:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004128:	e003      	b.n	8004132 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800412a:	f7fe fd43 	bl	8002bb4 <HAL_RCC_GetPCLK1Freq>
 800412e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004136:	69db      	ldr	r3, [r3, #28]
 8004138:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800413c:	f040 810c 	bne.w	8004358 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004140:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004144:	2200      	movs	r2, #0
 8004146:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800414a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800414e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004152:	4622      	mov	r2, r4
 8004154:	462b      	mov	r3, r5
 8004156:	1891      	adds	r1, r2, r2
 8004158:	65b9      	str	r1, [r7, #88]	; 0x58
 800415a:	415b      	adcs	r3, r3
 800415c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800415e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004162:	4621      	mov	r1, r4
 8004164:	eb12 0801 	adds.w	r8, r2, r1
 8004168:	4629      	mov	r1, r5
 800416a:	eb43 0901 	adc.w	r9, r3, r1
 800416e:	f04f 0200 	mov.w	r2, #0
 8004172:	f04f 0300 	mov.w	r3, #0
 8004176:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800417a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800417e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004182:	4690      	mov	r8, r2
 8004184:	4699      	mov	r9, r3
 8004186:	4623      	mov	r3, r4
 8004188:	eb18 0303 	adds.w	r3, r8, r3
 800418c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004190:	462b      	mov	r3, r5
 8004192:	eb49 0303 	adc.w	r3, r9, r3
 8004196:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800419a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80041a6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80041aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80041ae:	460b      	mov	r3, r1
 80041b0:	18db      	adds	r3, r3, r3
 80041b2:	653b      	str	r3, [r7, #80]	; 0x50
 80041b4:	4613      	mov	r3, r2
 80041b6:	eb42 0303 	adc.w	r3, r2, r3
 80041ba:	657b      	str	r3, [r7, #84]	; 0x54
 80041bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80041c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80041c4:	f7fc f81e 	bl	8000204 <__aeabi_uldivmod>
 80041c8:	4602      	mov	r2, r0
 80041ca:	460b      	mov	r3, r1
 80041cc:	4b61      	ldr	r3, [pc, #388]	; (8004354 <UART_SetConfig+0x2d4>)
 80041ce:	fba3 2302 	umull	r2, r3, r3, r2
 80041d2:	095b      	lsrs	r3, r3, #5
 80041d4:	011c      	lsls	r4, r3, #4
 80041d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041da:	2200      	movs	r2, #0
 80041dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80041e0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80041e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80041e8:	4642      	mov	r2, r8
 80041ea:	464b      	mov	r3, r9
 80041ec:	1891      	adds	r1, r2, r2
 80041ee:	64b9      	str	r1, [r7, #72]	; 0x48
 80041f0:	415b      	adcs	r3, r3
 80041f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80041f8:	4641      	mov	r1, r8
 80041fa:	eb12 0a01 	adds.w	sl, r2, r1
 80041fe:	4649      	mov	r1, r9
 8004200:	eb43 0b01 	adc.w	fp, r3, r1
 8004204:	f04f 0200 	mov.w	r2, #0
 8004208:	f04f 0300 	mov.w	r3, #0
 800420c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004210:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004214:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004218:	4692      	mov	sl, r2
 800421a:	469b      	mov	fp, r3
 800421c:	4643      	mov	r3, r8
 800421e:	eb1a 0303 	adds.w	r3, sl, r3
 8004222:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004226:	464b      	mov	r3, r9
 8004228:	eb4b 0303 	adc.w	r3, fp, r3
 800422c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800423c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004240:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004244:	460b      	mov	r3, r1
 8004246:	18db      	adds	r3, r3, r3
 8004248:	643b      	str	r3, [r7, #64]	; 0x40
 800424a:	4613      	mov	r3, r2
 800424c:	eb42 0303 	adc.w	r3, r2, r3
 8004250:	647b      	str	r3, [r7, #68]	; 0x44
 8004252:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004256:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800425a:	f7fb ffd3 	bl	8000204 <__aeabi_uldivmod>
 800425e:	4602      	mov	r2, r0
 8004260:	460b      	mov	r3, r1
 8004262:	4611      	mov	r1, r2
 8004264:	4b3b      	ldr	r3, [pc, #236]	; (8004354 <UART_SetConfig+0x2d4>)
 8004266:	fba3 2301 	umull	r2, r3, r3, r1
 800426a:	095b      	lsrs	r3, r3, #5
 800426c:	2264      	movs	r2, #100	; 0x64
 800426e:	fb02 f303 	mul.w	r3, r2, r3
 8004272:	1acb      	subs	r3, r1, r3
 8004274:	00db      	lsls	r3, r3, #3
 8004276:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800427a:	4b36      	ldr	r3, [pc, #216]	; (8004354 <UART_SetConfig+0x2d4>)
 800427c:	fba3 2302 	umull	r2, r3, r3, r2
 8004280:	095b      	lsrs	r3, r3, #5
 8004282:	005b      	lsls	r3, r3, #1
 8004284:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004288:	441c      	add	r4, r3
 800428a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800428e:	2200      	movs	r2, #0
 8004290:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004294:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004298:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800429c:	4642      	mov	r2, r8
 800429e:	464b      	mov	r3, r9
 80042a0:	1891      	adds	r1, r2, r2
 80042a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80042a4:	415b      	adcs	r3, r3
 80042a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80042ac:	4641      	mov	r1, r8
 80042ae:	1851      	adds	r1, r2, r1
 80042b0:	6339      	str	r1, [r7, #48]	; 0x30
 80042b2:	4649      	mov	r1, r9
 80042b4:	414b      	adcs	r3, r1
 80042b6:	637b      	str	r3, [r7, #52]	; 0x34
 80042b8:	f04f 0200 	mov.w	r2, #0
 80042bc:	f04f 0300 	mov.w	r3, #0
 80042c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80042c4:	4659      	mov	r1, fp
 80042c6:	00cb      	lsls	r3, r1, #3
 80042c8:	4651      	mov	r1, sl
 80042ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042ce:	4651      	mov	r1, sl
 80042d0:	00ca      	lsls	r2, r1, #3
 80042d2:	4610      	mov	r0, r2
 80042d4:	4619      	mov	r1, r3
 80042d6:	4603      	mov	r3, r0
 80042d8:	4642      	mov	r2, r8
 80042da:	189b      	adds	r3, r3, r2
 80042dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80042e0:	464b      	mov	r3, r9
 80042e2:	460a      	mov	r2, r1
 80042e4:	eb42 0303 	adc.w	r3, r2, r3
 80042e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80042ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80042f8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80042fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004300:	460b      	mov	r3, r1
 8004302:	18db      	adds	r3, r3, r3
 8004304:	62bb      	str	r3, [r7, #40]	; 0x28
 8004306:	4613      	mov	r3, r2
 8004308:	eb42 0303 	adc.w	r3, r2, r3
 800430c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800430e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004312:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004316:	f7fb ff75 	bl	8000204 <__aeabi_uldivmod>
 800431a:	4602      	mov	r2, r0
 800431c:	460b      	mov	r3, r1
 800431e:	4b0d      	ldr	r3, [pc, #52]	; (8004354 <UART_SetConfig+0x2d4>)
 8004320:	fba3 1302 	umull	r1, r3, r3, r2
 8004324:	095b      	lsrs	r3, r3, #5
 8004326:	2164      	movs	r1, #100	; 0x64
 8004328:	fb01 f303 	mul.w	r3, r1, r3
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	00db      	lsls	r3, r3, #3
 8004330:	3332      	adds	r3, #50	; 0x32
 8004332:	4a08      	ldr	r2, [pc, #32]	; (8004354 <UART_SetConfig+0x2d4>)
 8004334:	fba2 2303 	umull	r2, r3, r2, r3
 8004338:	095b      	lsrs	r3, r3, #5
 800433a:	f003 0207 	and.w	r2, r3, #7
 800433e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4422      	add	r2, r4
 8004346:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004348:	e105      	b.n	8004556 <UART_SetConfig+0x4d6>
 800434a:	bf00      	nop
 800434c:	40011000 	.word	0x40011000
 8004350:	40011400 	.word	0x40011400
 8004354:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004358:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800435c:	2200      	movs	r2, #0
 800435e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004362:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004366:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800436a:	4642      	mov	r2, r8
 800436c:	464b      	mov	r3, r9
 800436e:	1891      	adds	r1, r2, r2
 8004370:	6239      	str	r1, [r7, #32]
 8004372:	415b      	adcs	r3, r3
 8004374:	627b      	str	r3, [r7, #36]	; 0x24
 8004376:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800437a:	4641      	mov	r1, r8
 800437c:	1854      	adds	r4, r2, r1
 800437e:	4649      	mov	r1, r9
 8004380:	eb43 0501 	adc.w	r5, r3, r1
 8004384:	f04f 0200 	mov.w	r2, #0
 8004388:	f04f 0300 	mov.w	r3, #0
 800438c:	00eb      	lsls	r3, r5, #3
 800438e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004392:	00e2      	lsls	r2, r4, #3
 8004394:	4614      	mov	r4, r2
 8004396:	461d      	mov	r5, r3
 8004398:	4643      	mov	r3, r8
 800439a:	18e3      	adds	r3, r4, r3
 800439c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80043a0:	464b      	mov	r3, r9
 80043a2:	eb45 0303 	adc.w	r3, r5, r3
 80043a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80043aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80043b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80043ba:	f04f 0200 	mov.w	r2, #0
 80043be:	f04f 0300 	mov.w	r3, #0
 80043c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80043c6:	4629      	mov	r1, r5
 80043c8:	008b      	lsls	r3, r1, #2
 80043ca:	4621      	mov	r1, r4
 80043cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043d0:	4621      	mov	r1, r4
 80043d2:	008a      	lsls	r2, r1, #2
 80043d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80043d8:	f7fb ff14 	bl	8000204 <__aeabi_uldivmod>
 80043dc:	4602      	mov	r2, r0
 80043de:	460b      	mov	r3, r1
 80043e0:	4b60      	ldr	r3, [pc, #384]	; (8004564 <UART_SetConfig+0x4e4>)
 80043e2:	fba3 2302 	umull	r2, r3, r3, r2
 80043e6:	095b      	lsrs	r3, r3, #5
 80043e8:	011c      	lsls	r4, r3, #4
 80043ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043ee:	2200      	movs	r2, #0
 80043f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80043f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80043f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80043fc:	4642      	mov	r2, r8
 80043fe:	464b      	mov	r3, r9
 8004400:	1891      	adds	r1, r2, r2
 8004402:	61b9      	str	r1, [r7, #24]
 8004404:	415b      	adcs	r3, r3
 8004406:	61fb      	str	r3, [r7, #28]
 8004408:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800440c:	4641      	mov	r1, r8
 800440e:	1851      	adds	r1, r2, r1
 8004410:	6139      	str	r1, [r7, #16]
 8004412:	4649      	mov	r1, r9
 8004414:	414b      	adcs	r3, r1
 8004416:	617b      	str	r3, [r7, #20]
 8004418:	f04f 0200 	mov.w	r2, #0
 800441c:	f04f 0300 	mov.w	r3, #0
 8004420:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004424:	4659      	mov	r1, fp
 8004426:	00cb      	lsls	r3, r1, #3
 8004428:	4651      	mov	r1, sl
 800442a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800442e:	4651      	mov	r1, sl
 8004430:	00ca      	lsls	r2, r1, #3
 8004432:	4610      	mov	r0, r2
 8004434:	4619      	mov	r1, r3
 8004436:	4603      	mov	r3, r0
 8004438:	4642      	mov	r2, r8
 800443a:	189b      	adds	r3, r3, r2
 800443c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004440:	464b      	mov	r3, r9
 8004442:	460a      	mov	r2, r1
 8004444:	eb42 0303 	adc.w	r3, r2, r3
 8004448:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800444c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	67bb      	str	r3, [r7, #120]	; 0x78
 8004456:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004458:	f04f 0200 	mov.w	r2, #0
 800445c:	f04f 0300 	mov.w	r3, #0
 8004460:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004464:	4649      	mov	r1, r9
 8004466:	008b      	lsls	r3, r1, #2
 8004468:	4641      	mov	r1, r8
 800446a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800446e:	4641      	mov	r1, r8
 8004470:	008a      	lsls	r2, r1, #2
 8004472:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004476:	f7fb fec5 	bl	8000204 <__aeabi_uldivmod>
 800447a:	4602      	mov	r2, r0
 800447c:	460b      	mov	r3, r1
 800447e:	4b39      	ldr	r3, [pc, #228]	; (8004564 <UART_SetConfig+0x4e4>)
 8004480:	fba3 1302 	umull	r1, r3, r3, r2
 8004484:	095b      	lsrs	r3, r3, #5
 8004486:	2164      	movs	r1, #100	; 0x64
 8004488:	fb01 f303 	mul.w	r3, r1, r3
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	011b      	lsls	r3, r3, #4
 8004490:	3332      	adds	r3, #50	; 0x32
 8004492:	4a34      	ldr	r2, [pc, #208]	; (8004564 <UART_SetConfig+0x4e4>)
 8004494:	fba2 2303 	umull	r2, r3, r2, r3
 8004498:	095b      	lsrs	r3, r3, #5
 800449a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800449e:	441c      	add	r4, r3
 80044a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044a4:	2200      	movs	r2, #0
 80044a6:	673b      	str	r3, [r7, #112]	; 0x70
 80044a8:	677a      	str	r2, [r7, #116]	; 0x74
 80044aa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80044ae:	4642      	mov	r2, r8
 80044b0:	464b      	mov	r3, r9
 80044b2:	1891      	adds	r1, r2, r2
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	415b      	adcs	r3, r3
 80044b8:	60fb      	str	r3, [r7, #12]
 80044ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044be:	4641      	mov	r1, r8
 80044c0:	1851      	adds	r1, r2, r1
 80044c2:	6039      	str	r1, [r7, #0]
 80044c4:	4649      	mov	r1, r9
 80044c6:	414b      	adcs	r3, r1
 80044c8:	607b      	str	r3, [r7, #4]
 80044ca:	f04f 0200 	mov.w	r2, #0
 80044ce:	f04f 0300 	mov.w	r3, #0
 80044d2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80044d6:	4659      	mov	r1, fp
 80044d8:	00cb      	lsls	r3, r1, #3
 80044da:	4651      	mov	r1, sl
 80044dc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044e0:	4651      	mov	r1, sl
 80044e2:	00ca      	lsls	r2, r1, #3
 80044e4:	4610      	mov	r0, r2
 80044e6:	4619      	mov	r1, r3
 80044e8:	4603      	mov	r3, r0
 80044ea:	4642      	mov	r2, r8
 80044ec:	189b      	adds	r3, r3, r2
 80044ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80044f0:	464b      	mov	r3, r9
 80044f2:	460a      	mov	r2, r1
 80044f4:	eb42 0303 	adc.w	r3, r2, r3
 80044f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80044fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	663b      	str	r3, [r7, #96]	; 0x60
 8004504:	667a      	str	r2, [r7, #100]	; 0x64
 8004506:	f04f 0200 	mov.w	r2, #0
 800450a:	f04f 0300 	mov.w	r3, #0
 800450e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004512:	4649      	mov	r1, r9
 8004514:	008b      	lsls	r3, r1, #2
 8004516:	4641      	mov	r1, r8
 8004518:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800451c:	4641      	mov	r1, r8
 800451e:	008a      	lsls	r2, r1, #2
 8004520:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004524:	f7fb fe6e 	bl	8000204 <__aeabi_uldivmod>
 8004528:	4602      	mov	r2, r0
 800452a:	460b      	mov	r3, r1
 800452c:	4b0d      	ldr	r3, [pc, #52]	; (8004564 <UART_SetConfig+0x4e4>)
 800452e:	fba3 1302 	umull	r1, r3, r3, r2
 8004532:	095b      	lsrs	r3, r3, #5
 8004534:	2164      	movs	r1, #100	; 0x64
 8004536:	fb01 f303 	mul.w	r3, r1, r3
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	011b      	lsls	r3, r3, #4
 800453e:	3332      	adds	r3, #50	; 0x32
 8004540:	4a08      	ldr	r2, [pc, #32]	; (8004564 <UART_SetConfig+0x4e4>)
 8004542:	fba2 2303 	umull	r2, r3, r2, r3
 8004546:	095b      	lsrs	r3, r3, #5
 8004548:	f003 020f 	and.w	r2, r3, #15
 800454c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4422      	add	r2, r4
 8004554:	609a      	str	r2, [r3, #8]
}
 8004556:	bf00      	nop
 8004558:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800455c:	46bd      	mov	sp, r7
 800455e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004562:	bf00      	nop
 8004564:	51eb851f 	.word	0x51eb851f

08004568 <__libc_init_array>:
 8004568:	b570      	push	{r4, r5, r6, lr}
 800456a:	4d0d      	ldr	r5, [pc, #52]	; (80045a0 <__libc_init_array+0x38>)
 800456c:	4c0d      	ldr	r4, [pc, #52]	; (80045a4 <__libc_init_array+0x3c>)
 800456e:	1b64      	subs	r4, r4, r5
 8004570:	10a4      	asrs	r4, r4, #2
 8004572:	2600      	movs	r6, #0
 8004574:	42a6      	cmp	r6, r4
 8004576:	d109      	bne.n	800458c <__libc_init_array+0x24>
 8004578:	4d0b      	ldr	r5, [pc, #44]	; (80045a8 <__libc_init_array+0x40>)
 800457a:	4c0c      	ldr	r4, [pc, #48]	; (80045ac <__libc_init_array+0x44>)
 800457c:	f000 f820 	bl	80045c0 <_init>
 8004580:	1b64      	subs	r4, r4, r5
 8004582:	10a4      	asrs	r4, r4, #2
 8004584:	2600      	movs	r6, #0
 8004586:	42a6      	cmp	r6, r4
 8004588:	d105      	bne.n	8004596 <__libc_init_array+0x2e>
 800458a:	bd70      	pop	{r4, r5, r6, pc}
 800458c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004590:	4798      	blx	r3
 8004592:	3601      	adds	r6, #1
 8004594:	e7ee      	b.n	8004574 <__libc_init_array+0xc>
 8004596:	f855 3b04 	ldr.w	r3, [r5], #4
 800459a:	4798      	blx	r3
 800459c:	3601      	adds	r6, #1
 800459e:	e7f2      	b.n	8004586 <__libc_init_array+0x1e>
 80045a0:	080045f8 	.word	0x080045f8
 80045a4:	080045f8 	.word	0x080045f8
 80045a8:	080045f8 	.word	0x080045f8
 80045ac:	080045fc 	.word	0x080045fc

080045b0 <memset>:
 80045b0:	4402      	add	r2, r0
 80045b2:	4603      	mov	r3, r0
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d100      	bne.n	80045ba <memset+0xa>
 80045b8:	4770      	bx	lr
 80045ba:	f803 1b01 	strb.w	r1, [r3], #1
 80045be:	e7f9      	b.n	80045b4 <memset+0x4>

080045c0 <_init>:
 80045c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045c2:	bf00      	nop
 80045c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045c6:	bc08      	pop	{r3}
 80045c8:	469e      	mov	lr, r3
 80045ca:	4770      	bx	lr

080045cc <_fini>:
 80045cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ce:	bf00      	nop
 80045d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045d2:	bc08      	pop	{r3}
 80045d4:	469e      	mov	lr, r3
 80045d6:	4770      	bx	lr
