
F446ZET6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006630  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c4  080067f4  080067f4  000167f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006db8  08006db8  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08006db8  08006db8  00016db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006dc0  08006dc0  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006dc0  08006dc0  00016dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006dc4  08006dc4  00016dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08006dc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002778  20000024  08006dec  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000279c  08006dec  0002279c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eebb  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000248e  00000000  00000000  0002ef0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  000313a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ba0  00000000  00000000  00032048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022e0f  00000000  00000000  00032be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012ae1  00000000  00000000  000559f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb14b  00000000  00000000  000684d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00133623  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032d8  00000000  00000000  00133674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000024 	.word	0x20000024
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080067dc 	.word	0x080067dc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000028 	.word	0x20000028
 8000200:	080067dc 	.word	0x080067dc

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b974 	b.w	8000514 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	468e      	mov	lr, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	d14d      	bne.n	80002ee <__udivmoddi4+0xaa>
 8000252:	428a      	cmp	r2, r1
 8000254:	4694      	mov	ip, r2
 8000256:	d969      	bls.n	800032c <__udivmoddi4+0xe8>
 8000258:	fab2 f282 	clz	r2, r2
 800025c:	b152      	cbz	r2, 8000274 <__udivmoddi4+0x30>
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	f1c2 0120 	rsb	r1, r2, #32
 8000266:	fa20 f101 	lsr.w	r1, r0, r1
 800026a:	fa0c fc02 	lsl.w	ip, ip, r2
 800026e:	ea41 0e03 	orr.w	lr, r1, r3
 8000272:	4094      	lsls	r4, r2
 8000274:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000278:	0c21      	lsrs	r1, r4, #16
 800027a:	fbbe f6f8 	udiv	r6, lr, r8
 800027e:	fa1f f78c 	uxth.w	r7, ip
 8000282:	fb08 e316 	mls	r3, r8, r6, lr
 8000286:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028a:	fb06 f107 	mul.w	r1, r6, r7
 800028e:	4299      	cmp	r1, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x64>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295
 800029a:	f080 811f 	bcs.w	80004dc <__udivmoddi4+0x298>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 811c 	bls.w	80004dc <__udivmoddi4+0x298>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	4463      	add	r3, ip
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 f707 	mul.w	r7, r0, r7
 80002bc:	42a7      	cmp	r7, r4
 80002be:	d90a      	bls.n	80002d6 <__udivmoddi4+0x92>
 80002c0:	eb1c 0404 	adds.w	r4, ip, r4
 80002c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c8:	f080 810a 	bcs.w	80004e0 <__udivmoddi4+0x29c>
 80002cc:	42a7      	cmp	r7, r4
 80002ce:	f240 8107 	bls.w	80004e0 <__udivmoddi4+0x29c>
 80002d2:	4464      	add	r4, ip
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002da:	1be4      	subs	r4, r4, r7
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa4>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xc2>
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	f000 80ef 	beq.w	80004d6 <__udivmoddi4+0x292>
 80002f8:	2600      	movs	r6, #0
 80002fa:	e9c5 0100 	strd	r0, r1, [r5]
 80002fe:	4630      	mov	r0, r6
 8000300:	4631      	mov	r1, r6
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f683 	clz	r6, r3
 800030a:	2e00      	cmp	r6, #0
 800030c:	d14a      	bne.n	80003a4 <__udivmoddi4+0x160>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd4>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80f9 	bhi.w	800050a <__udivmoddi4+0x2c6>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	469e      	mov	lr, r3
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa4>
 8000326:	e9c5 4e00 	strd	r4, lr, [r5]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa4>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xec>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 8092 	bne.w	800045e <__udivmoddi4+0x21a>
 800033a:	eba1 010c 	sub.w	r1, r1, ip
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f fe8c 	uxth.w	lr, ip
 8000346:	2601      	movs	r6, #1
 8000348:	0c20      	lsrs	r0, r4, #16
 800034a:	fbb1 f3f7 	udiv	r3, r1, r7
 800034e:	fb07 1113 	mls	r1, r7, r3, r1
 8000352:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000356:	fb0e f003 	mul.w	r0, lr, r3
 800035a:	4288      	cmp	r0, r1
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0x12c>
 800035e:	eb1c 0101 	adds.w	r1, ip, r1
 8000362:	f103 38ff 	add.w	r8, r3, #4294967295
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x12a>
 8000368:	4288      	cmp	r0, r1
 800036a:	f200 80cb 	bhi.w	8000504 <__udivmoddi4+0x2c0>
 800036e:	4643      	mov	r3, r8
 8000370:	1a09      	subs	r1, r1, r0
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb1 f0f7 	udiv	r0, r1, r7
 8000378:	fb07 1110 	mls	r1, r7, r0, r1
 800037c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000380:	fb0e fe00 	mul.w	lr, lr, r0
 8000384:	45a6      	cmp	lr, r4
 8000386:	d908      	bls.n	800039a <__udivmoddi4+0x156>
 8000388:	eb1c 0404 	adds.w	r4, ip, r4
 800038c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000390:	d202      	bcs.n	8000398 <__udivmoddi4+0x154>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f200 80bb 	bhi.w	800050e <__udivmoddi4+0x2ca>
 8000398:	4608      	mov	r0, r1
 800039a:	eba4 040e 	sub.w	r4, r4, lr
 800039e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a2:	e79c      	b.n	80002de <__udivmoddi4+0x9a>
 80003a4:	f1c6 0720 	rsb	r7, r6, #32
 80003a8:	40b3      	lsls	r3, r6
 80003aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b2:	fa20 f407 	lsr.w	r4, r0, r7
 80003b6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ba:	431c      	orrs	r4, r3
 80003bc:	40f9      	lsrs	r1, r7
 80003be:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c2:	fa00 f306 	lsl.w	r3, r0, r6
 80003c6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ca:	0c20      	lsrs	r0, r4, #16
 80003cc:	fa1f fe8c 	uxth.w	lr, ip
 80003d0:	fb09 1118 	mls	r1, r9, r8, r1
 80003d4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d8:	fb08 f00e 	mul.w	r0, r8, lr
 80003dc:	4288      	cmp	r0, r1
 80003de:	fa02 f206 	lsl.w	r2, r2, r6
 80003e2:	d90b      	bls.n	80003fc <__udivmoddi4+0x1b8>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ec:	f080 8088 	bcs.w	8000500 <__udivmoddi4+0x2bc>
 80003f0:	4288      	cmp	r0, r1
 80003f2:	f240 8085 	bls.w	8000500 <__udivmoddi4+0x2bc>
 80003f6:	f1a8 0802 	sub.w	r8, r8, #2
 80003fa:	4461      	add	r1, ip
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f9 	udiv	r0, r1, r9
 8000404:	fb09 1110 	mls	r1, r9, r0, r1
 8000408:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800040c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000410:	458e      	cmp	lr, r1
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x1e2>
 8000414:	eb1c 0101 	adds.w	r1, ip, r1
 8000418:	f100 34ff 	add.w	r4, r0, #4294967295
 800041c:	d26c      	bcs.n	80004f8 <__udivmoddi4+0x2b4>
 800041e:	458e      	cmp	lr, r1
 8000420:	d96a      	bls.n	80004f8 <__udivmoddi4+0x2b4>
 8000422:	3802      	subs	r0, #2
 8000424:	4461      	add	r1, ip
 8000426:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042a:	fba0 9402 	umull	r9, r4, r0, r2
 800042e:	eba1 010e 	sub.w	r1, r1, lr
 8000432:	42a1      	cmp	r1, r4
 8000434:	46c8      	mov	r8, r9
 8000436:	46a6      	mov	lr, r4
 8000438:	d356      	bcc.n	80004e8 <__udivmoddi4+0x2a4>
 800043a:	d053      	beq.n	80004e4 <__udivmoddi4+0x2a0>
 800043c:	b15d      	cbz	r5, 8000456 <__udivmoddi4+0x212>
 800043e:	ebb3 0208 	subs.w	r2, r3, r8
 8000442:	eb61 010e 	sbc.w	r1, r1, lr
 8000446:	fa01 f707 	lsl.w	r7, r1, r7
 800044a:	fa22 f306 	lsr.w	r3, r2, r6
 800044e:	40f1      	lsrs	r1, r6
 8000450:	431f      	orrs	r7, r3
 8000452:	e9c5 7100 	strd	r7, r1, [r5]
 8000456:	2600      	movs	r6, #0
 8000458:	4631      	mov	r1, r6
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1c2 0320 	rsb	r3, r2, #32
 8000462:	40d8      	lsrs	r0, r3
 8000464:	fa0c fc02 	lsl.w	ip, ip, r2
 8000468:	fa21 f303 	lsr.w	r3, r1, r3
 800046c:	4091      	lsls	r1, r2
 800046e:	4301      	orrs	r1, r0
 8000470:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000474:	fa1f fe8c 	uxth.w	lr, ip
 8000478:	fbb3 f0f7 	udiv	r0, r3, r7
 800047c:	fb07 3610 	mls	r6, r7, r0, r3
 8000480:	0c0b      	lsrs	r3, r1, #16
 8000482:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000486:	fb00 f60e 	mul.w	r6, r0, lr
 800048a:	429e      	cmp	r6, r3
 800048c:	fa04 f402 	lsl.w	r4, r4, r2
 8000490:	d908      	bls.n	80004a4 <__udivmoddi4+0x260>
 8000492:	eb1c 0303 	adds.w	r3, ip, r3
 8000496:	f100 38ff 	add.w	r8, r0, #4294967295
 800049a:	d22f      	bcs.n	80004fc <__udivmoddi4+0x2b8>
 800049c:	429e      	cmp	r6, r3
 800049e:	d92d      	bls.n	80004fc <__udivmoddi4+0x2b8>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4463      	add	r3, ip
 80004a4:	1b9b      	subs	r3, r3, r6
 80004a6:	b289      	uxth	r1, r1
 80004a8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004ac:	fb07 3316 	mls	r3, r7, r6, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb06 f30e 	mul.w	r3, r6, lr
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x28a>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c4:	d216      	bcs.n	80004f4 <__udivmoddi4+0x2b0>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d914      	bls.n	80004f4 <__udivmoddi4+0x2b0>
 80004ca:	3e02      	subs	r6, #2
 80004cc:	4461      	add	r1, ip
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d4:	e738      	b.n	8000348 <__udivmoddi4+0x104>
 80004d6:	462e      	mov	r6, r5
 80004d8:	4628      	mov	r0, r5
 80004da:	e705      	b.n	80002e8 <__udivmoddi4+0xa4>
 80004dc:	4606      	mov	r6, r0
 80004de:	e6e3      	b.n	80002a8 <__udivmoddi4+0x64>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6f8      	b.n	80002d6 <__udivmoddi4+0x92>
 80004e4:	454b      	cmp	r3, r9
 80004e6:	d2a9      	bcs.n	800043c <__udivmoddi4+0x1f8>
 80004e8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ec:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f0:	3801      	subs	r0, #1
 80004f2:	e7a3      	b.n	800043c <__udivmoddi4+0x1f8>
 80004f4:	4646      	mov	r6, r8
 80004f6:	e7ea      	b.n	80004ce <__udivmoddi4+0x28a>
 80004f8:	4620      	mov	r0, r4
 80004fa:	e794      	b.n	8000426 <__udivmoddi4+0x1e2>
 80004fc:	4640      	mov	r0, r8
 80004fe:	e7d1      	b.n	80004a4 <__udivmoddi4+0x260>
 8000500:	46d0      	mov	r8, sl
 8000502:	e77b      	b.n	80003fc <__udivmoddi4+0x1b8>
 8000504:	3b02      	subs	r3, #2
 8000506:	4461      	add	r1, ip
 8000508:	e732      	b.n	8000370 <__udivmoddi4+0x12c>
 800050a:	4630      	mov	r0, r6
 800050c:	e709      	b.n	8000322 <__udivmoddi4+0xde>
 800050e:	4464      	add	r4, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e742      	b.n	800039a <__udivmoddi4+0x156>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800051c:	2200      	movs	r2, #0
 800051e:	2110      	movs	r1, #16
 8000520:	4803      	ldr	r0, [pc, #12]	; (8000530 <SELECT+0x18>)
 8000522:	f001 fb21 	bl	8001b68 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000526:	2001      	movs	r0, #1
 8000528:	f001 f880 	bl	800162c <HAL_Delay>
}
 800052c:	bf00      	nop
 800052e:	bd80      	pop	{r7, pc}
 8000530:	40020000 	.word	0x40020000

08000534 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000538:	2201      	movs	r2, #1
 800053a:	2110      	movs	r1, #16
 800053c:	4803      	ldr	r0, [pc, #12]	; (800054c <DESELECT+0x18>)
 800053e:	f001 fb13 	bl	8001b68 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000542:	2001      	movs	r0, #1
 8000544:	f001 f872 	bl	800162c <HAL_Delay>
}
 8000548:	bf00      	nop
 800054a:	bd80      	pop	{r7, pc}
 800054c:	40020000 	.word	0x40020000

08000550 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
 8000556:	4603      	mov	r3, r0
 8000558:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800055a:	bf00      	nop
 800055c:	4b08      	ldr	r3, [pc, #32]	; (8000580 <SPI_TxByte+0x30>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	689b      	ldr	r3, [r3, #8]
 8000562:	f003 0302 	and.w	r3, r3, #2
 8000566:	2b02      	cmp	r3, #2
 8000568:	d1f8      	bne.n	800055c <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800056a:	1df9      	adds	r1, r7, #7
 800056c:	2364      	movs	r3, #100	; 0x64
 800056e:	2201      	movs	r2, #1
 8000570:	4803      	ldr	r0, [pc, #12]	; (8000580 <SPI_TxByte+0x30>)
 8000572:	f002 f940 	bl	80027f6 <HAL_SPI_Transmit>
}
 8000576:	bf00      	nop
 8000578:	3708      	adds	r7, #8
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	20000054 	.word	0x20000054

08000584 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	460b      	mov	r3, r1
 800058e:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000590:	bf00      	nop
 8000592:	4b08      	ldr	r3, [pc, #32]	; (80005b4 <SPI_TxBuffer+0x30>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	689b      	ldr	r3, [r3, #8]
 8000598:	f003 0302 	and.w	r3, r3, #2
 800059c:	2b02      	cmp	r3, #2
 800059e:	d1f8      	bne.n	8000592 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80005a0:	887a      	ldrh	r2, [r7, #2]
 80005a2:	2364      	movs	r3, #100	; 0x64
 80005a4:	6879      	ldr	r1, [r7, #4]
 80005a6:	4803      	ldr	r0, [pc, #12]	; (80005b4 <SPI_TxBuffer+0x30>)
 80005a8:	f002 f925 	bl	80027f6 <HAL_SPI_Transmit>
}
 80005ac:	bf00      	nop
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20000054 	.word	0x20000054

080005b8 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80005be:	23ff      	movs	r3, #255	; 0xff
 80005c0:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005c2:	bf00      	nop
 80005c4:	4b09      	ldr	r3, [pc, #36]	; (80005ec <SPI_RxByte+0x34>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	689b      	ldr	r3, [r3, #8]
 80005ca:	f003 0302 	and.w	r3, r3, #2
 80005ce:	2b02      	cmp	r3, #2
 80005d0:	d1f8      	bne.n	80005c4 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80005d2:	1dba      	adds	r2, r7, #6
 80005d4:	1df9      	adds	r1, r7, #7
 80005d6:	2364      	movs	r3, #100	; 0x64
 80005d8:	9300      	str	r3, [sp, #0]
 80005da:	2301      	movs	r3, #1
 80005dc:	4803      	ldr	r0, [pc, #12]	; (80005ec <SPI_RxByte+0x34>)
 80005de:	f002 fa46 	bl	8002a6e <HAL_SPI_TransmitReceive>

	return data;
 80005e2:	79bb      	ldrb	r3, [r7, #6]
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000054 	.word	0x20000054

080005f0 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80005f8:	f7ff ffde 	bl	80005b8 <SPI_RxByte>
 80005fc:	4603      	mov	r3, r0
 80005fe:	461a      	mov	r2, r3
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	701a      	strb	r2, [r3, #0]
}
 8000604:	bf00      	nop
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000612:	4b0a      	ldr	r3, [pc, #40]	; (800063c <SD_ReadyWait+0x30>)
 8000614:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000618:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800061a:	f7ff ffcd 	bl	80005b8 <SPI_RxByte>
 800061e:	4603      	mov	r3, r0
 8000620:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	2bff      	cmp	r3, #255	; 0xff
 8000626:	d003      	beq.n	8000630 <SD_ReadyWait+0x24>
 8000628:	4b04      	ldr	r3, [pc, #16]	; (800063c <SD_ReadyWait+0x30>)
 800062a:	881b      	ldrh	r3, [r3, #0]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d1f4      	bne.n	800061a <SD_ReadyWait+0xe>

	return res;
 8000630:	79fb      	ldrb	r3, [r7, #7]
}
 8000632:	4618      	mov	r0, r3
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	20000042 	.word	0x20000042

08000640 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000646:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800064a:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 800064c:	f7ff ff72 	bl	8000534 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000650:	2300      	movs	r3, #0
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	e005      	b.n	8000662 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000656:	20ff      	movs	r0, #255	; 0xff
 8000658:	f7ff ff7a 	bl	8000550 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	3301      	adds	r3, #1
 8000660:	60bb      	str	r3, [r7, #8]
 8000662:	68bb      	ldr	r3, [r7, #8]
 8000664:	2b09      	cmp	r3, #9
 8000666:	ddf6      	ble.n	8000656 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000668:	f7ff ff56 	bl	8000518 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 800066c:	2340      	movs	r3, #64	; 0x40
 800066e:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000670:	2300      	movs	r3, #0
 8000672:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000674:	2300      	movs	r3, #0
 8000676:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000678:	2300      	movs	r3, #0
 800067a:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 800067c:	2300      	movs	r3, #0
 800067e:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000680:	2395      	movs	r3, #149	; 0x95
 8000682:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000684:	463b      	mov	r3, r7
 8000686:	2106      	movs	r1, #6
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff ff7b 	bl	8000584 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800068e:	e002      	b.n	8000696 <SD_PowerOn+0x56>
	{
		cnt--;
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	3b01      	subs	r3, #1
 8000694:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000696:	f7ff ff8f 	bl	80005b8 <SPI_RxByte>
 800069a:	4603      	mov	r3, r0
 800069c:	2b01      	cmp	r3, #1
 800069e:	d002      	beq.n	80006a6 <SD_PowerOn+0x66>
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d1f4      	bne.n	8000690 <SD_PowerOn+0x50>
	}

	DESELECT();
 80006a6:	f7ff ff45 	bl	8000534 <DESELECT>
	SPI_TxByte(0XFF);
 80006aa:	20ff      	movs	r0, #255	; 0xff
 80006ac:	f7ff ff50 	bl	8000550 <SPI_TxByte>

	PowerFlag = 1;
 80006b0:	4b03      	ldr	r3, [pc, #12]	; (80006c0 <SD_PowerOn+0x80>)
 80006b2:	2201      	movs	r2, #1
 80006b4:	701a      	strb	r2, [r3, #0]
}
 80006b6:	bf00      	nop
 80006b8:	3710      	adds	r7, #16
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000045 	.word	0x20000045

080006c4 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80006c8:	4b03      	ldr	r3, [pc, #12]	; (80006d8 <SD_PowerOff+0x14>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	701a      	strb	r2, [r3, #0]
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	20000045 	.word	0x20000045

080006dc <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
	return PowerFlag;
 80006e0:	4b03      	ldr	r3, [pc, #12]	; (80006f0 <SD_CheckPower+0x14>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	20000045 	.word	0x20000045

080006f4 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
 80006fc:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80006fe:	4b13      	ldr	r3, [pc, #76]	; (800074c <SD_RxDataBlock+0x58>)
 8000700:	22c8      	movs	r2, #200	; 0xc8
 8000702:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000704:	f7ff ff58 	bl	80005b8 <SPI_RxByte>
 8000708:	4603      	mov	r3, r0
 800070a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 800070c:	7bfb      	ldrb	r3, [r7, #15]
 800070e:	2bff      	cmp	r3, #255	; 0xff
 8000710:	d103      	bne.n	800071a <SD_RxDataBlock+0x26>
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <SD_RxDataBlock+0x58>)
 8000714:	881b      	ldrh	r3, [r3, #0]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d1f4      	bne.n	8000704 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800071a:	7bfb      	ldrb	r3, [r7, #15]
 800071c:	2bfe      	cmp	r3, #254	; 0xfe
 800071e:	d001      	beq.n	8000724 <SD_RxDataBlock+0x30>
 8000720:	2300      	movs	r3, #0
 8000722:	e00f      	b.n	8000744 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	1c5a      	adds	r2, r3, #1
 8000728:	607a      	str	r2, [r7, #4]
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ff60 	bl	80005f0 <SPI_RxBytePtr>
	} while(len--);
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	1e5a      	subs	r2, r3, #1
 8000734:	603a      	str	r2, [r7, #0]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d1f4      	bne.n	8000724 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800073a:	f7ff ff3d 	bl	80005b8 <SPI_RxByte>
	SPI_RxByte();
 800073e:	f7ff ff3b 	bl	80005b8 <SPI_RxByte>

	return TRUE;
 8000742:	2301      	movs	r3, #1
}
 8000744:	4618      	mov	r0, r3
 8000746:	3710      	adds	r7, #16
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000040 	.word	0x20000040

08000750 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	460b      	mov	r3, r1
 800075a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 800075c:	2300      	movs	r3, #0
 800075e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000760:	f7ff ff54 	bl	800060c <SD_ReadyWait>
 8000764:	4603      	mov	r3, r0
 8000766:	2bff      	cmp	r3, #255	; 0xff
 8000768:	d001      	beq.n	800076e <SD_TxDataBlock+0x1e>
 800076a:	2300      	movs	r3, #0
 800076c:	e02f      	b.n	80007ce <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800076e:	78fb      	ldrb	r3, [r7, #3]
 8000770:	4618      	mov	r0, r3
 8000772:	f7ff feed 	bl	8000550 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000776:	78fb      	ldrb	r3, [r7, #3]
 8000778:	2bfd      	cmp	r3, #253	; 0xfd
 800077a:	d020      	beq.n	80007be <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 800077c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000780:	6878      	ldr	r0, [r7, #4]
 8000782:	f7ff feff 	bl	8000584 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000786:	f7ff ff17 	bl	80005b8 <SPI_RxByte>
		SPI_RxByte();
 800078a:	f7ff ff15 	bl	80005b8 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800078e:	e00b      	b.n	80007a8 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000790:	f7ff ff12 	bl	80005b8 <SPI_RxByte>
 8000794:	4603      	mov	r3, r0
 8000796:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000798:	7bfb      	ldrb	r3, [r7, #15]
 800079a:	f003 031f 	and.w	r3, r3, #31
 800079e:	2b05      	cmp	r3, #5
 80007a0:	d006      	beq.n	80007b0 <SD_TxDataBlock+0x60>
			i++;
 80007a2:	7bbb      	ldrb	r3, [r7, #14]
 80007a4:	3301      	adds	r3, #1
 80007a6:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80007a8:	7bbb      	ldrb	r3, [r7, #14]
 80007aa:	2b40      	cmp	r3, #64	; 0x40
 80007ac:	d9f0      	bls.n	8000790 <SD_TxDataBlock+0x40>
 80007ae:	e000      	b.n	80007b2 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80007b0:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80007b2:	bf00      	nop
 80007b4:	f7ff ff00 	bl	80005b8 <SPI_RxByte>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d0fa      	beq.n	80007b4 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80007be:	7bfb      	ldrb	r3, [r7, #15]
 80007c0:	f003 031f 	and.w	r3, r3, #31
 80007c4:	2b05      	cmp	r3, #5
 80007c6:	d101      	bne.n	80007cc <SD_TxDataBlock+0x7c>
 80007c8:	2301      	movs	r3, #1
 80007ca:	e000      	b.n	80007ce <SD_TxDataBlock+0x7e>

	return FALSE;
 80007cc:	2300      	movs	r3, #0
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3710      	adds	r7, #16
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b084      	sub	sp, #16
 80007da:	af00      	add	r7, sp, #0
 80007dc:	4603      	mov	r3, r0
 80007de:	6039      	str	r1, [r7, #0]
 80007e0:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80007e2:	f7ff ff13 	bl	800060c <SD_ReadyWait>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2bff      	cmp	r3, #255	; 0xff
 80007ea:	d001      	beq.n	80007f0 <SD_SendCmd+0x1a>
 80007ec:	23ff      	movs	r3, #255	; 0xff
 80007ee:	e042      	b.n	8000876 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff feac 	bl	8000550 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	0e1b      	lsrs	r3, r3, #24
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff fea6 	bl	8000550 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	0c1b      	lsrs	r3, r3, #16
 8000808:	b2db      	uxtb	r3, r3
 800080a:	4618      	mov	r0, r3
 800080c:	f7ff fea0 	bl	8000550 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	0a1b      	lsrs	r3, r3, #8
 8000814:	b2db      	uxtb	r3, r3
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff fe9a 	bl	8000550 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	b2db      	uxtb	r3, r3
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff fe95 	bl	8000550 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	2b40      	cmp	r3, #64	; 0x40
 800082a:	d102      	bne.n	8000832 <SD_SendCmd+0x5c>
 800082c:	2395      	movs	r3, #149	; 0x95
 800082e:	73fb      	strb	r3, [r7, #15]
 8000830:	e007      	b.n	8000842 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	2b48      	cmp	r3, #72	; 0x48
 8000836:	d102      	bne.n	800083e <SD_SendCmd+0x68>
 8000838:	2387      	movs	r3, #135	; 0x87
 800083a:	73fb      	strb	r3, [r7, #15]
 800083c:	e001      	b.n	8000842 <SD_SendCmd+0x6c>
	else crc = 1;
 800083e:	2301      	movs	r3, #1
 8000840:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000842:	7bfb      	ldrb	r3, [r7, #15]
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff fe83 	bl	8000550 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	2b4c      	cmp	r3, #76	; 0x4c
 800084e:	d101      	bne.n	8000854 <SD_SendCmd+0x7e>
 8000850:	f7ff feb2 	bl	80005b8 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000854:	230a      	movs	r3, #10
 8000856:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000858:	f7ff feae 	bl	80005b8 <SPI_RxByte>
 800085c:	4603      	mov	r3, r0
 800085e:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000860:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000864:	2b00      	cmp	r3, #0
 8000866:	da05      	bge.n	8000874 <SD_SendCmd+0x9e>
 8000868:	7bbb      	ldrb	r3, [r7, #14]
 800086a:	3b01      	subs	r3, #1
 800086c:	73bb      	strb	r3, [r7, #14]
 800086e:	7bbb      	ldrb	r3, [r7, #14]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d1f1      	bne.n	8000858 <SD_SendCmd+0x82>

	return res;
 8000874:	7b7b      	ldrb	r3, [r7, #13]
}
 8000876:	4618      	mov	r0, r3
 8000878:	3710      	adds	r7, #16
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
	...

08000880 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000880:	b590      	push	{r4, r7, lr}
 8000882:	b085      	sub	sp, #20
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <SD_disk_initialize+0x14>
 8000890:	2301      	movs	r3, #1
 8000892:	e0d1      	b.n	8000a38 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000894:	4b6a      	ldr	r3, [pc, #424]	; (8000a40 <SD_disk_initialize+0x1c0>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	b2db      	uxtb	r3, r3
 800089a:	f003 0302 	and.w	r3, r3, #2
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d003      	beq.n	80008aa <SD_disk_initialize+0x2a>
 80008a2:	4b67      	ldr	r3, [pc, #412]	; (8000a40 <SD_disk_initialize+0x1c0>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	e0c6      	b.n	8000a38 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 80008aa:	f7ff fec9 	bl	8000640 <SD_PowerOn>

	/* slave select */
	SELECT();
 80008ae:	f7ff fe33 	bl	8000518 <SELECT>

	/* check disk type */
	type = 0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80008b6:	2100      	movs	r1, #0
 80008b8:	2040      	movs	r0, #64	; 0x40
 80008ba:	f7ff ff8c 	bl	80007d6 <SD_SendCmd>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	f040 80a1 	bne.w	8000a08 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80008c6:	4b5f      	ldr	r3, [pc, #380]	; (8000a44 <SD_disk_initialize+0x1c4>)
 80008c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008cc:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80008ce:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80008d2:	2048      	movs	r0, #72	; 0x48
 80008d4:	f7ff ff7f 	bl	80007d6 <SD_SendCmd>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d155      	bne.n	800098a <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80008de:	2300      	movs	r3, #0
 80008e0:	73fb      	strb	r3, [r7, #15]
 80008e2:	e00c      	b.n	80008fe <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80008e4:	7bfc      	ldrb	r4, [r7, #15]
 80008e6:	f7ff fe67 	bl	80005b8 <SPI_RxByte>
 80008ea:	4603      	mov	r3, r0
 80008ec:	461a      	mov	r2, r3
 80008ee:	f104 0310 	add.w	r3, r4, #16
 80008f2:	443b      	add	r3, r7
 80008f4:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80008f8:	7bfb      	ldrb	r3, [r7, #15]
 80008fa:	3301      	adds	r3, #1
 80008fc:	73fb      	strb	r3, [r7, #15]
 80008fe:	7bfb      	ldrb	r3, [r7, #15]
 8000900:	2b03      	cmp	r3, #3
 8000902:	d9ef      	bls.n	80008e4 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000904:	7abb      	ldrb	r3, [r7, #10]
 8000906:	2b01      	cmp	r3, #1
 8000908:	d17e      	bne.n	8000a08 <SD_disk_initialize+0x188>
 800090a:	7afb      	ldrb	r3, [r7, #11]
 800090c:	2baa      	cmp	r3, #170	; 0xaa
 800090e:	d17b      	bne.n	8000a08 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000910:	2100      	movs	r1, #0
 8000912:	2077      	movs	r0, #119	; 0x77
 8000914:	f7ff ff5f 	bl	80007d6 <SD_SendCmd>
 8000918:	4603      	mov	r3, r0
 800091a:	2b01      	cmp	r3, #1
 800091c:	d807      	bhi.n	800092e <SD_disk_initialize+0xae>
 800091e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000922:	2069      	movs	r0, #105	; 0x69
 8000924:	f7ff ff57 	bl	80007d6 <SD_SendCmd>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d004      	beq.n	8000938 <SD_disk_initialize+0xb8>
				} while (Timer1);
 800092e:	4b45      	ldr	r3, [pc, #276]	; (8000a44 <SD_disk_initialize+0x1c4>)
 8000930:	881b      	ldrh	r3, [r3, #0]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d1ec      	bne.n	8000910 <SD_disk_initialize+0x90>
 8000936:	e000      	b.n	800093a <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000938:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800093a:	4b42      	ldr	r3, [pc, #264]	; (8000a44 <SD_disk_initialize+0x1c4>)
 800093c:	881b      	ldrh	r3, [r3, #0]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d062      	beq.n	8000a08 <SD_disk_initialize+0x188>
 8000942:	2100      	movs	r1, #0
 8000944:	207a      	movs	r0, #122	; 0x7a
 8000946:	f7ff ff46 	bl	80007d6 <SD_SendCmd>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d15b      	bne.n	8000a08 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000950:	2300      	movs	r3, #0
 8000952:	73fb      	strb	r3, [r7, #15]
 8000954:	e00c      	b.n	8000970 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8000956:	7bfc      	ldrb	r4, [r7, #15]
 8000958:	f7ff fe2e 	bl	80005b8 <SPI_RxByte>
 800095c:	4603      	mov	r3, r0
 800095e:	461a      	mov	r2, r3
 8000960:	f104 0310 	add.w	r3, r4, #16
 8000964:	443b      	add	r3, r7
 8000966:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800096a:	7bfb      	ldrb	r3, [r7, #15]
 800096c:	3301      	adds	r3, #1
 800096e:	73fb      	strb	r3, [r7, #15]
 8000970:	7bfb      	ldrb	r3, [r7, #15]
 8000972:	2b03      	cmp	r3, #3
 8000974:	d9ef      	bls.n	8000956 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000976:	7a3b      	ldrb	r3, [r7, #8]
 8000978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <SD_disk_initialize+0x104>
 8000980:	230c      	movs	r3, #12
 8000982:	e000      	b.n	8000986 <SD_disk_initialize+0x106>
 8000984:	2304      	movs	r3, #4
 8000986:	73bb      	strb	r3, [r7, #14]
 8000988:	e03e      	b.n	8000a08 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800098a:	2100      	movs	r1, #0
 800098c:	2077      	movs	r0, #119	; 0x77
 800098e:	f7ff ff22 	bl	80007d6 <SD_SendCmd>
 8000992:	4603      	mov	r3, r0
 8000994:	2b01      	cmp	r3, #1
 8000996:	d808      	bhi.n	80009aa <SD_disk_initialize+0x12a>
 8000998:	2100      	movs	r1, #0
 800099a:	2069      	movs	r0, #105	; 0x69
 800099c:	f7ff ff1b 	bl	80007d6 <SD_SendCmd>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d801      	bhi.n	80009aa <SD_disk_initialize+0x12a>
 80009a6:	2302      	movs	r3, #2
 80009a8:	e000      	b.n	80009ac <SD_disk_initialize+0x12c>
 80009aa:	2301      	movs	r3, #1
 80009ac:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80009ae:	7bbb      	ldrb	r3, [r7, #14]
 80009b0:	2b02      	cmp	r3, #2
 80009b2:	d10e      	bne.n	80009d2 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80009b4:	2100      	movs	r1, #0
 80009b6:	2077      	movs	r0, #119	; 0x77
 80009b8:	f7ff ff0d 	bl	80007d6 <SD_SendCmd>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d80e      	bhi.n	80009e0 <SD_disk_initialize+0x160>
 80009c2:	2100      	movs	r1, #0
 80009c4:	2069      	movs	r0, #105	; 0x69
 80009c6:	f7ff ff06 	bl	80007d6 <SD_SendCmd>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d107      	bne.n	80009e0 <SD_disk_initialize+0x160>
 80009d0:	e00c      	b.n	80009ec <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80009d2:	2100      	movs	r1, #0
 80009d4:	2041      	movs	r0, #65	; 0x41
 80009d6:	f7ff fefe 	bl	80007d6 <SD_SendCmd>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d004      	beq.n	80009ea <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 80009e0:	4b18      	ldr	r3, [pc, #96]	; (8000a44 <SD_disk_initialize+0x1c4>)
 80009e2:	881b      	ldrh	r3, [r3, #0]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d1e2      	bne.n	80009ae <SD_disk_initialize+0x12e>
 80009e8:	e000      	b.n	80009ec <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80009ea:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80009ec:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <SD_disk_initialize+0x1c4>)
 80009ee:	881b      	ldrh	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d007      	beq.n	8000a04 <SD_disk_initialize+0x184>
 80009f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009f8:	2050      	movs	r0, #80	; 0x50
 80009fa:	f7ff feec 	bl	80007d6 <SD_SendCmd>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <SD_disk_initialize+0x188>
 8000a04:	2300      	movs	r3, #0
 8000a06:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000a08:	4a0f      	ldr	r2, [pc, #60]	; (8000a48 <SD_disk_initialize+0x1c8>)
 8000a0a:	7bbb      	ldrb	r3, [r7, #14]
 8000a0c:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000a0e:	f7ff fd91 	bl	8000534 <DESELECT>
	SPI_RxByte();
 8000a12:	f7ff fdd1 	bl	80005b8 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000a16:	7bbb      	ldrb	r3, [r7, #14]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d008      	beq.n	8000a2e <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000a1c:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <SD_disk_initialize+0x1c0>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	f023 0301 	bic.w	r3, r3, #1
 8000a26:	b2da      	uxtb	r2, r3
 8000a28:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <SD_disk_initialize+0x1c0>)
 8000a2a:	701a      	strb	r2, [r3, #0]
 8000a2c:	e001      	b.n	8000a32 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000a2e:	f7ff fe49 	bl	80006c4 <SD_PowerOff>
	}

	return Stat;
 8000a32:	4b03      	ldr	r3, [pc, #12]	; (8000a40 <SD_disk_initialize+0x1c0>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	b2db      	uxtb	r3, r3
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3714      	adds	r7, #20
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd90      	pop	{r4, r7, pc}
 8000a40:	20000000 	.word	0x20000000
 8000a44:	20000040 	.word	0x20000040
 8000a48:	20000044 	.word	0x20000044

08000a4c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <SD_disk_status+0x14>
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	e002      	b.n	8000a66 <SD_disk_status+0x1a>
	return Stat;
 8000a60:	4b04      	ldr	r3, [pc, #16]	; (8000a74 <SD_disk_status+0x28>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	b2db      	uxtb	r3, r3
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	20000000 	.word	0x20000000

08000a78 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	60b9      	str	r1, [r7, #8]
 8000a80:	607a      	str	r2, [r7, #4]
 8000a82:	603b      	str	r3, [r7, #0]
 8000a84:	4603      	mov	r3, r0
 8000a86:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000a88:	7bfb      	ldrb	r3, [r7, #15]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d102      	bne.n	8000a94 <SD_disk_read+0x1c>
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d101      	bne.n	8000a98 <SD_disk_read+0x20>
 8000a94:	2304      	movs	r3, #4
 8000a96:	e051      	b.n	8000b3c <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000a98:	4b2a      	ldr	r3, [pc, #168]	; (8000b44 <SD_disk_read+0xcc>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <SD_disk_read+0x32>
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	e048      	b.n	8000b3c <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000aaa:	4b27      	ldr	r3, [pc, #156]	; (8000b48 <SD_disk_read+0xd0>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	f003 0304 	and.w	r3, r3, #4
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d102      	bne.n	8000abc <SD_disk_read+0x44>
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	025b      	lsls	r3, r3, #9
 8000aba:	607b      	str	r3, [r7, #4]

	SELECT();
 8000abc:	f7ff fd2c 	bl	8000518 <SELECT>

	if (count == 1)
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	2b01      	cmp	r3, #1
 8000ac4:	d111      	bne.n	8000aea <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000ac6:	6879      	ldr	r1, [r7, #4]
 8000ac8:	2051      	movs	r0, #81	; 0x51
 8000aca:	f7ff fe84 	bl	80007d6 <SD_SendCmd>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d129      	bne.n	8000b28 <SD_disk_read+0xb0>
 8000ad4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ad8:	68b8      	ldr	r0, [r7, #8]
 8000ada:	f7ff fe0b 	bl	80006f4 <SD_RxDataBlock>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d021      	beq.n	8000b28 <SD_disk_read+0xb0>
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	603b      	str	r3, [r7, #0]
 8000ae8:	e01e      	b.n	8000b28 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000aea:	6879      	ldr	r1, [r7, #4]
 8000aec:	2052      	movs	r0, #82	; 0x52
 8000aee:	f7ff fe72 	bl	80007d6 <SD_SendCmd>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d117      	bne.n	8000b28 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000af8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000afc:	68b8      	ldr	r0, [r7, #8]
 8000afe:	f7ff fdf9 	bl	80006f4 <SD_RxDataBlock>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d00a      	beq.n	8000b1e <SD_disk_read+0xa6>
				buff += 512;
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000b0e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	3b01      	subs	r3, #1
 8000b14:	603b      	str	r3, [r7, #0]
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d1ed      	bne.n	8000af8 <SD_disk_read+0x80>
 8000b1c:	e000      	b.n	8000b20 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000b1e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000b20:	2100      	movs	r1, #0
 8000b22:	204c      	movs	r0, #76	; 0x4c
 8000b24:	f7ff fe57 	bl	80007d6 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000b28:	f7ff fd04 	bl	8000534 <DESELECT>
	SPI_RxByte();
 8000b2c:	f7ff fd44 	bl	80005b8 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	bf14      	ite	ne
 8000b36:	2301      	movne	r3, #1
 8000b38:	2300      	moveq	r3, #0
 8000b3a:	b2db      	uxtb	r3, r3
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3710      	adds	r7, #16
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20000000 	.word	0x20000000
 8000b48:	20000044 	.word	0x20000044

08000b4c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60b9      	str	r1, [r7, #8]
 8000b54:	607a      	str	r2, [r7, #4]
 8000b56:	603b      	str	r3, [r7, #0]
 8000b58:	4603      	mov	r3, r0
 8000b5a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000b5c:	7bfb      	ldrb	r3, [r7, #15]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d102      	bne.n	8000b68 <SD_disk_write+0x1c>
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d101      	bne.n	8000b6c <SD_disk_write+0x20>
 8000b68:	2304      	movs	r3, #4
 8000b6a:	e06b      	b.n	8000c44 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000b6c:	4b37      	ldr	r3, [pc, #220]	; (8000c4c <SD_disk_write+0x100>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <SD_disk_write+0x32>
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	e062      	b.n	8000c44 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000b7e:	4b33      	ldr	r3, [pc, #204]	; (8000c4c <SD_disk_write+0x100>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	f003 0304 	and.w	r3, r3, #4
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <SD_disk_write+0x44>
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	e059      	b.n	8000c44 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000b90:	4b2f      	ldr	r3, [pc, #188]	; (8000c50 <SD_disk_write+0x104>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	f003 0304 	and.w	r3, r3, #4
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d102      	bne.n	8000ba2 <SD_disk_write+0x56>
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	025b      	lsls	r3, r3, #9
 8000ba0:	607b      	str	r3, [r7, #4]

	SELECT();
 8000ba2:	f7ff fcb9 	bl	8000518 <SELECT>

	if (count == 1)
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d110      	bne.n	8000bce <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000bac:	6879      	ldr	r1, [r7, #4]
 8000bae:	2058      	movs	r0, #88	; 0x58
 8000bb0:	f7ff fe11 	bl	80007d6 <SD_SendCmd>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d13a      	bne.n	8000c30 <SD_disk_write+0xe4>
 8000bba:	21fe      	movs	r1, #254	; 0xfe
 8000bbc:	68b8      	ldr	r0, [r7, #8]
 8000bbe:	f7ff fdc7 	bl	8000750 <SD_TxDataBlock>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d033      	beq.n	8000c30 <SD_disk_write+0xe4>
			count = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	603b      	str	r3, [r7, #0]
 8000bcc:	e030      	b.n	8000c30 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000bce:	4b20      	ldr	r3, [pc, #128]	; (8000c50 <SD_disk_write+0x104>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	f003 0302 	and.w	r3, r3, #2
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d007      	beq.n	8000bea <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000bda:	2100      	movs	r1, #0
 8000bdc:	2077      	movs	r0, #119	; 0x77
 8000bde:	f7ff fdfa 	bl	80007d6 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000be2:	6839      	ldr	r1, [r7, #0]
 8000be4:	2057      	movs	r0, #87	; 0x57
 8000be6:	f7ff fdf6 	bl	80007d6 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000bea:	6879      	ldr	r1, [r7, #4]
 8000bec:	2059      	movs	r0, #89	; 0x59
 8000bee:	f7ff fdf2 	bl	80007d6 <SD_SendCmd>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d11b      	bne.n	8000c30 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000bf8:	21fc      	movs	r1, #252	; 0xfc
 8000bfa:	68b8      	ldr	r0, [r7, #8]
 8000bfc:	f7ff fda8 	bl	8000750 <SD_TxDataBlock>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d00a      	beq.n	8000c1c <SD_disk_write+0xd0>
				buff += 512;
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000c0c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	3b01      	subs	r3, #1
 8000c12:	603b      	str	r3, [r7, #0]
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d1ee      	bne.n	8000bf8 <SD_disk_write+0xac>
 8000c1a:	e000      	b.n	8000c1e <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000c1c:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000c1e:	21fd      	movs	r1, #253	; 0xfd
 8000c20:	2000      	movs	r0, #0
 8000c22:	f7ff fd95 	bl	8000750 <SD_TxDataBlock>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d101      	bne.n	8000c30 <SD_disk_write+0xe4>
			{
				count = 1;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000c30:	f7ff fc80 	bl	8000534 <DESELECT>
	SPI_RxByte();
 8000c34:	f7ff fcc0 	bl	80005b8 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	bf14      	ite	ne
 8000c3e:	2301      	movne	r3, #1
 8000c40:	2300      	moveq	r3, #0
 8000c42:	b2db      	uxtb	r3, r3
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3710      	adds	r7, #16
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000000 	.word	0x20000000
 8000c50:	20000044 	.word	0x20000044

08000c54 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000c54:	b590      	push	{r4, r7, lr}
 8000c56:	b08b      	sub	sp, #44	; 0x2c
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	603a      	str	r2, [r7, #0]
 8000c5e:	71fb      	strb	r3, [r7, #7]
 8000c60:	460b      	mov	r3, r1
 8000c62:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <SD_disk_ioctl+0x1e>
 8000c6e:	2304      	movs	r3, #4
 8000c70:	e115      	b.n	8000e9e <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8000c72:	2301      	movs	r3, #1
 8000c74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8000c78:	79bb      	ldrb	r3, [r7, #6]
 8000c7a:	2b05      	cmp	r3, #5
 8000c7c:	d124      	bne.n	8000cc8 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000c7e:	6a3b      	ldr	r3, [r7, #32]
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	2b02      	cmp	r3, #2
 8000c84:	d012      	beq.n	8000cac <SD_disk_ioctl+0x58>
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	dc1a      	bgt.n	8000cc0 <SD_disk_ioctl+0x6c>
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d002      	beq.n	8000c94 <SD_disk_ioctl+0x40>
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d006      	beq.n	8000ca0 <SD_disk_ioctl+0x4c>
 8000c92:	e015      	b.n	8000cc0 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000c94:	f7ff fd16 	bl	80006c4 <SD_PowerOff>
			res = RES_OK;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c9e:	e0fc      	b.n	8000e9a <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8000ca0:	f7ff fcce 	bl	8000640 <SD_PowerOn>
			res = RES_OK;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000caa:	e0f6      	b.n	8000e9a <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000cac:	6a3b      	ldr	r3, [r7, #32]
 8000cae:	1c5c      	adds	r4, r3, #1
 8000cb0:	f7ff fd14 	bl	80006dc <SD_CheckPower>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000cb8:	2300      	movs	r3, #0
 8000cba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000cbe:	e0ec      	b.n	8000e9a <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8000cc0:	2304      	movs	r3, #4
 8000cc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000cc6:	e0e8      	b.n	8000e9a <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000cc8:	4b77      	ldr	r3, [pc, #476]	; (8000ea8 <SD_disk_ioctl+0x254>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <SD_disk_ioctl+0x86>
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	e0e1      	b.n	8000e9e <SD_disk_ioctl+0x24a>

		SELECT();
 8000cda:	f7ff fc1d 	bl	8000518 <SELECT>

		switch (ctrl)
 8000cde:	79bb      	ldrb	r3, [r7, #6]
 8000ce0:	2b0d      	cmp	r3, #13
 8000ce2:	f200 80cb 	bhi.w	8000e7c <SD_disk_ioctl+0x228>
 8000ce6:	a201      	add	r2, pc, #4	; (adr r2, 8000cec <SD_disk_ioctl+0x98>)
 8000ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cec:	08000de7 	.word	0x08000de7
 8000cf0:	08000d25 	.word	0x08000d25
 8000cf4:	08000dd7 	.word	0x08000dd7
 8000cf8:	08000e7d 	.word	0x08000e7d
 8000cfc:	08000e7d 	.word	0x08000e7d
 8000d00:	08000e7d 	.word	0x08000e7d
 8000d04:	08000e7d 	.word	0x08000e7d
 8000d08:	08000e7d 	.word	0x08000e7d
 8000d0c:	08000e7d 	.word	0x08000e7d
 8000d10:	08000e7d 	.word	0x08000e7d
 8000d14:	08000e7d 	.word	0x08000e7d
 8000d18:	08000df9 	.word	0x08000df9
 8000d1c:	08000e1d 	.word	0x08000e1d
 8000d20:	08000e41 	.word	0x08000e41
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000d24:	2100      	movs	r1, #0
 8000d26:	2049      	movs	r0, #73	; 0x49
 8000d28:	f7ff fd55 	bl	80007d6 <SD_SendCmd>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 80a8 	bne.w	8000e84 <SD_disk_ioctl+0x230>
 8000d34:	f107 030c 	add.w	r3, r7, #12
 8000d38:	2110      	movs	r1, #16
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff fcda 	bl	80006f4 <SD_RxDataBlock>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f000 809e 	beq.w	8000e84 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8000d48:	7b3b      	ldrb	r3, [r7, #12]
 8000d4a:	099b      	lsrs	r3, r3, #6
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d10e      	bne.n	8000d70 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000d52:	7d7b      	ldrb	r3, [r7, #21]
 8000d54:	b29a      	uxth	r2, r3
 8000d56:	7d3b      	ldrb	r3, [r7, #20]
 8000d58:	b29b      	uxth	r3, r3
 8000d5a:	021b      	lsls	r3, r3, #8
 8000d5c:	b29b      	uxth	r3, r3
 8000d5e:	4413      	add	r3, r2
 8000d60:	b29b      	uxth	r3, r3
 8000d62:	3301      	adds	r3, #1
 8000d64:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000d66:	8bfb      	ldrh	r3, [r7, #30]
 8000d68:	029a      	lsls	r2, r3, #10
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	e02e      	b.n	8000dce <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000d70:	7c7b      	ldrb	r3, [r7, #17]
 8000d72:	f003 030f 	and.w	r3, r3, #15
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	7dbb      	ldrb	r3, [r7, #22]
 8000d7a:	09db      	lsrs	r3, r3, #7
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	4413      	add	r3, r2
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	7d7b      	ldrb	r3, [r7, #21]
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	f003 0306 	and.w	r3, r3, #6
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	4413      	add	r3, r2
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	3302      	adds	r3, #2
 8000d94:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000d98:	7d3b      	ldrb	r3, [r7, #20]
 8000d9a:	099b      	lsrs	r3, r3, #6
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	b29a      	uxth	r2, r3
 8000da0:	7cfb      	ldrb	r3, [r7, #19]
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	4413      	add	r3, r2
 8000daa:	b29a      	uxth	r2, r3
 8000dac:	7cbb      	ldrb	r3, [r7, #18]
 8000dae:	029b      	lsls	r3, r3, #10
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	4413      	add	r3, r2
 8000dba:	b29b      	uxth	r3, r3
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000dc0:	8bfa      	ldrh	r2, [r7, #30]
 8000dc2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000dc6:	3b09      	subs	r3, #9
 8000dc8:	409a      	lsls	r2, r3
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000dd4:	e056      	b.n	8000e84 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ddc:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000dde:	2300      	movs	r3, #0
 8000de0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000de4:	e055      	b.n	8000e92 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000de6:	f7ff fc11 	bl	800060c <SD_ReadyWait>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2bff      	cmp	r3, #255	; 0xff
 8000dee:	d14b      	bne.n	8000e88 <SD_disk_ioctl+0x234>
 8000df0:	2300      	movs	r3, #0
 8000df2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000df6:	e047      	b.n	8000e88 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000df8:	2100      	movs	r1, #0
 8000dfa:	2049      	movs	r0, #73	; 0x49
 8000dfc:	f7ff fceb 	bl	80007d6 <SD_SendCmd>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d142      	bne.n	8000e8c <SD_disk_ioctl+0x238>
 8000e06:	2110      	movs	r1, #16
 8000e08:	6a38      	ldr	r0, [r7, #32]
 8000e0a:	f7ff fc73 	bl	80006f4 <SD_RxDataBlock>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d03b      	beq.n	8000e8c <SD_disk_ioctl+0x238>
 8000e14:	2300      	movs	r3, #0
 8000e16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e1a:	e037      	b.n	8000e8c <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	204a      	movs	r0, #74	; 0x4a
 8000e20:	f7ff fcd9 	bl	80007d6 <SD_SendCmd>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d132      	bne.n	8000e90 <SD_disk_ioctl+0x23c>
 8000e2a:	2110      	movs	r1, #16
 8000e2c:	6a38      	ldr	r0, [r7, #32]
 8000e2e:	f7ff fc61 	bl	80006f4 <SD_RxDataBlock>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d02b      	beq.n	8000e90 <SD_disk_ioctl+0x23c>
 8000e38:	2300      	movs	r3, #0
 8000e3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e3e:	e027      	b.n	8000e90 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000e40:	2100      	movs	r1, #0
 8000e42:	207a      	movs	r0, #122	; 0x7a
 8000e44:	f7ff fcc7 	bl	80007d6 <SD_SendCmd>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d116      	bne.n	8000e7c <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8000e4e:	2300      	movs	r3, #0
 8000e50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000e54:	e00b      	b.n	8000e6e <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8000e56:	6a3c      	ldr	r4, [r7, #32]
 8000e58:	1c63      	adds	r3, r4, #1
 8000e5a:	623b      	str	r3, [r7, #32]
 8000e5c:	f7ff fbac 	bl	80005b8 <SPI_RxByte>
 8000e60:	4603      	mov	r3, r0
 8000e62:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000e64:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e68:	3301      	adds	r3, #1
 8000e6a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000e6e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e72:	2b03      	cmp	r3, #3
 8000e74:	d9ef      	bls.n	8000e56 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8000e76:	2300      	movs	r3, #0
 8000e78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8000e7c:	2304      	movs	r3, #4
 8000e7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000e82:	e006      	b.n	8000e92 <SD_disk_ioctl+0x23e>
			break;
 8000e84:	bf00      	nop
 8000e86:	e004      	b.n	8000e92 <SD_disk_ioctl+0x23e>
			break;
 8000e88:	bf00      	nop
 8000e8a:	e002      	b.n	8000e92 <SD_disk_ioctl+0x23e>
			break;
 8000e8c:	bf00      	nop
 8000e8e:	e000      	b.n	8000e92 <SD_disk_ioctl+0x23e>
			break;
 8000e90:	bf00      	nop
		}

		DESELECT();
 8000e92:	f7ff fb4f 	bl	8000534 <DESELECT>
		SPI_RxByte();
 8000e96:	f7ff fb8f 	bl	80005b8 <SPI_RxByte>
	}

	return res;
 8000e9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	372c      	adds	r7, #44	; 0x2c
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd90      	pop	{r4, r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20000000 	.word	0x20000000

08000eac <serialPrint>:
char buffer[1024];

UINT br, bw;


void serialPrint(char *string){
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f7ff f9a5 	bl	8000204 <strlen>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, (uint8_t *)string, len, 5000);
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
 8000ec0:	b29a      	uxth	r2, r3
 8000ec2:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ec6:	6879      	ldr	r1, [r7, #4]
 8000ec8:	4803      	ldr	r0, [pc, #12]	; (8000ed8 <serialPrint+0x2c>)
 8000eca:	f002 f88a 	bl	8002fe2 <HAL_UART_Transmit>
}
 8000ece:	bf00      	nop
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	200000ac 	.word	0x200000ac

08000edc <buffClear>:

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
	HAL_Delay(1000);
}

void buffClear(){
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
	for(int i = 0; i<1024; i++){
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	607b      	str	r3, [r7, #4]
 8000ee6:	e007      	b.n	8000ef8 <buffClear+0x1c>
		buffer[i] = '\0';
 8000ee8:	4a09      	ldr	r2, [pc, #36]	; (8000f10 <buffClear+0x34>)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4413      	add	r3, r2
 8000eee:	2200      	movs	r2, #0
 8000ef0:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<1024; i++){
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	607b      	str	r3, [r7, #4]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000efe:	dbf3      	blt.n	8000ee8 <buffClear+0xc>
	}
}
 8000f00:	bf00      	nop
 8000f02:	bf00      	nop
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	2000215c 	.word	0x2000215c

08000f14 <printFResult>:

void printFResult(FRESULT res, int proc){
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	6039      	str	r1, [r7, #0]
 8000f1e:	71fb      	strb	r3, [r7, #7]
	switch(proc){
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	2b03      	cmp	r3, #3
 8000f24:	d83a      	bhi.n	8000f9c <printFResult+0x88>
 8000f26:	a201      	add	r2, pc, #4	; (adr r2, 8000f2c <printFResult+0x18>)
 8000f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f2c:	08000f3d 	.word	0x08000f3d
 8000f30:	08000f55 	.word	0x08000f55
 8000f34:	08000f6d 	.word	0x08000f6d
 8000f38:	08000f85 	.word	0x08000f85
	case 0 :	if(fresult != FR_OK){
 8000f3c:	4b19      	ldr	r3, [pc, #100]	; (8000fa4 <printFResult+0x90>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d003      	beq.n	8000f4c <printFResult+0x38>
					serialPrint("Failed to Mount SD Card ...\r\n");
 8000f44:	4818      	ldr	r0, [pc, #96]	; (8000fa8 <printFResult+0x94>)
 8000f46:	f7ff ffb1 	bl	8000eac <serialPrint>
					break;
 8000f4a:	e027      	b.n	8000f9c <printFResult+0x88>
				} else{
					serialPrint("SD Card Successfully Mounted ...\r\n");
 8000f4c:	4817      	ldr	r0, [pc, #92]	; (8000fac <printFResult+0x98>)
 8000f4e:	f7ff ffad 	bl	8000eac <serialPrint>
					break;
 8000f52:	e023      	b.n	8000f9c <printFResult+0x88>
				}break;
	case 1 :	if(fresult != FR_OK){
 8000f54:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <printFResult+0x90>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d003      	beq.n	8000f64 <printFResult+0x50>
					serialPrint("Failed to Open File ...\r\n");
 8000f5c:	4814      	ldr	r0, [pc, #80]	; (8000fb0 <printFResult+0x9c>)
 8000f5e:	f7ff ffa5 	bl	8000eac <serialPrint>
					break;
 8000f62:	e01b      	b.n	8000f9c <printFResult+0x88>
				} else{
					serialPrint("File Successfully Opened ...\r\n");
 8000f64:	4813      	ldr	r0, [pc, #76]	; (8000fb4 <printFResult+0xa0>)
 8000f66:	f7ff ffa1 	bl	8000eac <serialPrint>
					break;
 8000f6a:	e017      	b.n	8000f9c <printFResult+0x88>
				}break;
	case 2 :	if(fresult != FR_OK){
 8000f6c:	4b0d      	ldr	r3, [pc, #52]	; (8000fa4 <printFResult+0x90>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d003      	beq.n	8000f7c <printFResult+0x68>
					serialPrint("Failed to Write to File ...\r\n");
 8000f74:	4810      	ldr	r0, [pc, #64]	; (8000fb8 <printFResult+0xa4>)
 8000f76:	f7ff ff99 	bl	8000eac <serialPrint>
					break;
 8000f7a:	e00f      	b.n	8000f9c <printFResult+0x88>
				} else{
					serialPrint("Successfully Writing to File ...\r\n");
 8000f7c:	480f      	ldr	r0, [pc, #60]	; (8000fbc <printFResult+0xa8>)
 8000f7e:	f7ff ff95 	bl	8000eac <serialPrint>
					break;
 8000f82:	e00b      	b.n	8000f9c <printFResult+0x88>
				}break;
	case 3 :	if(fresult != FR_OK){
 8000f84:	4b07      	ldr	r3, [pc, #28]	; (8000fa4 <printFResult+0x90>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d003      	beq.n	8000f94 <printFResult+0x80>
					serialPrint("Failed to Close File ...\r\n");
 8000f8c:	480c      	ldr	r0, [pc, #48]	; (8000fc0 <printFResult+0xac>)
 8000f8e:	f7ff ff8d 	bl	8000eac <serialPrint>
					break;
 8000f92:	e003      	b.n	8000f9c <printFResult+0x88>
				} else{
					serialPrint("Successfully Closing File ...\r\n");
 8000f94:	480b      	ldr	r0, [pc, #44]	; (8000fc4 <printFResult+0xb0>)
 8000f96:	f7ff ff89 	bl	8000eac <serialPrint>
					break;
 8000f9a:	bf00      	nop
				}break;
	}
}
 8000f9c:	bf00      	nop
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20002158 	.word	0x20002158
 8000fa8:	080067f4 	.word	0x080067f4
 8000fac:	08006814 	.word	0x08006814
 8000fb0:	08006838 	.word	0x08006838
 8000fb4:	08006854 	.word	0x08006854
 8000fb8:	08006874 	.word	0x08006874
 8000fbc:	08006894 	.word	0x08006894
 8000fc0:	080068b8 	.word	0x080068b8
 8000fc4:	080068d4 	.word	0x080068d4

08000fc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fcc:	f000 fabc 	bl	8001548 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd0:	f000 f852 	bl	8001078 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd4:	f000 f93a 	bl	800124c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000fd8:	f000 f90e 	bl	80011f8 <MX_USART1_UART_Init>
  MX_IWDG_Init();
 8000fdc:	f000 f8bc 	bl	8001158 <MX_IWDG_Init>
  MX_SPI1_Init();
 8000fe0:	f000 f8d4 	bl	800118c <MX_SPI1_Init>
  MX_FATFS_Init();
 8000fe4:	f002 fb72 	bl	80036cc <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  fresult = f_mount(&fs, "", 0);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	491d      	ldr	r1, [pc, #116]	; (8001060 <main+0x98>)
 8000fec:	481d      	ldr	r0, [pc, #116]	; (8001064 <main+0x9c>)
 8000fee:	f004 fdbd 	bl	8005b6c <f_mount>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	4b1c      	ldr	r3, [pc, #112]	; (8001068 <main+0xa0>)
 8000ff8:	701a      	strb	r2, [r3, #0]
  printFResult(fresult, 0);
 8000ffa:	4b1b      	ldr	r3, [pc, #108]	; (8001068 <main+0xa0>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2100      	movs	r1, #0
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff ff87 	bl	8000f14 <printFResult>

  fresult = f_open(&fil, "log.txt", FA_OPEN_ALWAYS|FA_READ|FA_WRITE);
 8001006:	2213      	movs	r2, #19
 8001008:	4918      	ldr	r1, [pc, #96]	; (800106c <main+0xa4>)
 800100a:	4819      	ldr	r0, [pc, #100]	; (8001070 <main+0xa8>)
 800100c:	f004 fdf4 	bl	8005bf8 <f_open>
 8001010:	4603      	mov	r3, r0
 8001012:	461a      	mov	r2, r3
 8001014:	4b14      	ldr	r3, [pc, #80]	; (8001068 <main+0xa0>)
 8001016:	701a      	strb	r2, [r3, #0]
  printFResult(fresult, 1);
 8001018:	4b13      	ldr	r3, [pc, #76]	; (8001068 <main+0xa0>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2101      	movs	r1, #1
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff ff78 	bl	8000f14 <printFResult>

  fresult = f_puts("This is Test number 1\r\n", &fil);
 8001024:	4912      	ldr	r1, [pc, #72]	; (8001070 <main+0xa8>)
 8001026:	4813      	ldr	r0, [pc, #76]	; (8001074 <main+0xac>)
 8001028:	f005 fa65 	bl	80064f6 <f_puts>
 800102c:	4603      	mov	r3, r0
 800102e:	b2da      	uxtb	r2, r3
 8001030:	4b0d      	ldr	r3, [pc, #52]	; (8001068 <main+0xa0>)
 8001032:	701a      	strb	r2, [r3, #0]
  printFResult(fresult, 2);
 8001034:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <main+0xa0>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2102      	movs	r1, #2
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff ff6a 	bl	8000f14 <printFResult>

  fresult = f_close(&fil);
 8001040:	480b      	ldr	r0, [pc, #44]	; (8001070 <main+0xa8>)
 8001042:	f005 f9b7 	bl	80063b4 <f_close>
 8001046:	4603      	mov	r3, r0
 8001048:	461a      	mov	r2, r3
 800104a:	4b07      	ldr	r3, [pc, #28]	; (8001068 <main+0xa0>)
 800104c:	701a      	strb	r2, [r3, #0]
  printFResult(fresult, 3);
 800104e:	4b06      	ldr	r3, [pc, #24]	; (8001068 <main+0xa0>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	2103      	movs	r1, #3
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ff5d 	bl	8000f14 <printFResult>

  buffClear();
 800105a:	f7ff ff3f 	bl	8000edc <buffClear>
//  fresult = f_gets(buffer, fil.fsize, &fil);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 800105e:	e7fe      	b.n	800105e <main+0x96>
 8001060:	080068f4 	.word	0x080068f4
 8001064:	200000f0 	.word	0x200000f0
 8001068:	20002158 	.word	0x20002158
 800106c:	080068f8 	.word	0x080068f8
 8001070:	20001128 	.word	0x20001128
 8001074:	08006900 	.word	0x08006900

08001078 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b094      	sub	sp, #80	; 0x50
 800107c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800107e:	f107 031c 	add.w	r3, r7, #28
 8001082:	2234      	movs	r2, #52	; 0x34
 8001084:	2100      	movs	r1, #0
 8001086:	4618      	mov	r0, r3
 8001088:	f005 fba0 	bl	80067cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800108c:	f107 0308 	add.w	r3, r7, #8
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800109c:	2300      	movs	r3, #0
 800109e:	607b      	str	r3, [r7, #4]
 80010a0:	4b2b      	ldr	r3, [pc, #172]	; (8001150 <SystemClock_Config+0xd8>)
 80010a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a4:	4a2a      	ldr	r2, [pc, #168]	; (8001150 <SystemClock_Config+0xd8>)
 80010a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010aa:	6413      	str	r3, [r2, #64]	; 0x40
 80010ac:	4b28      	ldr	r3, [pc, #160]	; (8001150 <SystemClock_Config+0xd8>)
 80010ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80010b8:	2300      	movs	r3, #0
 80010ba:	603b      	str	r3, [r7, #0]
 80010bc:	4b25      	ldr	r3, [pc, #148]	; (8001154 <SystemClock_Config+0xdc>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010c4:	4a23      	ldr	r2, [pc, #140]	; (8001154 <SystemClock_Config+0xdc>)
 80010c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ca:	6013      	str	r3, [r2, #0]
 80010cc:	4b21      	ldr	r3, [pc, #132]	; (8001154 <SystemClock_Config+0xdc>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010d4:	603b      	str	r3, [r7, #0]
 80010d6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80010d8:	230a      	movs	r3, #10
 80010da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010dc:	2301      	movs	r3, #1
 80010de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010e0:	2310      	movs	r3, #16
 80010e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80010e4:	2301      	movs	r3, #1
 80010e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010e8:	2302      	movs	r3, #2
 80010ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010ec:	2300      	movs	r3, #0
 80010ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80010f0:	2310      	movs	r3, #16
 80010f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 80010f4:	23c0      	movs	r3, #192	; 0xc0
 80010f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010f8:	2302      	movs	r3, #2
 80010fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010fc:	2302      	movs	r3, #2
 80010fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001100:	2302      	movs	r3, #2
 8001102:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001104:	f107 031c 	add.w	r3, r7, #28
 8001108:	4618      	mov	r0, r3
 800110a:	f001 f84d 	bl	80021a8 <HAL_RCC_OscConfig>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001114:	f000 f8f4 	bl	8001300 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001118:	230f      	movs	r3, #15
 800111a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800111c:	2302      	movs	r3, #2
 800111e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001120:	2300      	movs	r3, #0
 8001122:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001124:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001128:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800112a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800112e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001130:	f107 0308 	add.w	r3, r7, #8
 8001134:	2103      	movs	r1, #3
 8001136:	4618      	mov	r0, r3
 8001138:	f000 fd72 	bl	8001c20 <HAL_RCC_ClockConfig>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001142:	f000 f8dd 	bl	8001300 <Error_Handler>
  }
}
 8001146:	bf00      	nop
 8001148:	3750      	adds	r7, #80	; 0x50
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40023800 	.word	0x40023800
 8001154:	40007000 	.word	0x40007000

08001158 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800115c:	4b09      	ldr	r3, [pc, #36]	; (8001184 <MX_IWDG_Init+0x2c>)
 800115e:	4a0a      	ldr	r2, [pc, #40]	; (8001188 <MX_IWDG_Init+0x30>)
 8001160:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_8;
 8001162:	4b08      	ldr	r3, [pc, #32]	; (8001184 <MX_IWDG_Init+0x2c>)
 8001164:	2201      	movs	r2, #1
 8001166:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 79;
 8001168:	4b06      	ldr	r3, [pc, #24]	; (8001184 <MX_IWDG_Init+0x2c>)
 800116a:	224f      	movs	r2, #79	; 0x4f
 800116c:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800116e:	4805      	ldr	r0, [pc, #20]	; (8001184 <MX_IWDG_Init+0x2c>)
 8001170:	f000 fd13 	bl	8001b9a <HAL_IWDG_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_IWDG_Init+0x26>
  {
    Error_Handler();
 800117a:	f000 f8c1 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000048 	.word	0x20000048
 8001188:	40003000 	.word	0x40003000

0800118c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001190:	4b17      	ldr	r3, [pc, #92]	; (80011f0 <MX_SPI1_Init+0x64>)
 8001192:	4a18      	ldr	r2, [pc, #96]	; (80011f4 <MX_SPI1_Init+0x68>)
 8001194:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001196:	4b16      	ldr	r3, [pc, #88]	; (80011f0 <MX_SPI1_Init+0x64>)
 8001198:	f44f 7282 	mov.w	r2, #260	; 0x104
 800119c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800119e:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <MX_SPI1_Init+0x64>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011a4:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <MX_SPI1_Init+0x64>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011aa:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <MX_SPI1_Init+0x64>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011b0:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <MX_SPI1_Init+0x64>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011b6:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <MX_SPI1_Init+0x64>)
 80011b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011bc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80011be:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <MX_SPI1_Init+0x64>)
 80011c0:	2210      	movs	r2, #16
 80011c2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011c4:	4b0a      	ldr	r3, [pc, #40]	; (80011f0 <MX_SPI1_Init+0x64>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011ca:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <MX_SPI1_Init+0x64>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011d0:	4b07      	ldr	r3, [pc, #28]	; (80011f0 <MX_SPI1_Init+0x64>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011d6:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <MX_SPI1_Init+0x64>)
 80011d8:	220a      	movs	r2, #10
 80011da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011dc:	4804      	ldr	r0, [pc, #16]	; (80011f0 <MX_SPI1_Init+0x64>)
 80011de:	f001 fa81 	bl	80026e4 <HAL_SPI_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011e8:	f000 f88a 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000054 	.word	0x20000054
 80011f4:	40013000 	.word	0x40013000

080011f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011fc:	4b11      	ldr	r3, [pc, #68]	; (8001244 <MX_USART1_UART_Init+0x4c>)
 80011fe:	4a12      	ldr	r2, [pc, #72]	; (8001248 <MX_USART1_UART_Init+0x50>)
 8001200:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001202:	4b10      	ldr	r3, [pc, #64]	; (8001244 <MX_USART1_UART_Init+0x4c>)
 8001204:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001208:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800120a:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <MX_USART1_UART_Init+0x4c>)
 800120c:	2200      	movs	r2, #0
 800120e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <MX_USART1_UART_Init+0x4c>)
 8001212:	2200      	movs	r2, #0
 8001214:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001216:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <MX_USART1_UART_Init+0x4c>)
 8001218:	2200      	movs	r2, #0
 800121a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800121c:	4b09      	ldr	r3, [pc, #36]	; (8001244 <MX_USART1_UART_Init+0x4c>)
 800121e:	220c      	movs	r2, #12
 8001220:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001222:	4b08      	ldr	r3, [pc, #32]	; (8001244 <MX_USART1_UART_Init+0x4c>)
 8001224:	2200      	movs	r2, #0
 8001226:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001228:	4b06      	ldr	r3, [pc, #24]	; (8001244 <MX_USART1_UART_Init+0x4c>)
 800122a:	2200      	movs	r2, #0
 800122c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800122e:	4805      	ldr	r0, [pc, #20]	; (8001244 <MX_USART1_UART_Init+0x4c>)
 8001230:	f001 fe8a 	bl	8002f48 <HAL_UART_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800123a:	f000 f861 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	200000ac 	.word	0x200000ac
 8001248:	40011000 	.word	0x40011000

0800124c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b088      	sub	sp, #32
 8001250:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001252:	f107 030c 	add.w	r3, r7, #12
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	60da      	str	r2, [r3, #12]
 8001260:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	60bb      	str	r3, [r7, #8]
 8001266:	4b23      	ldr	r3, [pc, #140]	; (80012f4 <MX_GPIO_Init+0xa8>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4a22      	ldr	r2, [pc, #136]	; (80012f4 <MX_GPIO_Init+0xa8>)
 800126c:	f043 0304 	orr.w	r3, r3, #4
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
 8001272:	4b20      	ldr	r3, [pc, #128]	; (80012f4 <MX_GPIO_Init+0xa8>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	f003 0304 	and.w	r3, r3, #4
 800127a:	60bb      	str	r3, [r7, #8]
 800127c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	607b      	str	r3, [r7, #4]
 8001282:	4b1c      	ldr	r3, [pc, #112]	; (80012f4 <MX_GPIO_Init+0xa8>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	4a1b      	ldr	r2, [pc, #108]	; (80012f4 <MX_GPIO_Init+0xa8>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	6313      	str	r3, [r2, #48]	; 0x30
 800128e:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <MX_GPIO_Init+0xa8>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800129a:	2200      	movs	r2, #0
 800129c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012a0:	4815      	ldr	r0, [pc, #84]	; (80012f8 <MX_GPIO_Init+0xac>)
 80012a2:	f000 fc61 	bl	8001b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2110      	movs	r1, #16
 80012aa:	4814      	ldr	r0, [pc, #80]	; (80012fc <MX_GPIO_Init+0xb0>)
 80012ac:	f000 fc5c 	bl	8001b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80012b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b6:	2301      	movs	r3, #1
 80012b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012be:	2300      	movs	r3, #0
 80012c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80012c2:	f107 030c 	add.w	r3, r7, #12
 80012c6:	4619      	mov	r1, r3
 80012c8:	480b      	ldr	r0, [pc, #44]	; (80012f8 <MX_GPIO_Init+0xac>)
 80012ca:	f000 fab9 	bl	8001840 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80012ce:	2310      	movs	r3, #16
 80012d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d2:	2301      	movs	r3, #1
 80012d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012da:	2300      	movs	r3, #0
 80012dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80012de:	f107 030c 	add.w	r3, r7, #12
 80012e2:	4619      	mov	r1, r3
 80012e4:	4805      	ldr	r0, [pc, #20]	; (80012fc <MX_GPIO_Init+0xb0>)
 80012e6:	f000 faab 	bl	8001840 <HAL_GPIO_Init>

}
 80012ea:	bf00      	nop
 80012ec:	3720      	adds	r7, #32
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40023800 	.word	0x40023800
 80012f8:	40020800 	.word	0x40020800
 80012fc:	40020000 	.word	0x40020000

08001300 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001304:	b672      	cpsid	i
}
 8001306:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001308:	e7fe      	b.n	8001308 <Error_Handler+0x8>
	...

0800130c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	607b      	str	r3, [r7, #4]
 8001316:	4b10      	ldr	r3, [pc, #64]	; (8001358 <HAL_MspInit+0x4c>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131a:	4a0f      	ldr	r2, [pc, #60]	; (8001358 <HAL_MspInit+0x4c>)
 800131c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001320:	6453      	str	r3, [r2, #68]	; 0x44
 8001322:	4b0d      	ldr	r3, [pc, #52]	; (8001358 <HAL_MspInit+0x4c>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	603b      	str	r3, [r7, #0]
 8001332:	4b09      	ldr	r3, [pc, #36]	; (8001358 <HAL_MspInit+0x4c>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	4a08      	ldr	r2, [pc, #32]	; (8001358 <HAL_MspInit+0x4c>)
 8001338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800133c:	6413      	str	r3, [r2, #64]	; 0x40
 800133e:	4b06      	ldr	r3, [pc, #24]	; (8001358 <HAL_MspInit+0x4c>)
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001346:	603b      	str	r3, [r7, #0]
 8001348:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	40023800 	.word	0x40023800

0800135c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08a      	sub	sp, #40	; 0x28
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a19      	ldr	r2, [pc, #100]	; (80013e0 <HAL_SPI_MspInit+0x84>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d12b      	bne.n	80013d6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	613b      	str	r3, [r7, #16]
 8001382:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <HAL_SPI_MspInit+0x88>)
 8001384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001386:	4a17      	ldr	r2, [pc, #92]	; (80013e4 <HAL_SPI_MspInit+0x88>)
 8001388:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800138c:	6453      	str	r3, [r2, #68]	; 0x44
 800138e:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <HAL_SPI_MspInit+0x88>)
 8001390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001392:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001396:	613b      	str	r3, [r7, #16]
 8001398:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <HAL_SPI_MspInit+0x88>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	4a10      	ldr	r2, [pc, #64]	; (80013e4 <HAL_SPI_MspInit+0x88>)
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	6313      	str	r3, [r2, #48]	; 0x30
 80013aa:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <HAL_SPI_MspInit+0x88>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80013b6:	23e0      	movs	r3, #224	; 0xe0
 80013b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ba:	2302      	movs	r3, #2
 80013bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c2:	2303      	movs	r3, #3
 80013c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013c6:	2305      	movs	r3, #5
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ca:	f107 0314 	add.w	r3, r7, #20
 80013ce:	4619      	mov	r1, r3
 80013d0:	4805      	ldr	r0, [pc, #20]	; (80013e8 <HAL_SPI_MspInit+0x8c>)
 80013d2:	f000 fa35 	bl	8001840 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80013d6:	bf00      	nop
 80013d8:	3728      	adds	r7, #40	; 0x28
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40013000 	.word	0x40013000
 80013e4:	40023800 	.word	0x40023800
 80013e8:	40020000 	.word	0x40020000

080013ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08a      	sub	sp, #40	; 0x28
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a19      	ldr	r2, [pc, #100]	; (8001470 <HAL_UART_MspInit+0x84>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d12c      	bne.n	8001468 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	613b      	str	r3, [r7, #16]
 8001412:	4b18      	ldr	r3, [pc, #96]	; (8001474 <HAL_UART_MspInit+0x88>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001416:	4a17      	ldr	r2, [pc, #92]	; (8001474 <HAL_UART_MspInit+0x88>)
 8001418:	f043 0310 	orr.w	r3, r3, #16
 800141c:	6453      	str	r3, [r2, #68]	; 0x44
 800141e:	4b15      	ldr	r3, [pc, #84]	; (8001474 <HAL_UART_MspInit+0x88>)
 8001420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001422:	f003 0310 	and.w	r3, r3, #16
 8001426:	613b      	str	r3, [r7, #16]
 8001428:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	4b11      	ldr	r3, [pc, #68]	; (8001474 <HAL_UART_MspInit+0x88>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	4a10      	ldr	r2, [pc, #64]	; (8001474 <HAL_UART_MspInit+0x88>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	6313      	str	r3, [r2, #48]	; 0x30
 800143a:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <HAL_UART_MspInit+0x88>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001446:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800144a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144c:	2302      	movs	r3, #2
 800144e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001454:	2303      	movs	r3, #3
 8001456:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001458:	2307      	movs	r3, #7
 800145a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145c:	f107 0314 	add.w	r3, r7, #20
 8001460:	4619      	mov	r1, r3
 8001462:	4805      	ldr	r0, [pc, #20]	; (8001478 <HAL_UART_MspInit+0x8c>)
 8001464:	f000 f9ec 	bl	8001840 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001468:	bf00      	nop
 800146a:	3728      	adds	r7, #40	; 0x28
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40011000 	.word	0x40011000
 8001474:	40023800 	.word	0x40023800
 8001478:	40020000 	.word	0x40020000

0800147c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001480:	e7fe      	b.n	8001480 <NMI_Handler+0x4>

08001482 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001486:	e7fe      	b.n	8001486 <HardFault_Handler+0x4>

08001488 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800148c:	e7fe      	b.n	800148c <MemManage_Handler+0x4>

0800148e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800148e:	b480      	push	{r7}
 8001490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001492:	e7fe      	b.n	8001492 <BusFault_Handler+0x4>

08001494 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001498:	e7fe      	b.n	8001498 <UsageFault_Handler+0x4>

0800149a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800149a:	b480      	push	{r7}
 800149c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014c8:	f000 f890 	bl	80015ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014cc:	bf00      	nop
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <SystemInit+0x20>)
 80014d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014da:	4a05      	ldr	r2, [pc, #20]	; (80014f0 <SystemInit+0x20>)
 80014dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800152c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014f8:	480d      	ldr	r0, [pc, #52]	; (8001530 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014fa:	490e      	ldr	r1, [pc, #56]	; (8001534 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014fc:	4a0e      	ldr	r2, [pc, #56]	; (8001538 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001500:	e002      	b.n	8001508 <LoopCopyDataInit>

08001502 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001502:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001504:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001506:	3304      	adds	r3, #4

08001508 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001508:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800150a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800150c:	d3f9      	bcc.n	8001502 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800150e:	4a0b      	ldr	r2, [pc, #44]	; (800153c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001510:	4c0b      	ldr	r4, [pc, #44]	; (8001540 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001512:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001514:	e001      	b.n	800151a <LoopFillZerobss>

08001516 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001516:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001518:	3204      	adds	r2, #4

0800151a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800151a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800151c:	d3fb      	bcc.n	8001516 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800151e:	f7ff ffd7 	bl	80014d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001522:	f005 f92f 	bl	8006784 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001526:	f7ff fd4f 	bl	8000fc8 <main>
  bx  lr    
 800152a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800152c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001530:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001534:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001538:	08006dc8 	.word	0x08006dc8
  ldr r2, =_sbss
 800153c:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001540:	2000279c 	.word	0x2000279c

08001544 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001544:	e7fe      	b.n	8001544 <ADC_IRQHandler>
	...

08001548 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800154c:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <HAL_Init+0x40>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a0d      	ldr	r2, [pc, #52]	; (8001588 <HAL_Init+0x40>)
 8001552:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001556:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001558:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <HAL_Init+0x40>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a0a      	ldr	r2, [pc, #40]	; (8001588 <HAL_Init+0x40>)
 800155e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001562:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001564:	4b08      	ldr	r3, [pc, #32]	; (8001588 <HAL_Init+0x40>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a07      	ldr	r2, [pc, #28]	; (8001588 <HAL_Init+0x40>)
 800156a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800156e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001570:	2003      	movs	r0, #3
 8001572:	f000 f931 	bl	80017d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001576:	200f      	movs	r0, #15
 8001578:	f000 f808 	bl	800158c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800157c:	f7ff fec6 	bl	800130c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40023c00 	.word	0x40023c00

0800158c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001594:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <HAL_InitTick+0x54>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <HAL_InitTick+0x58>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	4619      	mov	r1, r3
 800159e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015aa:	4618      	mov	r0, r3
 80015ac:	f000 f93b 	bl	8001826 <HAL_SYSTICK_Config>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e00e      	b.n	80015d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2b0f      	cmp	r3, #15
 80015be:	d80a      	bhi.n	80015d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015c0:	2200      	movs	r2, #0
 80015c2:	6879      	ldr	r1, [r7, #4]
 80015c4:	f04f 30ff 	mov.w	r0, #4294967295
 80015c8:	f000 f911 	bl	80017ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015cc:	4a06      	ldr	r2, [pc, #24]	; (80015e8 <HAL_InitTick+0x5c>)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015d2:	2300      	movs	r3, #0
 80015d4:	e000      	b.n	80015d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20000004 	.word	0x20000004
 80015e4:	2000000c 	.word	0x2000000c
 80015e8:	20000008 	.word	0x20000008

080015ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015f0:	4b06      	ldr	r3, [pc, #24]	; (800160c <HAL_IncTick+0x20>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	461a      	mov	r2, r3
 80015f6:	4b06      	ldr	r3, [pc, #24]	; (8001610 <HAL_IncTick+0x24>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4413      	add	r3, r2
 80015fc:	4a04      	ldr	r2, [pc, #16]	; (8001610 <HAL_IncTick+0x24>)
 80015fe:	6013      	str	r3, [r2, #0]
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	2000000c 	.word	0x2000000c
 8001610:	2000255c 	.word	0x2000255c

08001614 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  return uwTick;
 8001618:	4b03      	ldr	r3, [pc, #12]	; (8001628 <HAL_GetTick+0x14>)
 800161a:	681b      	ldr	r3, [r3, #0]
}
 800161c:	4618      	mov	r0, r3
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	2000255c 	.word	0x2000255c

0800162c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001634:	f7ff ffee 	bl	8001614 <HAL_GetTick>
 8001638:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001644:	d005      	beq.n	8001652 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001646:	4b0a      	ldr	r3, [pc, #40]	; (8001670 <HAL_Delay+0x44>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	461a      	mov	r2, r3
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	4413      	add	r3, r2
 8001650:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001652:	bf00      	nop
 8001654:	f7ff ffde 	bl	8001614 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	429a      	cmp	r2, r3
 8001662:	d8f7      	bhi.n	8001654 <HAL_Delay+0x28>
  {
  }
}
 8001664:	bf00      	nop
 8001666:	bf00      	nop
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	2000000c 	.word	0x2000000c

08001674 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001684:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800168a:	68ba      	ldr	r2, [r7, #8]
 800168c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001690:	4013      	ands	r3, r2
 8001692:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800169c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016a6:	4a04      	ldr	r2, [pc, #16]	; (80016b8 <__NVIC_SetPriorityGrouping+0x44>)
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	60d3      	str	r3, [r2, #12]
}
 80016ac:	bf00      	nop
 80016ae:	3714      	adds	r7, #20
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016c0:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <__NVIC_GetPriorityGrouping+0x18>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	0a1b      	lsrs	r3, r3, #8
 80016c6:	f003 0307 	and.w	r3, r3, #7
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	6039      	str	r1, [r7, #0]
 80016e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	db0a      	blt.n	8001702 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	490c      	ldr	r1, [pc, #48]	; (8001724 <__NVIC_SetPriority+0x4c>)
 80016f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f6:	0112      	lsls	r2, r2, #4
 80016f8:	b2d2      	uxtb	r2, r2
 80016fa:	440b      	add	r3, r1
 80016fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001700:	e00a      	b.n	8001718 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	b2da      	uxtb	r2, r3
 8001706:	4908      	ldr	r1, [pc, #32]	; (8001728 <__NVIC_SetPriority+0x50>)
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	f003 030f 	and.w	r3, r3, #15
 800170e:	3b04      	subs	r3, #4
 8001710:	0112      	lsls	r2, r2, #4
 8001712:	b2d2      	uxtb	r2, r2
 8001714:	440b      	add	r3, r1
 8001716:	761a      	strb	r2, [r3, #24]
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	e000e100 	.word	0xe000e100
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800172c:	b480      	push	{r7}
 800172e:	b089      	sub	sp, #36	; 0x24
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f003 0307 	and.w	r3, r3, #7
 800173e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	f1c3 0307 	rsb	r3, r3, #7
 8001746:	2b04      	cmp	r3, #4
 8001748:	bf28      	it	cs
 800174a:	2304      	movcs	r3, #4
 800174c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	3304      	adds	r3, #4
 8001752:	2b06      	cmp	r3, #6
 8001754:	d902      	bls.n	800175c <NVIC_EncodePriority+0x30>
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	3b03      	subs	r3, #3
 800175a:	e000      	b.n	800175e <NVIC_EncodePriority+0x32>
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001760:	f04f 32ff 	mov.w	r2, #4294967295
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	43da      	mvns	r2, r3
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	401a      	ands	r2, r3
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001774:	f04f 31ff 	mov.w	r1, #4294967295
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	fa01 f303 	lsl.w	r3, r1, r3
 800177e:	43d9      	mvns	r1, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001784:	4313      	orrs	r3, r2
         );
}
 8001786:	4618      	mov	r0, r3
 8001788:	3724      	adds	r7, #36	; 0x24
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
	...

08001794 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3b01      	subs	r3, #1
 80017a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017a4:	d301      	bcc.n	80017aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017a6:	2301      	movs	r3, #1
 80017a8:	e00f      	b.n	80017ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017aa:	4a0a      	ldr	r2, [pc, #40]	; (80017d4 <SysTick_Config+0x40>)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	3b01      	subs	r3, #1
 80017b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017b2:	210f      	movs	r1, #15
 80017b4:	f04f 30ff 	mov.w	r0, #4294967295
 80017b8:	f7ff ff8e 	bl	80016d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017bc:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <SysTick_Config+0x40>)
 80017be:	2200      	movs	r2, #0
 80017c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017c2:	4b04      	ldr	r3, [pc, #16]	; (80017d4 <SysTick_Config+0x40>)
 80017c4:	2207      	movs	r2, #7
 80017c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	e000e010 	.word	0xe000e010

080017d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f7ff ff47 	bl	8001674 <__NVIC_SetPriorityGrouping>
}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b086      	sub	sp, #24
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	4603      	mov	r3, r0
 80017f6:	60b9      	str	r1, [r7, #8]
 80017f8:	607a      	str	r2, [r7, #4]
 80017fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001800:	f7ff ff5c 	bl	80016bc <__NVIC_GetPriorityGrouping>
 8001804:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	68b9      	ldr	r1, [r7, #8]
 800180a:	6978      	ldr	r0, [r7, #20]
 800180c:	f7ff ff8e 	bl	800172c <NVIC_EncodePriority>
 8001810:	4602      	mov	r2, r0
 8001812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001816:	4611      	mov	r1, r2
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff ff5d 	bl	80016d8 <__NVIC_SetPriority>
}
 800181e:	bf00      	nop
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff ffb0 	bl	8001794 <SysTick_Config>
 8001834:	4603      	mov	r3, r0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
	...

08001840 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001840:	b480      	push	{r7}
 8001842:	b089      	sub	sp, #36	; 0x24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800184a:	2300      	movs	r3, #0
 800184c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800184e:	2300      	movs	r3, #0
 8001850:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001852:	2300      	movs	r3, #0
 8001854:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001856:	2300      	movs	r3, #0
 8001858:	61fb      	str	r3, [r7, #28]
 800185a:	e165      	b.n	8001b28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800185c:	2201      	movs	r2, #1
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	697a      	ldr	r2, [r7, #20]
 800186c:	4013      	ands	r3, r2
 800186e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	429a      	cmp	r2, r3
 8001876:	f040 8154 	bne.w	8001b22 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f003 0303 	and.w	r3, r3, #3
 8001882:	2b01      	cmp	r3, #1
 8001884:	d005      	beq.n	8001892 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800188e:	2b02      	cmp	r3, #2
 8001890:	d130      	bne.n	80018f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	2203      	movs	r2, #3
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	43db      	mvns	r3, r3
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	4013      	ands	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	68da      	ldr	r2, [r3, #12]
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018c8:	2201      	movs	r2, #1
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	43db      	mvns	r3, r3
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	4013      	ands	r3, r2
 80018d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	091b      	lsrs	r3, r3, #4
 80018de:	f003 0201 	and.w	r2, r3, #1
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f003 0303 	and.w	r3, r3, #3
 80018fc:	2b03      	cmp	r3, #3
 80018fe:	d017      	beq.n	8001930 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	2203      	movs	r2, #3
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	43db      	mvns	r3, r3
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	4013      	ands	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	689a      	ldr	r2, [r3, #8]
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	4313      	orrs	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 0303 	and.w	r3, r3, #3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d123      	bne.n	8001984 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	08da      	lsrs	r2, r3, #3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3208      	adds	r2, #8
 8001944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001948:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	f003 0307 	and.w	r3, r3, #7
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	220f      	movs	r2, #15
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	43db      	mvns	r3, r3
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	4013      	ands	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	691a      	ldr	r2, [r3, #16]
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4313      	orrs	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	08da      	lsrs	r2, r3, #3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	3208      	adds	r2, #8
 800197e:	69b9      	ldr	r1, [r7, #24]
 8001980:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	2203      	movs	r2, #3
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	4013      	ands	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f003 0203 	and.w	r2, r3, #3
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	f000 80ae 	beq.w	8001b22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	4b5d      	ldr	r3, [pc, #372]	; (8001b40 <HAL_GPIO_Init+0x300>)
 80019cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ce:	4a5c      	ldr	r2, [pc, #368]	; (8001b40 <HAL_GPIO_Init+0x300>)
 80019d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019d4:	6453      	str	r3, [r2, #68]	; 0x44
 80019d6:	4b5a      	ldr	r3, [pc, #360]	; (8001b40 <HAL_GPIO_Init+0x300>)
 80019d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019e2:	4a58      	ldr	r2, [pc, #352]	; (8001b44 <HAL_GPIO_Init+0x304>)
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	089b      	lsrs	r3, r3, #2
 80019e8:	3302      	adds	r3, #2
 80019ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	f003 0303 	and.w	r3, r3, #3
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	220f      	movs	r2, #15
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	43db      	mvns	r3, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4013      	ands	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a4f      	ldr	r2, [pc, #316]	; (8001b48 <HAL_GPIO_Init+0x308>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d025      	beq.n	8001a5a <HAL_GPIO_Init+0x21a>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a4e      	ldr	r2, [pc, #312]	; (8001b4c <HAL_GPIO_Init+0x30c>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d01f      	beq.n	8001a56 <HAL_GPIO_Init+0x216>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a4d      	ldr	r2, [pc, #308]	; (8001b50 <HAL_GPIO_Init+0x310>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d019      	beq.n	8001a52 <HAL_GPIO_Init+0x212>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a4c      	ldr	r2, [pc, #304]	; (8001b54 <HAL_GPIO_Init+0x314>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d013      	beq.n	8001a4e <HAL_GPIO_Init+0x20e>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a4b      	ldr	r2, [pc, #300]	; (8001b58 <HAL_GPIO_Init+0x318>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d00d      	beq.n	8001a4a <HAL_GPIO_Init+0x20a>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a4a      	ldr	r2, [pc, #296]	; (8001b5c <HAL_GPIO_Init+0x31c>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d007      	beq.n	8001a46 <HAL_GPIO_Init+0x206>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a49      	ldr	r2, [pc, #292]	; (8001b60 <HAL_GPIO_Init+0x320>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d101      	bne.n	8001a42 <HAL_GPIO_Init+0x202>
 8001a3e:	2306      	movs	r3, #6
 8001a40:	e00c      	b.n	8001a5c <HAL_GPIO_Init+0x21c>
 8001a42:	2307      	movs	r3, #7
 8001a44:	e00a      	b.n	8001a5c <HAL_GPIO_Init+0x21c>
 8001a46:	2305      	movs	r3, #5
 8001a48:	e008      	b.n	8001a5c <HAL_GPIO_Init+0x21c>
 8001a4a:	2304      	movs	r3, #4
 8001a4c:	e006      	b.n	8001a5c <HAL_GPIO_Init+0x21c>
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e004      	b.n	8001a5c <HAL_GPIO_Init+0x21c>
 8001a52:	2302      	movs	r3, #2
 8001a54:	e002      	b.n	8001a5c <HAL_GPIO_Init+0x21c>
 8001a56:	2301      	movs	r3, #1
 8001a58:	e000      	b.n	8001a5c <HAL_GPIO_Init+0x21c>
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	69fa      	ldr	r2, [r7, #28]
 8001a5e:	f002 0203 	and.w	r2, r2, #3
 8001a62:	0092      	lsls	r2, r2, #2
 8001a64:	4093      	lsls	r3, r2
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a6c:	4935      	ldr	r1, [pc, #212]	; (8001b44 <HAL_GPIO_Init+0x304>)
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	089b      	lsrs	r3, r3, #2
 8001a72:	3302      	adds	r3, #2
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a7a:	4b3a      	ldr	r3, [pc, #232]	; (8001b64 <HAL_GPIO_Init+0x324>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	43db      	mvns	r3, r3
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	4013      	ands	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d003      	beq.n	8001a9e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a9e:	4a31      	ldr	r2, [pc, #196]	; (8001b64 <HAL_GPIO_Init+0x324>)
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001aa4:	4b2f      	ldr	r3, [pc, #188]	; (8001b64 <HAL_GPIO_Init+0x324>)
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	43db      	mvns	r3, r3
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d003      	beq.n	8001ac8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ac8:	4a26      	ldr	r2, [pc, #152]	; (8001b64 <HAL_GPIO_Init+0x324>)
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ace:	4b25      	ldr	r3, [pc, #148]	; (8001b64 <HAL_GPIO_Init+0x324>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4013      	ands	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d003      	beq.n	8001af2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001af2:	4a1c      	ldr	r2, [pc, #112]	; (8001b64 <HAL_GPIO_Init+0x324>)
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001af8:	4b1a      	ldr	r3, [pc, #104]	; (8001b64 <HAL_GPIO_Init+0x324>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	43db      	mvns	r3, r3
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4013      	ands	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d003      	beq.n	8001b1c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b1c:	4a11      	ldr	r2, [pc, #68]	; (8001b64 <HAL_GPIO_Init+0x324>)
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	3301      	adds	r3, #1
 8001b26:	61fb      	str	r3, [r7, #28]
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	2b0f      	cmp	r3, #15
 8001b2c:	f67f ae96 	bls.w	800185c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b30:	bf00      	nop
 8001b32:	bf00      	nop
 8001b34:	3724      	adds	r7, #36	; 0x24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40013800 	.word	0x40013800
 8001b48:	40020000 	.word	0x40020000
 8001b4c:	40020400 	.word	0x40020400
 8001b50:	40020800 	.word	0x40020800
 8001b54:	40020c00 	.word	0x40020c00
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	40021400 	.word	0x40021400
 8001b60:	40021800 	.word	0x40021800
 8001b64:	40013c00 	.word	0x40013c00

08001b68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	460b      	mov	r3, r1
 8001b72:	807b      	strh	r3, [r7, #2]
 8001b74:	4613      	mov	r3, r2
 8001b76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b78:	787b      	ldrb	r3, [r7, #1]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d003      	beq.n	8001b86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b7e:	887a      	ldrh	r2, [r7, #2]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b84:	e003      	b.n	8001b8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b86:	887b      	ldrh	r3, [r7, #2]
 8001b88:	041a      	lsls	r2, r3, #16
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	619a      	str	r2, [r3, #24]
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b084      	sub	sp, #16
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d101      	bne.n	8001bac <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e034      	b.n	8001c16 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8001bb4:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f245 5255 	movw	r2, #21845	; 0x5555
 8001bbe:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	6852      	ldr	r2, [r2, #4]
 8001bc8:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	6892      	ldr	r2, [r2, #8]
 8001bd2:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001bd4:	f7ff fd1e 	bl	8001614 <HAL_GetTick>
 8001bd8:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001bda:	e00f      	b.n	8001bfc <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001bdc:	f7ff fd1a 	bl	8001614 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b31      	cmp	r3, #49	; 0x31
 8001be8:	d908      	bls.n	8001bfc <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	f003 0303 	and.w	r3, r3, #3
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e00c      	b.n	8001c16 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	f003 0303 	and.w	r3, r3, #3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1e8      	bne.n	8001bdc <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001c12:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
	...

08001c20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d101      	bne.n	8001c34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e0cc      	b.n	8001dce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c34:	4b68      	ldr	r3, [pc, #416]	; (8001dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 030f 	and.w	r3, r3, #15
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d90c      	bls.n	8001c5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c42:	4b65      	ldr	r3, [pc, #404]	; (8001dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c44:	683a      	ldr	r2, [r7, #0]
 8001c46:	b2d2      	uxtb	r2, r2
 8001c48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c4a:	4b63      	ldr	r3, [pc, #396]	; (8001dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d001      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e0b8      	b.n	8001dce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d020      	beq.n	8001caa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0304 	and.w	r3, r3, #4
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d005      	beq.n	8001c80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c74:	4b59      	ldr	r3, [pc, #356]	; (8001ddc <HAL_RCC_ClockConfig+0x1bc>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	4a58      	ldr	r2, [pc, #352]	; (8001ddc <HAL_RCC_ClockConfig+0x1bc>)
 8001c7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c7e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0308 	and.w	r3, r3, #8
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d005      	beq.n	8001c98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c8c:	4b53      	ldr	r3, [pc, #332]	; (8001ddc <HAL_RCC_ClockConfig+0x1bc>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	4a52      	ldr	r2, [pc, #328]	; (8001ddc <HAL_RCC_ClockConfig+0x1bc>)
 8001c92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c98:	4b50      	ldr	r3, [pc, #320]	; (8001ddc <HAL_RCC_ClockConfig+0x1bc>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	494d      	ldr	r1, [pc, #308]	; (8001ddc <HAL_RCC_ClockConfig+0x1bc>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d044      	beq.n	8001d40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d107      	bne.n	8001cce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cbe:	4b47      	ldr	r3, [pc, #284]	; (8001ddc <HAL_RCC_ClockConfig+0x1bc>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d119      	bne.n	8001cfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e07f      	b.n	8001dce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d003      	beq.n	8001cde <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cda:	2b03      	cmp	r3, #3
 8001cdc:	d107      	bne.n	8001cee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cde:	4b3f      	ldr	r3, [pc, #252]	; (8001ddc <HAL_RCC_ClockConfig+0x1bc>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d109      	bne.n	8001cfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e06f      	b.n	8001dce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cee:	4b3b      	ldr	r3, [pc, #236]	; (8001ddc <HAL_RCC_ClockConfig+0x1bc>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e067      	b.n	8001dce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cfe:	4b37      	ldr	r3, [pc, #220]	; (8001ddc <HAL_RCC_ClockConfig+0x1bc>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f023 0203 	bic.w	r2, r3, #3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	4934      	ldr	r1, [pc, #208]	; (8001ddc <HAL_RCC_ClockConfig+0x1bc>)
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d10:	f7ff fc80 	bl	8001614 <HAL_GetTick>
 8001d14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d16:	e00a      	b.n	8001d2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d18:	f7ff fc7c 	bl	8001614 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e04f      	b.n	8001dce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d2e:	4b2b      	ldr	r3, [pc, #172]	; (8001ddc <HAL_RCC_ClockConfig+0x1bc>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f003 020c 	and.w	r2, r3, #12
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d1eb      	bne.n	8001d18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d40:	4b25      	ldr	r3, [pc, #148]	; (8001dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 030f 	and.w	r3, r3, #15
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d20c      	bcs.n	8001d68 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d4e:	4b22      	ldr	r3, [pc, #136]	; (8001dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	b2d2      	uxtb	r2, r2
 8001d54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d56:	4b20      	ldr	r3, [pc, #128]	; (8001dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 030f 	and.w	r3, r3, #15
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d001      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e032      	b.n	8001dce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0304 	and.w	r3, r3, #4
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d008      	beq.n	8001d86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d74:	4b19      	ldr	r3, [pc, #100]	; (8001ddc <HAL_RCC_ClockConfig+0x1bc>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	4916      	ldr	r1, [pc, #88]	; (8001ddc <HAL_RCC_ClockConfig+0x1bc>)
 8001d82:	4313      	orrs	r3, r2
 8001d84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0308 	and.w	r3, r3, #8
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d009      	beq.n	8001da6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d92:	4b12      	ldr	r3, [pc, #72]	; (8001ddc <HAL_RCC_ClockConfig+0x1bc>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	490e      	ldr	r1, [pc, #56]	; (8001ddc <HAL_RCC_ClockConfig+0x1bc>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001da6:	f000 f855 	bl	8001e54 <HAL_RCC_GetSysClockFreq>
 8001daa:	4602      	mov	r2, r0
 8001dac:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <HAL_RCC_ClockConfig+0x1bc>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	091b      	lsrs	r3, r3, #4
 8001db2:	f003 030f 	and.w	r3, r3, #15
 8001db6:	490a      	ldr	r1, [pc, #40]	; (8001de0 <HAL_RCC_ClockConfig+0x1c0>)
 8001db8:	5ccb      	ldrb	r3, [r1, r3]
 8001dba:	fa22 f303 	lsr.w	r3, r2, r3
 8001dbe:	4a09      	ldr	r2, [pc, #36]	; (8001de4 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001dc2:	4b09      	ldr	r3, [pc, #36]	; (8001de8 <HAL_RCC_ClockConfig+0x1c8>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff fbe0 	bl	800158c <HAL_InitTick>

  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40023c00 	.word	0x40023c00
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	08006960 	.word	0x08006960
 8001de4:	20000004 	.word	0x20000004
 8001de8:	20000008 	.word	0x20000008

08001dec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001df0:	4b03      	ldr	r3, [pc, #12]	; (8001e00 <HAL_RCC_GetHCLKFreq+0x14>)
 8001df2:	681b      	ldr	r3, [r3, #0]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	20000004 	.word	0x20000004

08001e04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e08:	f7ff fff0 	bl	8001dec <HAL_RCC_GetHCLKFreq>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	4b05      	ldr	r3, [pc, #20]	; (8001e24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	0a9b      	lsrs	r3, r3, #10
 8001e14:	f003 0307 	and.w	r3, r3, #7
 8001e18:	4903      	ldr	r1, [pc, #12]	; (8001e28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e1a:	5ccb      	ldrb	r3, [r1, r3]
 8001e1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40023800 	.word	0x40023800
 8001e28:	08006970 	.word	0x08006970

08001e2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e30:	f7ff ffdc 	bl	8001dec <HAL_RCC_GetHCLKFreq>
 8001e34:	4602      	mov	r2, r0
 8001e36:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	0b5b      	lsrs	r3, r3, #13
 8001e3c:	f003 0307 	and.w	r3, r3, #7
 8001e40:	4903      	ldr	r1, [pc, #12]	; (8001e50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e42:	5ccb      	ldrb	r3, [r1, r3]
 8001e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	08006970 	.word	0x08006970

08001e54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e58:	b0a6      	sub	sp, #152	; 0x98
 8001e5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8001e62:	2300      	movs	r3, #0
 8001e64:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8001e74:	2300      	movs	r3, #0
 8001e76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e7a:	4bc8      	ldr	r3, [pc, #800]	; (800219c <HAL_RCC_GetSysClockFreq+0x348>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f003 030c 	and.w	r3, r3, #12
 8001e82:	2b0c      	cmp	r3, #12
 8001e84:	f200 817e 	bhi.w	8002184 <HAL_RCC_GetSysClockFreq+0x330>
 8001e88:	a201      	add	r2, pc, #4	; (adr r2, 8001e90 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e8e:	bf00      	nop
 8001e90:	08001ec5 	.word	0x08001ec5
 8001e94:	08002185 	.word	0x08002185
 8001e98:	08002185 	.word	0x08002185
 8001e9c:	08002185 	.word	0x08002185
 8001ea0:	08001ecd 	.word	0x08001ecd
 8001ea4:	08002185 	.word	0x08002185
 8001ea8:	08002185 	.word	0x08002185
 8001eac:	08002185 	.word	0x08002185
 8001eb0:	08001ed5 	.word	0x08001ed5
 8001eb4:	08002185 	.word	0x08002185
 8001eb8:	08002185 	.word	0x08002185
 8001ebc:	08002185 	.word	0x08002185
 8001ec0:	0800203f 	.word	0x0800203f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ec4:	4bb6      	ldr	r3, [pc, #728]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001ec6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8001eca:	e15f      	b.n	800218c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ecc:	4bb5      	ldr	r3, [pc, #724]	; (80021a4 <HAL_RCC_GetSysClockFreq+0x350>)
 8001ece:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001ed2:	e15b      	b.n	800218c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ed4:	4bb1      	ldr	r3, [pc, #708]	; (800219c <HAL_RCC_GetSysClockFreq+0x348>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001edc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ee0:	4bae      	ldr	r3, [pc, #696]	; (800219c <HAL_RCC_GetSysClockFreq+0x348>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d031      	beq.n	8001f50 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eec:	4bab      	ldr	r3, [pc, #684]	; (800219c <HAL_RCC_GetSysClockFreq+0x348>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	099b      	lsrs	r3, r3, #6
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	66bb      	str	r3, [r7, #104]	; 0x68
 8001ef6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001ef8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001efa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001efe:	663b      	str	r3, [r7, #96]	; 0x60
 8001f00:	2300      	movs	r3, #0
 8001f02:	667b      	str	r3, [r7, #100]	; 0x64
 8001f04:	4ba7      	ldr	r3, [pc, #668]	; (80021a4 <HAL_RCC_GetSysClockFreq+0x350>)
 8001f06:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001f0a:	462a      	mov	r2, r5
 8001f0c:	fb03 f202 	mul.w	r2, r3, r2
 8001f10:	2300      	movs	r3, #0
 8001f12:	4621      	mov	r1, r4
 8001f14:	fb01 f303 	mul.w	r3, r1, r3
 8001f18:	4413      	add	r3, r2
 8001f1a:	4aa2      	ldr	r2, [pc, #648]	; (80021a4 <HAL_RCC_GetSysClockFreq+0x350>)
 8001f1c:	4621      	mov	r1, r4
 8001f1e:	fba1 1202 	umull	r1, r2, r1, r2
 8001f22:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001f24:	460a      	mov	r2, r1
 8001f26:	67ba      	str	r2, [r7, #120]	; 0x78
 8001f28:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001f2a:	4413      	add	r3, r2
 8001f2c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001f2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f32:	2200      	movs	r2, #0
 8001f34:	65bb      	str	r3, [r7, #88]	; 0x58
 8001f36:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001f38:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001f3c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001f40:	f7fe f968 	bl	8000214 <__aeabi_uldivmod>
 8001f44:	4602      	mov	r2, r0
 8001f46:	460b      	mov	r3, r1
 8001f48:	4613      	mov	r3, r2
 8001f4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001f4e:	e064      	b.n	800201a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f50:	4b92      	ldr	r3, [pc, #584]	; (800219c <HAL_RCC_GetSysClockFreq+0x348>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	099b      	lsrs	r3, r3, #6
 8001f56:	2200      	movs	r2, #0
 8001f58:	653b      	str	r3, [r7, #80]	; 0x50
 8001f5a:	657a      	str	r2, [r7, #84]	; 0x54
 8001f5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f62:	64bb      	str	r3, [r7, #72]	; 0x48
 8001f64:	2300      	movs	r3, #0
 8001f66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f68:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001f6c:	4622      	mov	r2, r4
 8001f6e:	462b      	mov	r3, r5
 8001f70:	f04f 0000 	mov.w	r0, #0
 8001f74:	f04f 0100 	mov.w	r1, #0
 8001f78:	0159      	lsls	r1, r3, #5
 8001f7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f7e:	0150      	lsls	r0, r2, #5
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	4621      	mov	r1, r4
 8001f86:	1a51      	subs	r1, r2, r1
 8001f88:	6139      	str	r1, [r7, #16]
 8001f8a:	4629      	mov	r1, r5
 8001f8c:	eb63 0301 	sbc.w	r3, r3, r1
 8001f90:	617b      	str	r3, [r7, #20]
 8001f92:	f04f 0200 	mov.w	r2, #0
 8001f96:	f04f 0300 	mov.w	r3, #0
 8001f9a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f9e:	4659      	mov	r1, fp
 8001fa0:	018b      	lsls	r3, r1, #6
 8001fa2:	4651      	mov	r1, sl
 8001fa4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001fa8:	4651      	mov	r1, sl
 8001faa:	018a      	lsls	r2, r1, #6
 8001fac:	4651      	mov	r1, sl
 8001fae:	ebb2 0801 	subs.w	r8, r2, r1
 8001fb2:	4659      	mov	r1, fp
 8001fb4:	eb63 0901 	sbc.w	r9, r3, r1
 8001fb8:	f04f 0200 	mov.w	r2, #0
 8001fbc:	f04f 0300 	mov.w	r3, #0
 8001fc0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001fc4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001fc8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001fcc:	4690      	mov	r8, r2
 8001fce:	4699      	mov	r9, r3
 8001fd0:	4623      	mov	r3, r4
 8001fd2:	eb18 0303 	adds.w	r3, r8, r3
 8001fd6:	60bb      	str	r3, [r7, #8]
 8001fd8:	462b      	mov	r3, r5
 8001fda:	eb49 0303 	adc.w	r3, r9, r3
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	f04f 0200 	mov.w	r2, #0
 8001fe4:	f04f 0300 	mov.w	r3, #0
 8001fe8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001fec:	4629      	mov	r1, r5
 8001fee:	028b      	lsls	r3, r1, #10
 8001ff0:	4621      	mov	r1, r4
 8001ff2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ff6:	4621      	mov	r1, r4
 8001ff8:	028a      	lsls	r2, r1, #10
 8001ffa:	4610      	mov	r0, r2
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002002:	2200      	movs	r2, #0
 8002004:	643b      	str	r3, [r7, #64]	; 0x40
 8002006:	647a      	str	r2, [r7, #68]	; 0x44
 8002008:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800200c:	f7fe f902 	bl	8000214 <__aeabi_uldivmod>
 8002010:	4602      	mov	r2, r0
 8002012:	460b      	mov	r3, r1
 8002014:	4613      	mov	r3, r2
 8002016:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800201a:	4b60      	ldr	r3, [pc, #384]	; (800219c <HAL_RCC_GetSysClockFreq+0x348>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	0c1b      	lsrs	r3, r3, #16
 8002020:	f003 0303 	and.w	r3, r3, #3
 8002024:	3301      	adds	r3, #1
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 800202c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002030:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002034:	fbb2 f3f3 	udiv	r3, r2, r3
 8002038:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800203c:	e0a6      	b.n	800218c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800203e:	4b57      	ldr	r3, [pc, #348]	; (800219c <HAL_RCC_GetSysClockFreq+0x348>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002046:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800204a:	4b54      	ldr	r3, [pc, #336]	; (800219c <HAL_RCC_GetSysClockFreq+0x348>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d02a      	beq.n	80020ac <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002056:	4b51      	ldr	r3, [pc, #324]	; (800219c <HAL_RCC_GetSysClockFreq+0x348>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	099b      	lsrs	r3, r3, #6
 800205c:	2200      	movs	r2, #0
 800205e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002060:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002064:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002068:	2100      	movs	r1, #0
 800206a:	4b4e      	ldr	r3, [pc, #312]	; (80021a4 <HAL_RCC_GetSysClockFreq+0x350>)
 800206c:	fb03 f201 	mul.w	r2, r3, r1
 8002070:	2300      	movs	r3, #0
 8002072:	fb00 f303 	mul.w	r3, r0, r3
 8002076:	4413      	add	r3, r2
 8002078:	4a4a      	ldr	r2, [pc, #296]	; (80021a4 <HAL_RCC_GetSysClockFreq+0x350>)
 800207a:	fba0 1202 	umull	r1, r2, r0, r2
 800207e:	677a      	str	r2, [r7, #116]	; 0x74
 8002080:	460a      	mov	r2, r1
 8002082:	673a      	str	r2, [r7, #112]	; 0x70
 8002084:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002086:	4413      	add	r3, r2
 8002088:	677b      	str	r3, [r7, #116]	; 0x74
 800208a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800208e:	2200      	movs	r2, #0
 8002090:	633b      	str	r3, [r7, #48]	; 0x30
 8002092:	637a      	str	r2, [r7, #52]	; 0x34
 8002094:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002098:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800209c:	f7fe f8ba 	bl	8000214 <__aeabi_uldivmod>
 80020a0:	4602      	mov	r2, r0
 80020a2:	460b      	mov	r3, r1
 80020a4:	4613      	mov	r3, r2
 80020a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80020aa:	e05b      	b.n	8002164 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020ac:	4b3b      	ldr	r3, [pc, #236]	; (800219c <HAL_RCC_GetSysClockFreq+0x348>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	099b      	lsrs	r3, r3, #6
 80020b2:	2200      	movs	r2, #0
 80020b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80020b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80020b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020be:	623b      	str	r3, [r7, #32]
 80020c0:	2300      	movs	r3, #0
 80020c2:	627b      	str	r3, [r7, #36]	; 0x24
 80020c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80020c8:	4642      	mov	r2, r8
 80020ca:	464b      	mov	r3, r9
 80020cc:	f04f 0000 	mov.w	r0, #0
 80020d0:	f04f 0100 	mov.w	r1, #0
 80020d4:	0159      	lsls	r1, r3, #5
 80020d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020da:	0150      	lsls	r0, r2, #5
 80020dc:	4602      	mov	r2, r0
 80020de:	460b      	mov	r3, r1
 80020e0:	4641      	mov	r1, r8
 80020e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80020e6:	4649      	mov	r1, r9
 80020e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80020ec:	f04f 0200 	mov.w	r2, #0
 80020f0:	f04f 0300 	mov.w	r3, #0
 80020f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80020f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80020fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002100:	ebb2 040a 	subs.w	r4, r2, sl
 8002104:	eb63 050b 	sbc.w	r5, r3, fp
 8002108:	f04f 0200 	mov.w	r2, #0
 800210c:	f04f 0300 	mov.w	r3, #0
 8002110:	00eb      	lsls	r3, r5, #3
 8002112:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002116:	00e2      	lsls	r2, r4, #3
 8002118:	4614      	mov	r4, r2
 800211a:	461d      	mov	r5, r3
 800211c:	4643      	mov	r3, r8
 800211e:	18e3      	adds	r3, r4, r3
 8002120:	603b      	str	r3, [r7, #0]
 8002122:	464b      	mov	r3, r9
 8002124:	eb45 0303 	adc.w	r3, r5, r3
 8002128:	607b      	str	r3, [r7, #4]
 800212a:	f04f 0200 	mov.w	r2, #0
 800212e:	f04f 0300 	mov.w	r3, #0
 8002132:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002136:	4629      	mov	r1, r5
 8002138:	028b      	lsls	r3, r1, #10
 800213a:	4621      	mov	r1, r4
 800213c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002140:	4621      	mov	r1, r4
 8002142:	028a      	lsls	r2, r1, #10
 8002144:	4610      	mov	r0, r2
 8002146:	4619      	mov	r1, r3
 8002148:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800214c:	2200      	movs	r2, #0
 800214e:	61bb      	str	r3, [r7, #24]
 8002150:	61fa      	str	r2, [r7, #28]
 8002152:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002156:	f7fe f85d 	bl	8000214 <__aeabi_uldivmod>
 800215a:	4602      	mov	r2, r0
 800215c:	460b      	mov	r3, r1
 800215e:	4613      	mov	r3, r2
 8002160:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002164:	4b0d      	ldr	r3, [pc, #52]	; (800219c <HAL_RCC_GetSysClockFreq+0x348>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	0f1b      	lsrs	r3, r3, #28
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8002172:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002176:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800217a:	fbb2 f3f3 	udiv	r3, r2, r3
 800217e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002182:	e003      	b.n	800218c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002184:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002186:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800218a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800218c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8002190:	4618      	mov	r0, r3
 8002192:	3798      	adds	r7, #152	; 0x98
 8002194:	46bd      	mov	sp, r7
 8002196:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800219a:	bf00      	nop
 800219c:	40023800 	.word	0x40023800
 80021a0:	00f42400 	.word	0x00f42400
 80021a4:	017d7840 	.word	0x017d7840

080021a8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e28d      	b.n	80026d6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f000 8083 	beq.w	80022ce <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80021c8:	4b94      	ldr	r3, [pc, #592]	; (800241c <HAL_RCC_OscConfig+0x274>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f003 030c 	and.w	r3, r3, #12
 80021d0:	2b04      	cmp	r3, #4
 80021d2:	d019      	beq.n	8002208 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80021d4:	4b91      	ldr	r3, [pc, #580]	; (800241c <HAL_RCC_OscConfig+0x274>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80021dc:	2b08      	cmp	r3, #8
 80021de:	d106      	bne.n	80021ee <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80021e0:	4b8e      	ldr	r3, [pc, #568]	; (800241c <HAL_RCC_OscConfig+0x274>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021ec:	d00c      	beq.n	8002208 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021ee:	4b8b      	ldr	r3, [pc, #556]	; (800241c <HAL_RCC_OscConfig+0x274>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80021f6:	2b0c      	cmp	r3, #12
 80021f8:	d112      	bne.n	8002220 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021fa:	4b88      	ldr	r3, [pc, #544]	; (800241c <HAL_RCC_OscConfig+0x274>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002202:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002206:	d10b      	bne.n	8002220 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002208:	4b84      	ldr	r3, [pc, #528]	; (800241c <HAL_RCC_OscConfig+0x274>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d05b      	beq.n	80022cc <HAL_RCC_OscConfig+0x124>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d157      	bne.n	80022cc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e25a      	b.n	80026d6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002228:	d106      	bne.n	8002238 <HAL_RCC_OscConfig+0x90>
 800222a:	4b7c      	ldr	r3, [pc, #496]	; (800241c <HAL_RCC_OscConfig+0x274>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a7b      	ldr	r2, [pc, #492]	; (800241c <HAL_RCC_OscConfig+0x274>)
 8002230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002234:	6013      	str	r3, [r2, #0]
 8002236:	e01d      	b.n	8002274 <HAL_RCC_OscConfig+0xcc>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002240:	d10c      	bne.n	800225c <HAL_RCC_OscConfig+0xb4>
 8002242:	4b76      	ldr	r3, [pc, #472]	; (800241c <HAL_RCC_OscConfig+0x274>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a75      	ldr	r2, [pc, #468]	; (800241c <HAL_RCC_OscConfig+0x274>)
 8002248:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800224c:	6013      	str	r3, [r2, #0]
 800224e:	4b73      	ldr	r3, [pc, #460]	; (800241c <HAL_RCC_OscConfig+0x274>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a72      	ldr	r2, [pc, #456]	; (800241c <HAL_RCC_OscConfig+0x274>)
 8002254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002258:	6013      	str	r3, [r2, #0]
 800225a:	e00b      	b.n	8002274 <HAL_RCC_OscConfig+0xcc>
 800225c:	4b6f      	ldr	r3, [pc, #444]	; (800241c <HAL_RCC_OscConfig+0x274>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a6e      	ldr	r2, [pc, #440]	; (800241c <HAL_RCC_OscConfig+0x274>)
 8002262:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002266:	6013      	str	r3, [r2, #0]
 8002268:	4b6c      	ldr	r3, [pc, #432]	; (800241c <HAL_RCC_OscConfig+0x274>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a6b      	ldr	r2, [pc, #428]	; (800241c <HAL_RCC_OscConfig+0x274>)
 800226e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002272:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d013      	beq.n	80022a4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227c:	f7ff f9ca 	bl	8001614 <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002284:	f7ff f9c6 	bl	8001614 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b64      	cmp	r3, #100	; 0x64
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e21f      	b.n	80026d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002296:	4b61      	ldr	r3, [pc, #388]	; (800241c <HAL_RCC_OscConfig+0x274>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d0f0      	beq.n	8002284 <HAL_RCC_OscConfig+0xdc>
 80022a2:	e014      	b.n	80022ce <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a4:	f7ff f9b6 	bl	8001614 <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022ac:	f7ff f9b2 	bl	8001614 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b64      	cmp	r3, #100	; 0x64
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e20b      	b.n	80026d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022be:	4b57      	ldr	r3, [pc, #348]	; (800241c <HAL_RCC_OscConfig+0x274>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1f0      	bne.n	80022ac <HAL_RCC_OscConfig+0x104>
 80022ca:	e000      	b.n	80022ce <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d06f      	beq.n	80023ba <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80022da:	4b50      	ldr	r3, [pc, #320]	; (800241c <HAL_RCC_OscConfig+0x274>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f003 030c 	and.w	r3, r3, #12
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d017      	beq.n	8002316 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80022e6:	4b4d      	ldr	r3, [pc, #308]	; (800241c <HAL_RCC_OscConfig+0x274>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80022ee:	2b08      	cmp	r3, #8
 80022f0:	d105      	bne.n	80022fe <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80022f2:	4b4a      	ldr	r3, [pc, #296]	; (800241c <HAL_RCC_OscConfig+0x274>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00b      	beq.n	8002316 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022fe:	4b47      	ldr	r3, [pc, #284]	; (800241c <HAL_RCC_OscConfig+0x274>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002306:	2b0c      	cmp	r3, #12
 8002308:	d11c      	bne.n	8002344 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800230a:	4b44      	ldr	r3, [pc, #272]	; (800241c <HAL_RCC_OscConfig+0x274>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d116      	bne.n	8002344 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002316:	4b41      	ldr	r3, [pc, #260]	; (800241c <HAL_RCC_OscConfig+0x274>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d005      	beq.n	800232e <HAL_RCC_OscConfig+0x186>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d001      	beq.n	800232e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e1d3      	b.n	80026d6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800232e:	4b3b      	ldr	r3, [pc, #236]	; (800241c <HAL_RCC_OscConfig+0x274>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	4937      	ldr	r1, [pc, #220]	; (800241c <HAL_RCC_OscConfig+0x274>)
 800233e:	4313      	orrs	r3, r2
 8002340:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002342:	e03a      	b.n	80023ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d020      	beq.n	800238e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800234c:	4b34      	ldr	r3, [pc, #208]	; (8002420 <HAL_RCC_OscConfig+0x278>)
 800234e:	2201      	movs	r2, #1
 8002350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002352:	f7ff f95f 	bl	8001614 <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002358:	e008      	b.n	800236c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800235a:	f7ff f95b 	bl	8001614 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e1b4      	b.n	80026d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800236c:	4b2b      	ldr	r3, [pc, #172]	; (800241c <HAL_RCC_OscConfig+0x274>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d0f0      	beq.n	800235a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002378:	4b28      	ldr	r3, [pc, #160]	; (800241c <HAL_RCC_OscConfig+0x274>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	4925      	ldr	r1, [pc, #148]	; (800241c <HAL_RCC_OscConfig+0x274>)
 8002388:	4313      	orrs	r3, r2
 800238a:	600b      	str	r3, [r1, #0]
 800238c:	e015      	b.n	80023ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800238e:	4b24      	ldr	r3, [pc, #144]	; (8002420 <HAL_RCC_OscConfig+0x278>)
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002394:	f7ff f93e 	bl	8001614 <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800239c:	f7ff f93a 	bl	8001614 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e193      	b.n	80026d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ae:	4b1b      	ldr	r3, [pc, #108]	; (800241c <HAL_RCC_OscConfig+0x274>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1f0      	bne.n	800239c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d036      	beq.n	8002434 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d016      	beq.n	80023fc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ce:	4b15      	ldr	r3, [pc, #84]	; (8002424 <HAL_RCC_OscConfig+0x27c>)
 80023d0:	2201      	movs	r2, #1
 80023d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d4:	f7ff f91e 	bl	8001614 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023dc:	f7ff f91a 	bl	8001614 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e173      	b.n	80026d6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ee:	4b0b      	ldr	r3, [pc, #44]	; (800241c <HAL_RCC_OscConfig+0x274>)
 80023f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d0f0      	beq.n	80023dc <HAL_RCC_OscConfig+0x234>
 80023fa:	e01b      	b.n	8002434 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023fc:	4b09      	ldr	r3, [pc, #36]	; (8002424 <HAL_RCC_OscConfig+0x27c>)
 80023fe:	2200      	movs	r2, #0
 8002400:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002402:	f7ff f907 	bl	8001614 <HAL_GetTick>
 8002406:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002408:	e00e      	b.n	8002428 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800240a:	f7ff f903 	bl	8001614 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b02      	cmp	r3, #2
 8002416:	d907      	bls.n	8002428 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e15c      	b.n	80026d6 <HAL_RCC_OscConfig+0x52e>
 800241c:	40023800 	.word	0x40023800
 8002420:	42470000 	.word	0x42470000
 8002424:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002428:	4b8a      	ldr	r3, [pc, #552]	; (8002654 <HAL_RCC_OscConfig+0x4ac>)
 800242a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d1ea      	bne.n	800240a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	2b00      	cmp	r3, #0
 800243e:	f000 8097 	beq.w	8002570 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002442:	2300      	movs	r3, #0
 8002444:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002446:	4b83      	ldr	r3, [pc, #524]	; (8002654 <HAL_RCC_OscConfig+0x4ac>)
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d10f      	bne.n	8002472 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002452:	2300      	movs	r3, #0
 8002454:	60bb      	str	r3, [r7, #8]
 8002456:	4b7f      	ldr	r3, [pc, #508]	; (8002654 <HAL_RCC_OscConfig+0x4ac>)
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	4a7e      	ldr	r2, [pc, #504]	; (8002654 <HAL_RCC_OscConfig+0x4ac>)
 800245c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002460:	6413      	str	r3, [r2, #64]	; 0x40
 8002462:	4b7c      	ldr	r3, [pc, #496]	; (8002654 <HAL_RCC_OscConfig+0x4ac>)
 8002464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246a:	60bb      	str	r3, [r7, #8]
 800246c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800246e:	2301      	movs	r3, #1
 8002470:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002472:	4b79      	ldr	r3, [pc, #484]	; (8002658 <HAL_RCC_OscConfig+0x4b0>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247a:	2b00      	cmp	r3, #0
 800247c:	d118      	bne.n	80024b0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800247e:	4b76      	ldr	r3, [pc, #472]	; (8002658 <HAL_RCC_OscConfig+0x4b0>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a75      	ldr	r2, [pc, #468]	; (8002658 <HAL_RCC_OscConfig+0x4b0>)
 8002484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002488:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800248a:	f7ff f8c3 	bl	8001614 <HAL_GetTick>
 800248e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002490:	e008      	b.n	80024a4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002492:	f7ff f8bf 	bl	8001614 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e118      	b.n	80026d6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a4:	4b6c      	ldr	r3, [pc, #432]	; (8002658 <HAL_RCC_OscConfig+0x4b0>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d0f0      	beq.n	8002492 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d106      	bne.n	80024c6 <HAL_RCC_OscConfig+0x31e>
 80024b8:	4b66      	ldr	r3, [pc, #408]	; (8002654 <HAL_RCC_OscConfig+0x4ac>)
 80024ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024bc:	4a65      	ldr	r2, [pc, #404]	; (8002654 <HAL_RCC_OscConfig+0x4ac>)
 80024be:	f043 0301 	orr.w	r3, r3, #1
 80024c2:	6713      	str	r3, [r2, #112]	; 0x70
 80024c4:	e01c      	b.n	8002500 <HAL_RCC_OscConfig+0x358>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	2b05      	cmp	r3, #5
 80024cc:	d10c      	bne.n	80024e8 <HAL_RCC_OscConfig+0x340>
 80024ce:	4b61      	ldr	r3, [pc, #388]	; (8002654 <HAL_RCC_OscConfig+0x4ac>)
 80024d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d2:	4a60      	ldr	r2, [pc, #384]	; (8002654 <HAL_RCC_OscConfig+0x4ac>)
 80024d4:	f043 0304 	orr.w	r3, r3, #4
 80024d8:	6713      	str	r3, [r2, #112]	; 0x70
 80024da:	4b5e      	ldr	r3, [pc, #376]	; (8002654 <HAL_RCC_OscConfig+0x4ac>)
 80024dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024de:	4a5d      	ldr	r2, [pc, #372]	; (8002654 <HAL_RCC_OscConfig+0x4ac>)
 80024e0:	f043 0301 	orr.w	r3, r3, #1
 80024e4:	6713      	str	r3, [r2, #112]	; 0x70
 80024e6:	e00b      	b.n	8002500 <HAL_RCC_OscConfig+0x358>
 80024e8:	4b5a      	ldr	r3, [pc, #360]	; (8002654 <HAL_RCC_OscConfig+0x4ac>)
 80024ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ec:	4a59      	ldr	r2, [pc, #356]	; (8002654 <HAL_RCC_OscConfig+0x4ac>)
 80024ee:	f023 0301 	bic.w	r3, r3, #1
 80024f2:	6713      	str	r3, [r2, #112]	; 0x70
 80024f4:	4b57      	ldr	r3, [pc, #348]	; (8002654 <HAL_RCC_OscConfig+0x4ac>)
 80024f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f8:	4a56      	ldr	r2, [pc, #344]	; (8002654 <HAL_RCC_OscConfig+0x4ac>)
 80024fa:	f023 0304 	bic.w	r3, r3, #4
 80024fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d015      	beq.n	8002534 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002508:	f7ff f884 	bl	8001614 <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800250e:	e00a      	b.n	8002526 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002510:	f7ff f880 	bl	8001614 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	f241 3288 	movw	r2, #5000	; 0x1388
 800251e:	4293      	cmp	r3, r2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e0d7      	b.n	80026d6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002526:	4b4b      	ldr	r3, [pc, #300]	; (8002654 <HAL_RCC_OscConfig+0x4ac>)
 8002528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d0ee      	beq.n	8002510 <HAL_RCC_OscConfig+0x368>
 8002532:	e014      	b.n	800255e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002534:	f7ff f86e 	bl	8001614 <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800253a:	e00a      	b.n	8002552 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800253c:	f7ff f86a 	bl	8001614 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	f241 3288 	movw	r2, #5000	; 0x1388
 800254a:	4293      	cmp	r3, r2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e0c1      	b.n	80026d6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002552:	4b40      	ldr	r3, [pc, #256]	; (8002654 <HAL_RCC_OscConfig+0x4ac>)
 8002554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1ee      	bne.n	800253c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800255e:	7dfb      	ldrb	r3, [r7, #23]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d105      	bne.n	8002570 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002564:	4b3b      	ldr	r3, [pc, #236]	; (8002654 <HAL_RCC_OscConfig+0x4ac>)
 8002566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002568:	4a3a      	ldr	r2, [pc, #232]	; (8002654 <HAL_RCC_OscConfig+0x4ac>)
 800256a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800256e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	2b00      	cmp	r3, #0
 8002576:	f000 80ad 	beq.w	80026d4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800257a:	4b36      	ldr	r3, [pc, #216]	; (8002654 <HAL_RCC_OscConfig+0x4ac>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 030c 	and.w	r3, r3, #12
 8002582:	2b08      	cmp	r3, #8
 8002584:	d060      	beq.n	8002648 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	2b02      	cmp	r3, #2
 800258c:	d145      	bne.n	800261a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800258e:	4b33      	ldr	r3, [pc, #204]	; (800265c <HAL_RCC_OscConfig+0x4b4>)
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002594:	f7ff f83e 	bl	8001614 <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800259c:	f7ff f83a 	bl	8001614 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e093      	b.n	80026d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ae:	4b29      	ldr	r3, [pc, #164]	; (8002654 <HAL_RCC_OscConfig+0x4ac>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1f0      	bne.n	800259c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	69da      	ldr	r2, [r3, #28]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a1b      	ldr	r3, [r3, #32]
 80025c2:	431a      	orrs	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c8:	019b      	lsls	r3, r3, #6
 80025ca:	431a      	orrs	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d0:	085b      	lsrs	r3, r3, #1
 80025d2:	3b01      	subs	r3, #1
 80025d4:	041b      	lsls	r3, r3, #16
 80025d6:	431a      	orrs	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025dc:	061b      	lsls	r3, r3, #24
 80025de:	431a      	orrs	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e4:	071b      	lsls	r3, r3, #28
 80025e6:	491b      	ldr	r1, [pc, #108]	; (8002654 <HAL_RCC_OscConfig+0x4ac>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025ec:	4b1b      	ldr	r3, [pc, #108]	; (800265c <HAL_RCC_OscConfig+0x4b4>)
 80025ee:	2201      	movs	r2, #1
 80025f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f2:	f7ff f80f 	bl	8001614 <HAL_GetTick>
 80025f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025f8:	e008      	b.n	800260c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025fa:	f7ff f80b 	bl	8001614 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d901      	bls.n	800260c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e064      	b.n	80026d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800260c:	4b11      	ldr	r3, [pc, #68]	; (8002654 <HAL_RCC_OscConfig+0x4ac>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d0f0      	beq.n	80025fa <HAL_RCC_OscConfig+0x452>
 8002618:	e05c      	b.n	80026d4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800261a:	4b10      	ldr	r3, [pc, #64]	; (800265c <HAL_RCC_OscConfig+0x4b4>)
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002620:	f7fe fff8 	bl	8001614 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002628:	f7fe fff4 	bl	8001614 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e04d      	b.n	80026d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800263a:	4b06      	ldr	r3, [pc, #24]	; (8002654 <HAL_RCC_OscConfig+0x4ac>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1f0      	bne.n	8002628 <HAL_RCC_OscConfig+0x480>
 8002646:	e045      	b.n	80026d4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d107      	bne.n	8002660 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e040      	b.n	80026d6 <HAL_RCC_OscConfig+0x52e>
 8002654:	40023800 	.word	0x40023800
 8002658:	40007000 	.word	0x40007000
 800265c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002660:	4b1f      	ldr	r3, [pc, #124]	; (80026e0 <HAL_RCC_OscConfig+0x538>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d030      	beq.n	80026d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002678:	429a      	cmp	r2, r3
 800267a:	d129      	bne.n	80026d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002686:	429a      	cmp	r2, r3
 8002688:	d122      	bne.n	80026d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002690:	4013      	ands	r3, r2
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002696:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002698:	4293      	cmp	r3, r2
 800269a:	d119      	bne.n	80026d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a6:	085b      	lsrs	r3, r3, #1
 80026a8:	3b01      	subs	r3, #1
 80026aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d10f      	bne.n	80026d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026bc:	429a      	cmp	r2, r3
 80026be:	d107      	bne.n	80026d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ca:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d001      	beq.n	80026d4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e000      	b.n	80026d6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3718      	adds	r7, #24
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	40023800 	.word	0x40023800

080026e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e07b      	b.n	80027ee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d108      	bne.n	8002710 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002706:	d009      	beq.n	800271c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	61da      	str	r2, [r3, #28]
 800270e:	e005      	b.n	800271c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d106      	bne.n	800273c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7fe fe10 	bl	800135c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2202      	movs	r2, #2
 8002740:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002752:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002764:	431a      	orrs	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800276e:	431a      	orrs	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	431a      	orrs	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	431a      	orrs	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800278c:	431a      	orrs	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002796:	431a      	orrs	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a1b      	ldr	r3, [r3, #32]
 800279c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027a0:	ea42 0103 	orr.w	r1, r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	430a      	orrs	r2, r1
 80027b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	0c1b      	lsrs	r3, r3, #16
 80027ba:	f003 0104 	and.w	r1, r3, #4
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c2:	f003 0210 	and.w	r2, r3, #16
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	69da      	ldr	r2, [r3, #28]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b088      	sub	sp, #32
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	60f8      	str	r0, [r7, #12]
 80027fe:	60b9      	str	r1, [r7, #8]
 8002800:	603b      	str	r3, [r7, #0]
 8002802:	4613      	mov	r3, r2
 8002804:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002806:	2300      	movs	r3, #0
 8002808:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002810:	2b01      	cmp	r3, #1
 8002812:	d101      	bne.n	8002818 <HAL_SPI_Transmit+0x22>
 8002814:	2302      	movs	r3, #2
 8002816:	e126      	b.n	8002a66 <HAL_SPI_Transmit+0x270>
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002820:	f7fe fef8 	bl	8001614 <HAL_GetTick>
 8002824:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002826:	88fb      	ldrh	r3, [r7, #6]
 8002828:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b01      	cmp	r3, #1
 8002834:	d002      	beq.n	800283c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002836:	2302      	movs	r3, #2
 8002838:	77fb      	strb	r3, [r7, #31]
    goto error;
 800283a:	e10b      	b.n	8002a54 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d002      	beq.n	8002848 <HAL_SPI_Transmit+0x52>
 8002842:	88fb      	ldrh	r3, [r7, #6]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d102      	bne.n	800284e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800284c:	e102      	b.n	8002a54 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2203      	movs	r2, #3
 8002852:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2200      	movs	r2, #0
 800285a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	68ba      	ldr	r2, [r7, #8]
 8002860:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	88fa      	ldrh	r2, [r7, #6]
 8002866:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	88fa      	ldrh	r2, [r7, #6]
 800286c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2200      	movs	r2, #0
 800287e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2200      	movs	r2, #0
 800288a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002894:	d10f      	bne.n	80028b6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028c0:	2b40      	cmp	r3, #64	; 0x40
 80028c2:	d007      	beq.n	80028d4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028dc:	d14b      	bne.n	8002976 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d002      	beq.n	80028ec <HAL_SPI_Transmit+0xf6>
 80028e6:	8afb      	ldrh	r3, [r7, #22]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d13e      	bne.n	800296a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f0:	881a      	ldrh	r2, [r3, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fc:	1c9a      	adds	r2, r3, #2
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002906:	b29b      	uxth	r3, r3
 8002908:	3b01      	subs	r3, #1
 800290a:	b29a      	uxth	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002910:	e02b      	b.n	800296a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b02      	cmp	r3, #2
 800291e:	d112      	bne.n	8002946 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002924:	881a      	ldrh	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002930:	1c9a      	adds	r2, r3, #2
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800293a:	b29b      	uxth	r3, r3
 800293c:	3b01      	subs	r3, #1
 800293e:	b29a      	uxth	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	86da      	strh	r2, [r3, #54]	; 0x36
 8002944:	e011      	b.n	800296a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002946:	f7fe fe65 	bl	8001614 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	429a      	cmp	r2, r3
 8002954:	d803      	bhi.n	800295e <HAL_SPI_Transmit+0x168>
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800295c:	d102      	bne.n	8002964 <HAL_SPI_Transmit+0x16e>
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d102      	bne.n	800296a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002968:	e074      	b.n	8002a54 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800296e:	b29b      	uxth	r3, r3
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1ce      	bne.n	8002912 <HAL_SPI_Transmit+0x11c>
 8002974:	e04c      	b.n	8002a10 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d002      	beq.n	8002984 <HAL_SPI_Transmit+0x18e>
 800297e:	8afb      	ldrh	r3, [r7, #22]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d140      	bne.n	8002a06 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	330c      	adds	r3, #12
 800298e:	7812      	ldrb	r2, [r2, #0]
 8002990:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002996:	1c5a      	adds	r2, r3, #1
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	3b01      	subs	r3, #1
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80029aa:	e02c      	b.n	8002a06 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d113      	bne.n	80029e2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	330c      	adds	r3, #12
 80029c4:	7812      	ldrb	r2, [r2, #0]
 80029c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029cc:	1c5a      	adds	r2, r3, #1
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	3b01      	subs	r3, #1
 80029da:	b29a      	uxth	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	86da      	strh	r2, [r3, #54]	; 0x36
 80029e0:	e011      	b.n	8002a06 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029e2:	f7fe fe17 	bl	8001614 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d803      	bhi.n	80029fa <HAL_SPI_Transmit+0x204>
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f8:	d102      	bne.n	8002a00 <HAL_SPI_Transmit+0x20a>
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d102      	bne.n	8002a06 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002a04:	e026      	b.n	8002a54 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1cd      	bne.n	80029ac <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	6839      	ldr	r1, [r7, #0]
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	f000 fa55 	bl	8002ec4 <SPI_EndRxTxTransaction>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d002      	beq.n	8002a26 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2220      	movs	r2, #32
 8002a24:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10a      	bne.n	8002a44 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a2e:	2300      	movs	r3, #0
 8002a30:	613b      	str	r3, [r7, #16]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	613b      	str	r3, [r7, #16]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	613b      	str	r3, [r7, #16]
 8002a42:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d002      	beq.n	8002a52 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	77fb      	strb	r3, [r7, #31]
 8002a50:	e000      	b.n	8002a54 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002a52:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002a64:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3720      	adds	r7, #32
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b08c      	sub	sp, #48	; 0x30
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	60f8      	str	r0, [r7, #12]
 8002a76:	60b9      	str	r1, [r7, #8]
 8002a78:	607a      	str	r2, [r7, #4]
 8002a7a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002a80:	2300      	movs	r3, #0
 8002a82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d101      	bne.n	8002a94 <HAL_SPI_TransmitReceive+0x26>
 8002a90:	2302      	movs	r3, #2
 8002a92:	e18a      	b.n	8002daa <HAL_SPI_TransmitReceive+0x33c>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a9c:	f7fe fdba 	bl	8001614 <HAL_GetTick>
 8002aa0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002aa8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002ab2:	887b      	ldrh	r3, [r7, #2]
 8002ab4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002ab6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d00f      	beq.n	8002ade <HAL_SPI_TransmitReceive+0x70>
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ac4:	d107      	bne.n	8002ad6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d103      	bne.n	8002ad6 <HAL_SPI_TransmitReceive+0x68>
 8002ace:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ad2:	2b04      	cmp	r3, #4
 8002ad4:	d003      	beq.n	8002ade <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002adc:	e15b      	b.n	8002d96 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d005      	beq.n	8002af0 <HAL_SPI_TransmitReceive+0x82>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d002      	beq.n	8002af0 <HAL_SPI_TransmitReceive+0x82>
 8002aea:	887b      	ldrh	r3, [r7, #2]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d103      	bne.n	8002af8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002af6:	e14e      	b.n	8002d96 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	2b04      	cmp	r3, #4
 8002b02:	d003      	beq.n	8002b0c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2205      	movs	r2, #5
 8002b08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	887a      	ldrh	r2, [r7, #2]
 8002b1c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	887a      	ldrh	r2, [r7, #2]
 8002b22:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	68ba      	ldr	r2, [r7, #8]
 8002b28:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	887a      	ldrh	r2, [r7, #2]
 8002b2e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	887a      	ldrh	r2, [r7, #2]
 8002b34:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b4c:	2b40      	cmp	r3, #64	; 0x40
 8002b4e:	d007      	beq.n	8002b60 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b5e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b68:	d178      	bne.n	8002c5c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d002      	beq.n	8002b78 <HAL_SPI_TransmitReceive+0x10a>
 8002b72:	8b7b      	ldrh	r3, [r7, #26]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d166      	bne.n	8002c46 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7c:	881a      	ldrh	r2, [r3, #0]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b88:	1c9a      	adds	r2, r3, #2
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	3b01      	subs	r3, #1
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b9c:	e053      	b.n	8002c46 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d11b      	bne.n	8002be4 <HAL_SPI_TransmitReceive+0x176>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d016      	beq.n	8002be4 <HAL_SPI_TransmitReceive+0x176>
 8002bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d113      	bne.n	8002be4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc0:	881a      	ldrh	r2, [r3, #0]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bcc:	1c9a      	adds	r2, r3, #2
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002be0:	2300      	movs	r3, #0
 8002be2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d119      	bne.n	8002c26 <HAL_SPI_TransmitReceive+0x1b8>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d014      	beq.n	8002c26 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68da      	ldr	r2, [r3, #12]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c06:	b292      	uxth	r2, r2
 8002c08:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0e:	1c9a      	adds	r2, r3, #2
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c22:	2301      	movs	r3, #1
 8002c24:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002c26:	f7fe fcf5 	bl	8001614 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d807      	bhi.n	8002c46 <HAL_SPI_TransmitReceive+0x1d8>
 8002c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c3c:	d003      	beq.n	8002c46 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002c44:	e0a7      	b.n	8002d96 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1a6      	bne.n	8002b9e <HAL_SPI_TransmitReceive+0x130>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1a1      	bne.n	8002b9e <HAL_SPI_TransmitReceive+0x130>
 8002c5a:	e07c      	b.n	8002d56 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d002      	beq.n	8002c6a <HAL_SPI_TransmitReceive+0x1fc>
 8002c64:	8b7b      	ldrh	r3, [r7, #26]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d16b      	bne.n	8002d42 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	330c      	adds	r3, #12
 8002c74:	7812      	ldrb	r2, [r2, #0]
 8002c76:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7c:	1c5a      	adds	r2, r3, #1
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c90:	e057      	b.n	8002d42 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d11c      	bne.n	8002cda <HAL_SPI_TransmitReceive+0x26c>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d017      	beq.n	8002cda <HAL_SPI_TransmitReceive+0x26c>
 8002caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d114      	bne.n	8002cda <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	330c      	adds	r3, #12
 8002cba:	7812      	ldrb	r2, [r2, #0]
 8002cbc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc2:	1c5a      	adds	r2, r3, #1
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d119      	bne.n	8002d1c <HAL_SPI_TransmitReceive+0x2ae>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d014      	beq.n	8002d1c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68da      	ldr	r2, [r3, #12]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cfc:	b2d2      	uxtb	r2, r2
 8002cfe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d04:	1c5a      	adds	r2, r3, #1
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	3b01      	subs	r3, #1
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002d1c:	f7fe fc7a 	bl	8001614 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d803      	bhi.n	8002d34 <HAL_SPI_TransmitReceive+0x2c6>
 8002d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d32:	d102      	bne.n	8002d3a <HAL_SPI_TransmitReceive+0x2cc>
 8002d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d103      	bne.n	8002d42 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002d40:	e029      	b.n	8002d96 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1a2      	bne.n	8002c92 <HAL_SPI_TransmitReceive+0x224>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d19d      	bne.n	8002c92 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d58:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f000 f8b2 	bl	8002ec4 <SPI_EndRxTxTransaction>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d006      	beq.n	8002d74 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2220      	movs	r2, #32
 8002d70:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002d72:	e010      	b.n	8002d96 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10b      	bne.n	8002d94 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	617b      	str	r3, [r7, #20]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	617b      	str	r3, [r7, #20]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	617b      	str	r3, [r7, #20]
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	e000      	b.n	8002d96 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002d94:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002da6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3730      	adds	r7, #48	; 0x30
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
	...

08002db4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b088      	sub	sp, #32
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	603b      	str	r3, [r7, #0]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002dc4:	f7fe fc26 	bl	8001614 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dcc:	1a9b      	subs	r3, r3, r2
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002dd4:	f7fe fc1e 	bl	8001614 <HAL_GetTick>
 8002dd8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002dda:	4b39      	ldr	r3, [pc, #228]	; (8002ec0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	015b      	lsls	r3, r3, #5
 8002de0:	0d1b      	lsrs	r3, r3, #20
 8002de2:	69fa      	ldr	r2, [r7, #28]
 8002de4:	fb02 f303 	mul.w	r3, r2, r3
 8002de8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002dea:	e054      	b.n	8002e96 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df2:	d050      	beq.n	8002e96 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002df4:	f7fe fc0e 	bl	8001614 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	69fa      	ldr	r2, [r7, #28]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d902      	bls.n	8002e0a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d13d      	bne.n	8002e86 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	685a      	ldr	r2, [r3, #4]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002e18:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e22:	d111      	bne.n	8002e48 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e2c:	d004      	beq.n	8002e38 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e36:	d107      	bne.n	8002e48 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e46:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e50:	d10f      	bne.n	8002e72 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e60:	601a      	str	r2, [r3, #0]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e70:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2201      	movs	r2, #1
 8002e76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e017      	b.n	8002eb6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d101      	bne.n	8002e90 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	3b01      	subs	r3, #1
 8002e94:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	689a      	ldr	r2, [r3, #8]
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	68ba      	ldr	r2, [r7, #8]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	bf0c      	ite	eq
 8002ea6:	2301      	moveq	r3, #1
 8002ea8:	2300      	movne	r3, #0
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	461a      	mov	r2, r3
 8002eae:	79fb      	ldrb	r3, [r7, #7]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d19b      	bne.n	8002dec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3720      	adds	r7, #32
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	20000004 	.word	0x20000004

08002ec4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b088      	sub	sp, #32
 8002ec8:	af02      	add	r7, sp, #8
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002ed0:	4b1b      	ldr	r3, [pc, #108]	; (8002f40 <SPI_EndRxTxTransaction+0x7c>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a1b      	ldr	r2, [pc, #108]	; (8002f44 <SPI_EndRxTxTransaction+0x80>)
 8002ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eda:	0d5b      	lsrs	r3, r3, #21
 8002edc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ee0:	fb02 f303 	mul.w	r3, r2, r3
 8002ee4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002eee:	d112      	bne.n	8002f16 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	9300      	str	r3, [sp, #0]
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	2180      	movs	r1, #128	; 0x80
 8002efa:	68f8      	ldr	r0, [r7, #12]
 8002efc:	f7ff ff5a 	bl	8002db4 <SPI_WaitFlagStateUntilTimeout>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d016      	beq.n	8002f34 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f0a:	f043 0220 	orr.w	r2, r3, #32
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e00f      	b.n	8002f36 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d00a      	beq.n	8002f32 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f2c:	2b80      	cmp	r3, #128	; 0x80
 8002f2e:	d0f2      	beq.n	8002f16 <SPI_EndRxTxTransaction+0x52>
 8002f30:	e000      	b.n	8002f34 <SPI_EndRxTxTransaction+0x70>
        break;
 8002f32:	bf00      	nop
  }

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3718      	adds	r7, #24
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	20000004 	.word	0x20000004
 8002f44:	165e9f81 	.word	0x165e9f81

08002f48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e03f      	b.n	8002fda <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d106      	bne.n	8002f74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f7fe fa3c 	bl	80013ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2224      	movs	r2, #36	; 0x24
 8002f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68da      	ldr	r2, [r3, #12]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 f929 	bl	80031e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	691a      	ldr	r2, [r3, #16]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fa0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	695a      	ldr	r2, [r3, #20]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68da      	ldr	r2, [r3, #12]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2220      	movs	r2, #32
 8002fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b08a      	sub	sp, #40	; 0x28
 8002fe6:	af02      	add	r7, sp, #8
 8002fe8:	60f8      	str	r0, [r7, #12]
 8002fea:	60b9      	str	r1, [r7, #8]
 8002fec:	603b      	str	r3, [r7, #0]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b20      	cmp	r3, #32
 8003000:	d17c      	bne.n	80030fc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d002      	beq.n	800300e <HAL_UART_Transmit+0x2c>
 8003008:	88fb      	ldrh	r3, [r7, #6]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e075      	b.n	80030fe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003018:	2b01      	cmp	r3, #1
 800301a:	d101      	bne.n	8003020 <HAL_UART_Transmit+0x3e>
 800301c:	2302      	movs	r3, #2
 800301e:	e06e      	b.n	80030fe <HAL_UART_Transmit+0x11c>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2221      	movs	r2, #33	; 0x21
 8003032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003036:	f7fe faed 	bl	8001614 <HAL_GetTick>
 800303a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	88fa      	ldrh	r2, [r7, #6]
 8003040:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	88fa      	ldrh	r2, [r7, #6]
 8003046:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003050:	d108      	bne.n	8003064 <HAL_UART_Transmit+0x82>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d104      	bne.n	8003064 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800305a:	2300      	movs	r3, #0
 800305c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	61bb      	str	r3, [r7, #24]
 8003062:	e003      	b.n	800306c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003068:	2300      	movs	r3, #0
 800306a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003074:	e02a      	b.n	80030cc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	9300      	str	r3, [sp, #0]
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	2200      	movs	r2, #0
 800307e:	2180      	movs	r1, #128	; 0x80
 8003080:	68f8      	ldr	r0, [r7, #12]
 8003082:	f000 f840 	bl	8003106 <UART_WaitOnFlagUntilTimeout>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e036      	b.n	80030fe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10b      	bne.n	80030ae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	881b      	ldrh	r3, [r3, #0]
 800309a:	461a      	mov	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	3302      	adds	r3, #2
 80030aa:	61bb      	str	r3, [r7, #24]
 80030ac:	e007      	b.n	80030be <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	781a      	ldrb	r2, [r3, #0]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	3301      	adds	r3, #1
 80030bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	3b01      	subs	r3, #1
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1cf      	bne.n	8003076 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	9300      	str	r3, [sp, #0]
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	2200      	movs	r2, #0
 80030de:	2140      	movs	r1, #64	; 0x40
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f000 f810 	bl	8003106 <UART_WaitOnFlagUntilTimeout>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d001      	beq.n	80030f0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e006      	b.n	80030fe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2220      	movs	r2, #32
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80030f8:	2300      	movs	r3, #0
 80030fa:	e000      	b.n	80030fe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80030fc:	2302      	movs	r3, #2
  }
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3720      	adds	r7, #32
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b090      	sub	sp, #64	; 0x40
 800310a:	af00      	add	r7, sp, #0
 800310c:	60f8      	str	r0, [r7, #12]
 800310e:	60b9      	str	r1, [r7, #8]
 8003110:	603b      	str	r3, [r7, #0]
 8003112:	4613      	mov	r3, r2
 8003114:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003116:	e050      	b.n	80031ba <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003118:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800311a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311e:	d04c      	beq.n	80031ba <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003120:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003122:	2b00      	cmp	r3, #0
 8003124:	d007      	beq.n	8003136 <UART_WaitOnFlagUntilTimeout+0x30>
 8003126:	f7fe fa75 	bl	8001614 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003132:	429a      	cmp	r2, r3
 8003134:	d241      	bcs.n	80031ba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	330c      	adds	r3, #12
 800313c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800313e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003140:	e853 3f00 	ldrex	r3, [r3]
 8003144:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003148:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800314c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	330c      	adds	r3, #12
 8003154:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003156:	637a      	str	r2, [r7, #52]	; 0x34
 8003158:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800315a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800315c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800315e:	e841 2300 	strex	r3, r2, [r1]
 8003162:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1e5      	bne.n	8003136 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	3314      	adds	r3, #20
 8003170:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	e853 3f00 	ldrex	r3, [r3]
 8003178:	613b      	str	r3, [r7, #16]
   return(result);
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	f023 0301 	bic.w	r3, r3, #1
 8003180:	63bb      	str	r3, [r7, #56]	; 0x38
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	3314      	adds	r3, #20
 8003188:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800318a:	623a      	str	r2, [r7, #32]
 800318c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800318e:	69f9      	ldr	r1, [r7, #28]
 8003190:	6a3a      	ldr	r2, [r7, #32]
 8003192:	e841 2300 	strex	r3, r2, [r1]
 8003196:	61bb      	str	r3, [r7, #24]
   return(result);
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1e5      	bne.n	800316a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2220      	movs	r2, #32
 80031a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2220      	movs	r2, #32
 80031aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e00f      	b.n	80031da <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	4013      	ands	r3, r2
 80031c4:	68ba      	ldr	r2, [r7, #8]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	bf0c      	ite	eq
 80031ca:	2301      	moveq	r3, #1
 80031cc:	2300      	movne	r3, #0
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	461a      	mov	r2, r3
 80031d2:	79fb      	ldrb	r3, [r7, #7]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d09f      	beq.n	8003118 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3740      	adds	r7, #64	; 0x40
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
	...

080031e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031e8:	b0c0      	sub	sp, #256	; 0x100
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80031fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003200:	68d9      	ldr	r1, [r3, #12]
 8003202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	ea40 0301 	orr.w	r3, r0, r1
 800320c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800320e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003212:	689a      	ldr	r2, [r3, #8]
 8003214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	431a      	orrs	r2, r3
 800321c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	431a      	orrs	r2, r3
 8003224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003228:	69db      	ldr	r3, [r3, #28]
 800322a:	4313      	orrs	r3, r2
 800322c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800323c:	f021 010c 	bic.w	r1, r1, #12
 8003240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800324a:	430b      	orrs	r3, r1
 800324c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800324e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800325a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800325e:	6999      	ldr	r1, [r3, #24]
 8003260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	ea40 0301 	orr.w	r3, r0, r1
 800326a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800326c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	4b8f      	ldr	r3, [pc, #572]	; (80034b0 <UART_SetConfig+0x2cc>)
 8003274:	429a      	cmp	r2, r3
 8003276:	d005      	beq.n	8003284 <UART_SetConfig+0xa0>
 8003278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	4b8d      	ldr	r3, [pc, #564]	; (80034b4 <UART_SetConfig+0x2d0>)
 8003280:	429a      	cmp	r2, r3
 8003282:	d104      	bne.n	800328e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003284:	f7fe fdd2 	bl	8001e2c <HAL_RCC_GetPCLK2Freq>
 8003288:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800328c:	e003      	b.n	8003296 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800328e:	f7fe fdb9 	bl	8001e04 <HAL_RCC_GetPCLK1Freq>
 8003292:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800329a:	69db      	ldr	r3, [r3, #28]
 800329c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032a0:	f040 810c 	bne.w	80034bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80032a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032a8:	2200      	movs	r2, #0
 80032aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80032ae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80032b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80032b6:	4622      	mov	r2, r4
 80032b8:	462b      	mov	r3, r5
 80032ba:	1891      	adds	r1, r2, r2
 80032bc:	65b9      	str	r1, [r7, #88]	; 0x58
 80032be:	415b      	adcs	r3, r3
 80032c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80032c6:	4621      	mov	r1, r4
 80032c8:	eb12 0801 	adds.w	r8, r2, r1
 80032cc:	4629      	mov	r1, r5
 80032ce:	eb43 0901 	adc.w	r9, r3, r1
 80032d2:	f04f 0200 	mov.w	r2, #0
 80032d6:	f04f 0300 	mov.w	r3, #0
 80032da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032e6:	4690      	mov	r8, r2
 80032e8:	4699      	mov	r9, r3
 80032ea:	4623      	mov	r3, r4
 80032ec:	eb18 0303 	adds.w	r3, r8, r3
 80032f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80032f4:	462b      	mov	r3, r5
 80032f6:	eb49 0303 	adc.w	r3, r9, r3
 80032fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80032fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800330a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800330e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003312:	460b      	mov	r3, r1
 8003314:	18db      	adds	r3, r3, r3
 8003316:	653b      	str	r3, [r7, #80]	; 0x50
 8003318:	4613      	mov	r3, r2
 800331a:	eb42 0303 	adc.w	r3, r2, r3
 800331e:	657b      	str	r3, [r7, #84]	; 0x54
 8003320:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003324:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003328:	f7fc ff74 	bl	8000214 <__aeabi_uldivmod>
 800332c:	4602      	mov	r2, r0
 800332e:	460b      	mov	r3, r1
 8003330:	4b61      	ldr	r3, [pc, #388]	; (80034b8 <UART_SetConfig+0x2d4>)
 8003332:	fba3 2302 	umull	r2, r3, r3, r2
 8003336:	095b      	lsrs	r3, r3, #5
 8003338:	011c      	lsls	r4, r3, #4
 800333a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800333e:	2200      	movs	r2, #0
 8003340:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003344:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003348:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800334c:	4642      	mov	r2, r8
 800334e:	464b      	mov	r3, r9
 8003350:	1891      	adds	r1, r2, r2
 8003352:	64b9      	str	r1, [r7, #72]	; 0x48
 8003354:	415b      	adcs	r3, r3
 8003356:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003358:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800335c:	4641      	mov	r1, r8
 800335e:	eb12 0a01 	adds.w	sl, r2, r1
 8003362:	4649      	mov	r1, r9
 8003364:	eb43 0b01 	adc.w	fp, r3, r1
 8003368:	f04f 0200 	mov.w	r2, #0
 800336c:	f04f 0300 	mov.w	r3, #0
 8003370:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003374:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003378:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800337c:	4692      	mov	sl, r2
 800337e:	469b      	mov	fp, r3
 8003380:	4643      	mov	r3, r8
 8003382:	eb1a 0303 	adds.w	r3, sl, r3
 8003386:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800338a:	464b      	mov	r3, r9
 800338c:	eb4b 0303 	adc.w	r3, fp, r3
 8003390:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80033a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80033a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80033a8:	460b      	mov	r3, r1
 80033aa:	18db      	adds	r3, r3, r3
 80033ac:	643b      	str	r3, [r7, #64]	; 0x40
 80033ae:	4613      	mov	r3, r2
 80033b0:	eb42 0303 	adc.w	r3, r2, r3
 80033b4:	647b      	str	r3, [r7, #68]	; 0x44
 80033b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80033ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80033be:	f7fc ff29 	bl	8000214 <__aeabi_uldivmod>
 80033c2:	4602      	mov	r2, r0
 80033c4:	460b      	mov	r3, r1
 80033c6:	4611      	mov	r1, r2
 80033c8:	4b3b      	ldr	r3, [pc, #236]	; (80034b8 <UART_SetConfig+0x2d4>)
 80033ca:	fba3 2301 	umull	r2, r3, r3, r1
 80033ce:	095b      	lsrs	r3, r3, #5
 80033d0:	2264      	movs	r2, #100	; 0x64
 80033d2:	fb02 f303 	mul.w	r3, r2, r3
 80033d6:	1acb      	subs	r3, r1, r3
 80033d8:	00db      	lsls	r3, r3, #3
 80033da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80033de:	4b36      	ldr	r3, [pc, #216]	; (80034b8 <UART_SetConfig+0x2d4>)
 80033e0:	fba3 2302 	umull	r2, r3, r3, r2
 80033e4:	095b      	lsrs	r3, r3, #5
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80033ec:	441c      	add	r4, r3
 80033ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033f2:	2200      	movs	r2, #0
 80033f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80033f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80033fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003400:	4642      	mov	r2, r8
 8003402:	464b      	mov	r3, r9
 8003404:	1891      	adds	r1, r2, r2
 8003406:	63b9      	str	r1, [r7, #56]	; 0x38
 8003408:	415b      	adcs	r3, r3
 800340a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800340c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003410:	4641      	mov	r1, r8
 8003412:	1851      	adds	r1, r2, r1
 8003414:	6339      	str	r1, [r7, #48]	; 0x30
 8003416:	4649      	mov	r1, r9
 8003418:	414b      	adcs	r3, r1
 800341a:	637b      	str	r3, [r7, #52]	; 0x34
 800341c:	f04f 0200 	mov.w	r2, #0
 8003420:	f04f 0300 	mov.w	r3, #0
 8003424:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003428:	4659      	mov	r1, fp
 800342a:	00cb      	lsls	r3, r1, #3
 800342c:	4651      	mov	r1, sl
 800342e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003432:	4651      	mov	r1, sl
 8003434:	00ca      	lsls	r2, r1, #3
 8003436:	4610      	mov	r0, r2
 8003438:	4619      	mov	r1, r3
 800343a:	4603      	mov	r3, r0
 800343c:	4642      	mov	r2, r8
 800343e:	189b      	adds	r3, r3, r2
 8003440:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003444:	464b      	mov	r3, r9
 8003446:	460a      	mov	r2, r1
 8003448:	eb42 0303 	adc.w	r3, r2, r3
 800344c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800345c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003460:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003464:	460b      	mov	r3, r1
 8003466:	18db      	adds	r3, r3, r3
 8003468:	62bb      	str	r3, [r7, #40]	; 0x28
 800346a:	4613      	mov	r3, r2
 800346c:	eb42 0303 	adc.w	r3, r2, r3
 8003470:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003472:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003476:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800347a:	f7fc fecb 	bl	8000214 <__aeabi_uldivmod>
 800347e:	4602      	mov	r2, r0
 8003480:	460b      	mov	r3, r1
 8003482:	4b0d      	ldr	r3, [pc, #52]	; (80034b8 <UART_SetConfig+0x2d4>)
 8003484:	fba3 1302 	umull	r1, r3, r3, r2
 8003488:	095b      	lsrs	r3, r3, #5
 800348a:	2164      	movs	r1, #100	; 0x64
 800348c:	fb01 f303 	mul.w	r3, r1, r3
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	3332      	adds	r3, #50	; 0x32
 8003496:	4a08      	ldr	r2, [pc, #32]	; (80034b8 <UART_SetConfig+0x2d4>)
 8003498:	fba2 2303 	umull	r2, r3, r2, r3
 800349c:	095b      	lsrs	r3, r3, #5
 800349e:	f003 0207 	and.w	r2, r3, #7
 80034a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4422      	add	r2, r4
 80034aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80034ac:	e105      	b.n	80036ba <UART_SetConfig+0x4d6>
 80034ae:	bf00      	nop
 80034b0:	40011000 	.word	0x40011000
 80034b4:	40011400 	.word	0x40011400
 80034b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034c0:	2200      	movs	r2, #0
 80034c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80034c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80034ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80034ce:	4642      	mov	r2, r8
 80034d0:	464b      	mov	r3, r9
 80034d2:	1891      	adds	r1, r2, r2
 80034d4:	6239      	str	r1, [r7, #32]
 80034d6:	415b      	adcs	r3, r3
 80034d8:	627b      	str	r3, [r7, #36]	; 0x24
 80034da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80034de:	4641      	mov	r1, r8
 80034e0:	1854      	adds	r4, r2, r1
 80034e2:	4649      	mov	r1, r9
 80034e4:	eb43 0501 	adc.w	r5, r3, r1
 80034e8:	f04f 0200 	mov.w	r2, #0
 80034ec:	f04f 0300 	mov.w	r3, #0
 80034f0:	00eb      	lsls	r3, r5, #3
 80034f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034f6:	00e2      	lsls	r2, r4, #3
 80034f8:	4614      	mov	r4, r2
 80034fa:	461d      	mov	r5, r3
 80034fc:	4643      	mov	r3, r8
 80034fe:	18e3      	adds	r3, r4, r3
 8003500:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003504:	464b      	mov	r3, r9
 8003506:	eb45 0303 	adc.w	r3, r5, r3
 800350a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800350e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800351a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800351e:	f04f 0200 	mov.w	r2, #0
 8003522:	f04f 0300 	mov.w	r3, #0
 8003526:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800352a:	4629      	mov	r1, r5
 800352c:	008b      	lsls	r3, r1, #2
 800352e:	4621      	mov	r1, r4
 8003530:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003534:	4621      	mov	r1, r4
 8003536:	008a      	lsls	r2, r1, #2
 8003538:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800353c:	f7fc fe6a 	bl	8000214 <__aeabi_uldivmod>
 8003540:	4602      	mov	r2, r0
 8003542:	460b      	mov	r3, r1
 8003544:	4b60      	ldr	r3, [pc, #384]	; (80036c8 <UART_SetConfig+0x4e4>)
 8003546:	fba3 2302 	umull	r2, r3, r3, r2
 800354a:	095b      	lsrs	r3, r3, #5
 800354c:	011c      	lsls	r4, r3, #4
 800354e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003552:	2200      	movs	r2, #0
 8003554:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003558:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800355c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003560:	4642      	mov	r2, r8
 8003562:	464b      	mov	r3, r9
 8003564:	1891      	adds	r1, r2, r2
 8003566:	61b9      	str	r1, [r7, #24]
 8003568:	415b      	adcs	r3, r3
 800356a:	61fb      	str	r3, [r7, #28]
 800356c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003570:	4641      	mov	r1, r8
 8003572:	1851      	adds	r1, r2, r1
 8003574:	6139      	str	r1, [r7, #16]
 8003576:	4649      	mov	r1, r9
 8003578:	414b      	adcs	r3, r1
 800357a:	617b      	str	r3, [r7, #20]
 800357c:	f04f 0200 	mov.w	r2, #0
 8003580:	f04f 0300 	mov.w	r3, #0
 8003584:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003588:	4659      	mov	r1, fp
 800358a:	00cb      	lsls	r3, r1, #3
 800358c:	4651      	mov	r1, sl
 800358e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003592:	4651      	mov	r1, sl
 8003594:	00ca      	lsls	r2, r1, #3
 8003596:	4610      	mov	r0, r2
 8003598:	4619      	mov	r1, r3
 800359a:	4603      	mov	r3, r0
 800359c:	4642      	mov	r2, r8
 800359e:	189b      	adds	r3, r3, r2
 80035a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80035a4:	464b      	mov	r3, r9
 80035a6:	460a      	mov	r2, r1
 80035a8:	eb42 0303 	adc.w	r3, r2, r3
 80035ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80035b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80035ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80035bc:	f04f 0200 	mov.w	r2, #0
 80035c0:	f04f 0300 	mov.w	r3, #0
 80035c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80035c8:	4649      	mov	r1, r9
 80035ca:	008b      	lsls	r3, r1, #2
 80035cc:	4641      	mov	r1, r8
 80035ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035d2:	4641      	mov	r1, r8
 80035d4:	008a      	lsls	r2, r1, #2
 80035d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80035da:	f7fc fe1b 	bl	8000214 <__aeabi_uldivmod>
 80035de:	4602      	mov	r2, r0
 80035e0:	460b      	mov	r3, r1
 80035e2:	4b39      	ldr	r3, [pc, #228]	; (80036c8 <UART_SetConfig+0x4e4>)
 80035e4:	fba3 1302 	umull	r1, r3, r3, r2
 80035e8:	095b      	lsrs	r3, r3, #5
 80035ea:	2164      	movs	r1, #100	; 0x64
 80035ec:	fb01 f303 	mul.w	r3, r1, r3
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	011b      	lsls	r3, r3, #4
 80035f4:	3332      	adds	r3, #50	; 0x32
 80035f6:	4a34      	ldr	r2, [pc, #208]	; (80036c8 <UART_SetConfig+0x4e4>)
 80035f8:	fba2 2303 	umull	r2, r3, r2, r3
 80035fc:	095b      	lsrs	r3, r3, #5
 80035fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003602:	441c      	add	r4, r3
 8003604:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003608:	2200      	movs	r2, #0
 800360a:	673b      	str	r3, [r7, #112]	; 0x70
 800360c:	677a      	str	r2, [r7, #116]	; 0x74
 800360e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003612:	4642      	mov	r2, r8
 8003614:	464b      	mov	r3, r9
 8003616:	1891      	adds	r1, r2, r2
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	415b      	adcs	r3, r3
 800361c:	60fb      	str	r3, [r7, #12]
 800361e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003622:	4641      	mov	r1, r8
 8003624:	1851      	adds	r1, r2, r1
 8003626:	6039      	str	r1, [r7, #0]
 8003628:	4649      	mov	r1, r9
 800362a:	414b      	adcs	r3, r1
 800362c:	607b      	str	r3, [r7, #4]
 800362e:	f04f 0200 	mov.w	r2, #0
 8003632:	f04f 0300 	mov.w	r3, #0
 8003636:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800363a:	4659      	mov	r1, fp
 800363c:	00cb      	lsls	r3, r1, #3
 800363e:	4651      	mov	r1, sl
 8003640:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003644:	4651      	mov	r1, sl
 8003646:	00ca      	lsls	r2, r1, #3
 8003648:	4610      	mov	r0, r2
 800364a:	4619      	mov	r1, r3
 800364c:	4603      	mov	r3, r0
 800364e:	4642      	mov	r2, r8
 8003650:	189b      	adds	r3, r3, r2
 8003652:	66bb      	str	r3, [r7, #104]	; 0x68
 8003654:	464b      	mov	r3, r9
 8003656:	460a      	mov	r2, r1
 8003658:	eb42 0303 	adc.w	r3, r2, r3
 800365c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800365e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	663b      	str	r3, [r7, #96]	; 0x60
 8003668:	667a      	str	r2, [r7, #100]	; 0x64
 800366a:	f04f 0200 	mov.w	r2, #0
 800366e:	f04f 0300 	mov.w	r3, #0
 8003672:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003676:	4649      	mov	r1, r9
 8003678:	008b      	lsls	r3, r1, #2
 800367a:	4641      	mov	r1, r8
 800367c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003680:	4641      	mov	r1, r8
 8003682:	008a      	lsls	r2, r1, #2
 8003684:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003688:	f7fc fdc4 	bl	8000214 <__aeabi_uldivmod>
 800368c:	4602      	mov	r2, r0
 800368e:	460b      	mov	r3, r1
 8003690:	4b0d      	ldr	r3, [pc, #52]	; (80036c8 <UART_SetConfig+0x4e4>)
 8003692:	fba3 1302 	umull	r1, r3, r3, r2
 8003696:	095b      	lsrs	r3, r3, #5
 8003698:	2164      	movs	r1, #100	; 0x64
 800369a:	fb01 f303 	mul.w	r3, r1, r3
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	011b      	lsls	r3, r3, #4
 80036a2:	3332      	adds	r3, #50	; 0x32
 80036a4:	4a08      	ldr	r2, [pc, #32]	; (80036c8 <UART_SetConfig+0x4e4>)
 80036a6:	fba2 2303 	umull	r2, r3, r2, r3
 80036aa:	095b      	lsrs	r3, r3, #5
 80036ac:	f003 020f 	and.w	r2, r3, #15
 80036b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4422      	add	r2, r4
 80036b8:	609a      	str	r2, [r3, #8]
}
 80036ba:	bf00      	nop
 80036bc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80036c0:	46bd      	mov	sp, r7
 80036c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036c6:	bf00      	nop
 80036c8:	51eb851f 	.word	0x51eb851f

080036cc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80036d0:	4904      	ldr	r1, [pc, #16]	; (80036e4 <MX_FATFS_Init+0x18>)
 80036d2:	4805      	ldr	r0, [pc, #20]	; (80036e8 <MX_FATFS_Init+0x1c>)
 80036d4:	f002 ff80 	bl	80065d8 <FATFS_LinkDriver>
 80036d8:	4603      	mov	r3, r0
 80036da:	461a      	mov	r2, r3
 80036dc:	4b03      	ldr	r3, [pc, #12]	; (80036ec <MX_FATFS_Init+0x20>)
 80036de:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80036e0:	bf00      	nop
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	20002564 	.word	0x20002564
 80036e8:	20000010 	.word	0x20000010
 80036ec:	20002560 	.word	0x20002560

080036f0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80036f4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	4603      	mov	r3, r0
 8003708:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 800370a:	79fb      	ldrb	r3, [r7, #7]
 800370c:	4618      	mov	r0, r3
 800370e:	f7fd f8b7 	bl	8000880 <SD_disk_initialize>
 8003712:	4603      	mov	r3, r0
 8003714:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8003716:	4618      	mov	r0, r3
 8003718:	3708      	adds	r7, #8
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b082      	sub	sp, #8
 8003722:	af00      	add	r7, sp, #0
 8003724:	4603      	mov	r3, r0
 8003726:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8003728:	79fb      	ldrb	r3, [r7, #7]
 800372a:	4618      	mov	r0, r3
 800372c:	f7fd f98e 	bl	8000a4c <SD_disk_status>
 8003730:	4603      	mov	r3, r0
 8003732:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8003734:	4618      	mov	r0, r3
 8003736:	3708      	adds	r7, #8
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	60b9      	str	r1, [r7, #8]
 8003744:	607a      	str	r2, [r7, #4]
 8003746:	603b      	str	r3, [r7, #0]
 8003748:	4603      	mov	r3, r0
 800374a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 800374c:	7bf8      	ldrb	r0, [r7, #15]
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	68b9      	ldr	r1, [r7, #8]
 8003754:	f7fd f990 	bl	8000a78 <SD_disk_read>
 8003758:	4603      	mov	r3, r0
 800375a:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 800375c:	4618      	mov	r0, r3
 800375e:	3710      	adds	r7, #16
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	60b9      	str	r1, [r7, #8]
 800376c:	607a      	str	r2, [r7, #4]
 800376e:	603b      	str	r3, [r7, #0]
 8003770:	4603      	mov	r3, r0
 8003772:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8003774:	7bf8      	ldrb	r0, [r7, #15]
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	68b9      	ldr	r1, [r7, #8]
 800377c:	f7fd f9e6 	bl	8000b4c <SD_disk_write>
 8003780:	4603      	mov	r3, r0
 8003782:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8003784:	4618      	mov	r0, r3
 8003786:	3710      	adds	r7, #16
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	4603      	mov	r3, r0
 8003794:	603a      	str	r2, [r7, #0]
 8003796:	71fb      	strb	r3, [r7, #7]
 8003798:	460b      	mov	r3, r1
 800379a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	73fb      	strb	r3, [r7, #15]
    return SD_disk_ioctl(pdrv, cmd, buff);
 80037a0:	79fb      	ldrb	r3, [r7, #7]
 80037a2:	79b9      	ldrb	r1, [r7, #6]
 80037a4:	683a      	ldr	r2, [r7, #0]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7fd fa54 	bl	8000c54 <SD_disk_ioctl>
 80037ac:	4603      	mov	r3, r0
 80037ae:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3710      	adds	r7, #16
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	4603      	mov	r3, r0
 80037c0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80037c2:	79fb      	ldrb	r3, [r7, #7]
 80037c4:	4a08      	ldr	r2, [pc, #32]	; (80037e8 <disk_status+0x30>)
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4413      	add	r3, r2
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	79fa      	ldrb	r2, [r7, #7]
 80037d0:	4905      	ldr	r1, [pc, #20]	; (80037e8 <disk_status+0x30>)
 80037d2:	440a      	add	r2, r1
 80037d4:	7a12      	ldrb	r2, [r2, #8]
 80037d6:	4610      	mov	r0, r2
 80037d8:	4798      	blx	r3
 80037da:	4603      	mov	r3, r0
 80037dc:	73fb      	strb	r3, [r7, #15]
  return stat;
 80037de:	7bfb      	ldrb	r3, [r7, #15]
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	20002790 	.word	0x20002790

080037ec <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	4603      	mov	r3, r0
 80037f4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80037f6:	2300      	movs	r3, #0
 80037f8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80037fa:	79fb      	ldrb	r3, [r7, #7]
 80037fc:	4a0d      	ldr	r2, [pc, #52]	; (8003834 <disk_initialize+0x48>)
 80037fe:	5cd3      	ldrb	r3, [r2, r3]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d111      	bne.n	8003828 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8003804:	79fb      	ldrb	r3, [r7, #7]
 8003806:	4a0b      	ldr	r2, [pc, #44]	; (8003834 <disk_initialize+0x48>)
 8003808:	2101      	movs	r1, #1
 800380a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800380c:	79fb      	ldrb	r3, [r7, #7]
 800380e:	4a09      	ldr	r2, [pc, #36]	; (8003834 <disk_initialize+0x48>)
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	4413      	add	r3, r2
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	79fa      	ldrb	r2, [r7, #7]
 800381a:	4906      	ldr	r1, [pc, #24]	; (8003834 <disk_initialize+0x48>)
 800381c:	440a      	add	r2, r1
 800381e:	7a12      	ldrb	r2, [r2, #8]
 8003820:	4610      	mov	r0, r2
 8003822:	4798      	blx	r3
 8003824:	4603      	mov	r3, r0
 8003826:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003828:	7bfb      	ldrb	r3, [r7, #15]
}
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	20002790 	.word	0x20002790

08003838 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003838:	b590      	push	{r4, r7, lr}
 800383a:	b087      	sub	sp, #28
 800383c:	af00      	add	r7, sp, #0
 800383e:	60b9      	str	r1, [r7, #8]
 8003840:	607a      	str	r2, [r7, #4]
 8003842:	603b      	str	r3, [r7, #0]
 8003844:	4603      	mov	r3, r0
 8003846:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003848:	7bfb      	ldrb	r3, [r7, #15]
 800384a:	4a0a      	ldr	r2, [pc, #40]	; (8003874 <disk_read+0x3c>)
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	4413      	add	r3, r2
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	689c      	ldr	r4, [r3, #8]
 8003854:	7bfb      	ldrb	r3, [r7, #15]
 8003856:	4a07      	ldr	r2, [pc, #28]	; (8003874 <disk_read+0x3c>)
 8003858:	4413      	add	r3, r2
 800385a:	7a18      	ldrb	r0, [r3, #8]
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	68b9      	ldr	r1, [r7, #8]
 8003862:	47a0      	blx	r4
 8003864:	4603      	mov	r3, r0
 8003866:	75fb      	strb	r3, [r7, #23]
  return res;
 8003868:	7dfb      	ldrb	r3, [r7, #23]
}
 800386a:	4618      	mov	r0, r3
 800386c:	371c      	adds	r7, #28
 800386e:	46bd      	mov	sp, r7
 8003870:	bd90      	pop	{r4, r7, pc}
 8003872:	bf00      	nop
 8003874:	20002790 	.word	0x20002790

08003878 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003878:	b590      	push	{r4, r7, lr}
 800387a:	b087      	sub	sp, #28
 800387c:	af00      	add	r7, sp, #0
 800387e:	60b9      	str	r1, [r7, #8]
 8003880:	607a      	str	r2, [r7, #4]
 8003882:	603b      	str	r3, [r7, #0]
 8003884:	4603      	mov	r3, r0
 8003886:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003888:	7bfb      	ldrb	r3, [r7, #15]
 800388a:	4a0a      	ldr	r2, [pc, #40]	; (80038b4 <disk_write+0x3c>)
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	4413      	add	r3, r2
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	68dc      	ldr	r4, [r3, #12]
 8003894:	7bfb      	ldrb	r3, [r7, #15]
 8003896:	4a07      	ldr	r2, [pc, #28]	; (80038b4 <disk_write+0x3c>)
 8003898:	4413      	add	r3, r2
 800389a:	7a18      	ldrb	r0, [r3, #8]
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	68b9      	ldr	r1, [r7, #8]
 80038a2:	47a0      	blx	r4
 80038a4:	4603      	mov	r3, r0
 80038a6:	75fb      	strb	r3, [r7, #23]
  return res;
 80038a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	371c      	adds	r7, #28
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd90      	pop	{r4, r7, pc}
 80038b2:	bf00      	nop
 80038b4:	20002790 	.word	0x20002790

080038b8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	4603      	mov	r3, r0
 80038c0:	603a      	str	r2, [r7, #0]
 80038c2:	71fb      	strb	r3, [r7, #7]
 80038c4:	460b      	mov	r3, r1
 80038c6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80038c8:	79fb      	ldrb	r3, [r7, #7]
 80038ca:	4a09      	ldr	r2, [pc, #36]	; (80038f0 <disk_ioctl+0x38>)
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	4413      	add	r3, r2
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	79fa      	ldrb	r2, [r7, #7]
 80038d6:	4906      	ldr	r1, [pc, #24]	; (80038f0 <disk_ioctl+0x38>)
 80038d8:	440a      	add	r2, r1
 80038da:	7a10      	ldrb	r0, [r2, #8]
 80038dc:	79b9      	ldrb	r1, [r7, #6]
 80038de:	683a      	ldr	r2, [r7, #0]
 80038e0:	4798      	blx	r3
 80038e2:	4603      	mov	r3, r0
 80038e4:	73fb      	strb	r3, [r7, #15]
  return res;
 80038e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	20002790 	.word	0x20002790

080038f4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	3301      	adds	r3, #1
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8003904:	89fb      	ldrh	r3, [r7, #14]
 8003906:	021b      	lsls	r3, r3, #8
 8003908:	b21a      	sxth	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	b21b      	sxth	r3, r3
 8003910:	4313      	orrs	r3, r2
 8003912:	b21b      	sxth	r3, r3
 8003914:	81fb      	strh	r3, [r7, #14]
	return rv;
 8003916:	89fb      	ldrh	r3, [r7, #14]
}
 8003918:	4618      	mov	r0, r3
 800391a:	3714      	adds	r7, #20
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	3303      	adds	r3, #3
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	021b      	lsls	r3, r3, #8
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	3202      	adds	r2, #2
 800393c:	7812      	ldrb	r2, [r2, #0]
 800393e:	4313      	orrs	r3, r2
 8003940:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	021b      	lsls	r3, r3, #8
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	3201      	adds	r2, #1
 800394a:	7812      	ldrb	r2, [r2, #0]
 800394c:	4313      	orrs	r3, r2
 800394e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	021b      	lsls	r3, r3, #8
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	7812      	ldrb	r2, [r2, #0]
 8003958:	4313      	orrs	r3, r2
 800395a:	60fb      	str	r3, [r7, #12]
	return rv;
 800395c:	68fb      	ldr	r3, [r7, #12]
}
 800395e:	4618      	mov	r0, r3
 8003960:	3714      	adds	r7, #20
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr

0800396a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800396a:	b480      	push	{r7}
 800396c:	b083      	sub	sp, #12
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
 8003972:	460b      	mov	r3, r1
 8003974:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	1c5a      	adds	r2, r3, #1
 800397a:	607a      	str	r2, [r7, #4]
 800397c:	887a      	ldrh	r2, [r7, #2]
 800397e:	b2d2      	uxtb	r2, r2
 8003980:	701a      	strb	r2, [r3, #0]
 8003982:	887b      	ldrh	r3, [r7, #2]
 8003984:	0a1b      	lsrs	r3, r3, #8
 8003986:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	1c5a      	adds	r2, r3, #1
 800398c:	607a      	str	r2, [r7, #4]
 800398e:	887a      	ldrh	r2, [r7, #2]
 8003990:	b2d2      	uxtb	r2, r2
 8003992:	701a      	strb	r2, [r3, #0]
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	1c5a      	adds	r2, r3, #1
 80039ae:	607a      	str	r2, [r7, #4]
 80039b0:	683a      	ldr	r2, [r7, #0]
 80039b2:	b2d2      	uxtb	r2, r2
 80039b4:	701a      	strb	r2, [r3, #0]
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	0a1b      	lsrs	r3, r3, #8
 80039ba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	1c5a      	adds	r2, r3, #1
 80039c0:	607a      	str	r2, [r7, #4]
 80039c2:	683a      	ldr	r2, [r7, #0]
 80039c4:	b2d2      	uxtb	r2, r2
 80039c6:	701a      	strb	r2, [r3, #0]
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	0a1b      	lsrs	r3, r3, #8
 80039cc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	1c5a      	adds	r2, r3, #1
 80039d2:	607a      	str	r2, [r7, #4]
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	b2d2      	uxtb	r2, r2
 80039d8:	701a      	strb	r2, [r3, #0]
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	0a1b      	lsrs	r3, r3, #8
 80039de:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	1c5a      	adds	r2, r3, #1
 80039e4:	607a      	str	r2, [r7, #4]
 80039e6:	683a      	ldr	r2, [r7, #0]
 80039e8:	b2d2      	uxtb	r2, r2
 80039ea:	701a      	strb	r2, [r3, #0]
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80039f8:	b480      	push	{r7}
 80039fa:	b087      	sub	sp, #28
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00d      	beq.n	8003a2e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	1c53      	adds	r3, r2, #1
 8003a16:	613b      	str	r3, [r7, #16]
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	1c59      	adds	r1, r3, #1
 8003a1c:	6179      	str	r1, [r7, #20]
 8003a1e:	7812      	ldrb	r2, [r2, #0]
 8003a20:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	3b01      	subs	r3, #1
 8003a26:	607b      	str	r3, [r7, #4]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1f1      	bne.n	8003a12 <mem_cpy+0x1a>
	}
}
 8003a2e:	bf00      	nop
 8003a30:	371c      	adds	r7, #28
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr

08003a3a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003a3a:	b480      	push	{r7}
 8003a3c:	b087      	sub	sp, #28
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	60f8      	str	r0, [r7, #12]
 8003a42:	60b9      	str	r1, [r7, #8]
 8003a44:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	1c5a      	adds	r2, r3, #1
 8003a4e:	617a      	str	r2, [r7, #20]
 8003a50:	68ba      	ldr	r2, [r7, #8]
 8003a52:	b2d2      	uxtb	r2, r2
 8003a54:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	607b      	str	r3, [r7, #4]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1f3      	bne.n	8003a4a <mem_set+0x10>
}
 8003a62:	bf00      	nop
 8003a64:	bf00      	nop
 8003a66:	371c      	adds	r7, #28
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8003a70:	b480      	push	{r7}
 8003a72:	b089      	sub	sp, #36	; 0x24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	61fb      	str	r3, [r7, #28]
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003a84:	2300      	movs	r3, #0
 8003a86:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	1c5a      	adds	r2, r3, #1
 8003a8c:	61fa      	str	r2, [r7, #28]
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	4619      	mov	r1, r3
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	1c5a      	adds	r2, r3, #1
 8003a96:	61ba      	str	r2, [r7, #24]
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	1acb      	subs	r3, r1, r3
 8003a9c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	607b      	str	r3, [r7, #4]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d002      	beq.n	8003ab0 <mem_cmp+0x40>
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d0eb      	beq.n	8003a88 <mem_cmp+0x18>

	return r;
 8003ab0:	697b      	ldr	r3, [r7, #20]
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3724      	adds	r7, #36	; 0x24
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8003abe:	b480      	push	{r7}
 8003ac0:	b083      	sub	sp, #12
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
 8003ac6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003ac8:	e002      	b.n	8003ad0 <chk_chr+0x12>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	3301      	adds	r3, #1
 8003ace:	607b      	str	r3, [r7, #4]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d005      	beq.n	8003ae4 <chk_chr+0x26>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	461a      	mov	r2, r3
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d1f2      	bne.n	8003aca <chk_chr+0xc>
	return *str;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	781b      	ldrb	r3, [r3, #0]
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b085      	sub	sp, #20
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003afe:	2300      	movs	r3, #0
 8003b00:	60bb      	str	r3, [r7, #8]
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	60fb      	str	r3, [r7, #12]
 8003b06:	e029      	b.n	8003b5c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8003b08:	4a27      	ldr	r2, [pc, #156]	; (8003ba8 <chk_lock+0xb4>)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	011b      	lsls	r3, r3, #4
 8003b0e:	4413      	add	r3, r2
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d01d      	beq.n	8003b52 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003b16:	4a24      	ldr	r2, [pc, #144]	; (8003ba8 <chk_lock+0xb4>)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	011b      	lsls	r3, r3, #4
 8003b1c:	4413      	add	r3, r2
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d116      	bne.n	8003b56 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8003b28:	4a1f      	ldr	r2, [pc, #124]	; (8003ba8 <chk_lock+0xb4>)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	011b      	lsls	r3, r3, #4
 8003b2e:	4413      	add	r3, r2
 8003b30:	3304      	adds	r3, #4
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d10c      	bne.n	8003b56 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003b3c:	4a1a      	ldr	r2, [pc, #104]	; (8003ba8 <chk_lock+0xb4>)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	011b      	lsls	r3, r3, #4
 8003b42:	4413      	add	r3, r2
 8003b44:	3308      	adds	r3, #8
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d102      	bne.n	8003b56 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003b50:	e007      	b.n	8003b62 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8003b52:	2301      	movs	r3, #1
 8003b54:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	3301      	adds	r3, #1
 8003b5a:	60fb      	str	r3, [r7, #12]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d9d2      	bls.n	8003b08 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d109      	bne.n	8003b7c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d102      	bne.n	8003b74 <chk_lock+0x80>
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d101      	bne.n	8003b78 <chk_lock+0x84>
 8003b74:	2300      	movs	r3, #0
 8003b76:	e010      	b.n	8003b9a <chk_lock+0xa6>
 8003b78:	2312      	movs	r3, #18
 8003b7a:	e00e      	b.n	8003b9a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d108      	bne.n	8003b94 <chk_lock+0xa0>
 8003b82:	4a09      	ldr	r2, [pc, #36]	; (8003ba8 <chk_lock+0xb4>)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	011b      	lsls	r3, r3, #4
 8003b88:	4413      	add	r3, r2
 8003b8a:	330c      	adds	r3, #12
 8003b8c:	881b      	ldrh	r3, [r3, #0]
 8003b8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b92:	d101      	bne.n	8003b98 <chk_lock+0xa4>
 8003b94:	2310      	movs	r3, #16
 8003b96:	e000      	b.n	8003b9a <chk_lock+0xa6>
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3714      	adds	r7, #20
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	20002570 	.word	0x20002570

08003bac <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	607b      	str	r3, [r7, #4]
 8003bb6:	e002      	b.n	8003bbe <enq_lock+0x12>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	3301      	adds	r3, #1
 8003bbc:	607b      	str	r3, [r7, #4]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d806      	bhi.n	8003bd2 <enq_lock+0x26>
 8003bc4:	4a09      	ldr	r2, [pc, #36]	; (8003bec <enq_lock+0x40>)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	011b      	lsls	r3, r3, #4
 8003bca:	4413      	add	r3, r2
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1f2      	bne.n	8003bb8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	bf14      	ite	ne
 8003bd8:	2301      	movne	r3, #1
 8003bda:	2300      	moveq	r3, #0
 8003bdc:	b2db      	uxtb	r3, r3
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	370c      	adds	r7, #12
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	20002570 	.word	0x20002570

08003bf0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	60fb      	str	r3, [r7, #12]
 8003bfe:	e01f      	b.n	8003c40 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8003c00:	4a41      	ldr	r2, [pc, #260]	; (8003d08 <inc_lock+0x118>)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	011b      	lsls	r3, r3, #4
 8003c06:	4413      	add	r3, r2
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d113      	bne.n	8003c3a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8003c12:	4a3d      	ldr	r2, [pc, #244]	; (8003d08 <inc_lock+0x118>)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	011b      	lsls	r3, r3, #4
 8003c18:	4413      	add	r3, r2
 8003c1a:	3304      	adds	r3, #4
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d109      	bne.n	8003c3a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8003c26:	4a38      	ldr	r2, [pc, #224]	; (8003d08 <inc_lock+0x118>)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	011b      	lsls	r3, r3, #4
 8003c2c:	4413      	add	r3, r2
 8003c2e:	3308      	adds	r3, #8
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d006      	beq.n	8003c48 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	60fb      	str	r3, [r7, #12]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d9dc      	bls.n	8003c00 <inc_lock+0x10>
 8003c46:	e000      	b.n	8003c4a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8003c48:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d132      	bne.n	8003cb6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003c50:	2300      	movs	r3, #0
 8003c52:	60fb      	str	r3, [r7, #12]
 8003c54:	e002      	b.n	8003c5c <inc_lock+0x6c>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	3301      	adds	r3, #1
 8003c5a:	60fb      	str	r3, [r7, #12]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d806      	bhi.n	8003c70 <inc_lock+0x80>
 8003c62:	4a29      	ldr	r2, [pc, #164]	; (8003d08 <inc_lock+0x118>)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	011b      	lsls	r3, r3, #4
 8003c68:	4413      	add	r3, r2
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d1f2      	bne.n	8003c56 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d101      	bne.n	8003c7a <inc_lock+0x8a>
 8003c76:	2300      	movs	r3, #0
 8003c78:	e040      	b.n	8003cfc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	4922      	ldr	r1, [pc, #136]	; (8003d08 <inc_lock+0x118>)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	011b      	lsls	r3, r3, #4
 8003c84:	440b      	add	r3, r1
 8003c86:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689a      	ldr	r2, [r3, #8]
 8003c8c:	491e      	ldr	r1, [pc, #120]	; (8003d08 <inc_lock+0x118>)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	011b      	lsls	r3, r3, #4
 8003c92:	440b      	add	r3, r1
 8003c94:	3304      	adds	r3, #4
 8003c96:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	695a      	ldr	r2, [r3, #20]
 8003c9c:	491a      	ldr	r1, [pc, #104]	; (8003d08 <inc_lock+0x118>)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	011b      	lsls	r3, r3, #4
 8003ca2:	440b      	add	r3, r1
 8003ca4:	3308      	adds	r3, #8
 8003ca6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8003ca8:	4a17      	ldr	r2, [pc, #92]	; (8003d08 <inc_lock+0x118>)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	011b      	lsls	r3, r3, #4
 8003cae:	4413      	add	r3, r2
 8003cb0:	330c      	adds	r3, #12
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d009      	beq.n	8003cd0 <inc_lock+0xe0>
 8003cbc:	4a12      	ldr	r2, [pc, #72]	; (8003d08 <inc_lock+0x118>)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	011b      	lsls	r3, r3, #4
 8003cc2:	4413      	add	r3, r2
 8003cc4:	330c      	adds	r3, #12
 8003cc6:	881b      	ldrh	r3, [r3, #0]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d001      	beq.n	8003cd0 <inc_lock+0xe0>
 8003ccc:	2300      	movs	r3, #0
 8003cce:	e015      	b.n	8003cfc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d108      	bne.n	8003ce8 <inc_lock+0xf8>
 8003cd6:	4a0c      	ldr	r2, [pc, #48]	; (8003d08 <inc_lock+0x118>)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	011b      	lsls	r3, r3, #4
 8003cdc:	4413      	add	r3, r2
 8003cde:	330c      	adds	r3, #12
 8003ce0:	881b      	ldrh	r3, [r3, #0]
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	e001      	b.n	8003cec <inc_lock+0xfc>
 8003ce8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cec:	4906      	ldr	r1, [pc, #24]	; (8003d08 <inc_lock+0x118>)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	011b      	lsls	r3, r3, #4
 8003cf2:	440b      	add	r3, r1
 8003cf4:	330c      	adds	r3, #12
 8003cf6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	3301      	adds	r3, #1
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3714      	adds	r7, #20
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr
 8003d08:	20002570 	.word	0x20002570

08003d0c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b085      	sub	sp, #20
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	3b01      	subs	r3, #1
 8003d18:	607b      	str	r3, [r7, #4]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d825      	bhi.n	8003d6c <dec_lock+0x60>
		n = Files[i].ctr;
 8003d20:	4a17      	ldr	r2, [pc, #92]	; (8003d80 <dec_lock+0x74>)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	011b      	lsls	r3, r3, #4
 8003d26:	4413      	add	r3, r2
 8003d28:	330c      	adds	r3, #12
 8003d2a:	881b      	ldrh	r3, [r3, #0]
 8003d2c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8003d2e:	89fb      	ldrh	r3, [r7, #14]
 8003d30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d34:	d101      	bne.n	8003d3a <dec_lock+0x2e>
 8003d36:	2300      	movs	r3, #0
 8003d38:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8003d3a:	89fb      	ldrh	r3, [r7, #14]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d002      	beq.n	8003d46 <dec_lock+0x3a>
 8003d40:	89fb      	ldrh	r3, [r7, #14]
 8003d42:	3b01      	subs	r3, #1
 8003d44:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8003d46:	4a0e      	ldr	r2, [pc, #56]	; (8003d80 <dec_lock+0x74>)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	011b      	lsls	r3, r3, #4
 8003d4c:	4413      	add	r3, r2
 8003d4e:	330c      	adds	r3, #12
 8003d50:	89fa      	ldrh	r2, [r7, #14]
 8003d52:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003d54:	89fb      	ldrh	r3, [r7, #14]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d105      	bne.n	8003d66 <dec_lock+0x5a>
 8003d5a:	4a09      	ldr	r2, [pc, #36]	; (8003d80 <dec_lock+0x74>)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	011b      	lsls	r3, r3, #4
 8003d60:	4413      	add	r3, r2
 8003d62:	2200      	movs	r2, #0
 8003d64:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8003d66:	2300      	movs	r3, #0
 8003d68:	737b      	strb	r3, [r7, #13]
 8003d6a:	e001      	b.n	8003d70 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8003d70:	7b7b      	ldrb	r3, [r7, #13]
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3714      	adds	r7, #20
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	20002570 	.word	0x20002570

08003d84 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	60fb      	str	r3, [r7, #12]
 8003d90:	e010      	b.n	8003db4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003d92:	4a0d      	ldr	r2, [pc, #52]	; (8003dc8 <clear_lock+0x44>)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	011b      	lsls	r3, r3, #4
 8003d98:	4413      	add	r3, r2
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d105      	bne.n	8003dae <clear_lock+0x2a>
 8003da2:	4a09      	ldr	r2, [pc, #36]	; (8003dc8 <clear_lock+0x44>)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	011b      	lsls	r3, r3, #4
 8003da8:	4413      	add	r3, r2
 8003daa:	2200      	movs	r2, #0
 8003dac:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	3301      	adds	r3, #1
 8003db2:	60fb      	str	r3, [r7, #12]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d9eb      	bls.n	8003d92 <clear_lock+0xe>
	}
}
 8003dba:	bf00      	nop
 8003dbc:	bf00      	nop
 8003dbe:	3714      	adds	r7, #20
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr
 8003dc8:	20002570 	.word	0x20002570

08003dcc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b086      	sub	sp, #24
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	78db      	ldrb	r3, [r3, #3]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d034      	beq.n	8003e4a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003de4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	7858      	ldrb	r0, [r3, #1]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003df0:	2301      	movs	r3, #1
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	f7ff fd40 	bl	8003878 <disk_write>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d002      	beq.n	8003e04 <sync_window+0x38>
			res = FR_DISK_ERR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	73fb      	strb	r3, [r7, #15]
 8003e02:	e022      	b.n	8003e4a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	1ad2      	subs	r2, r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d217      	bcs.n	8003e4a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	789b      	ldrb	r3, [r3, #2]
 8003e1e:	613b      	str	r3, [r7, #16]
 8003e20:	e010      	b.n	8003e44 <sync_window+0x78>
					wsect += fs->fsize;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	697a      	ldr	r2, [r7, #20]
 8003e28:	4413      	add	r3, r2
 8003e2a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	7858      	ldrb	r0, [r3, #1]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003e36:	2301      	movs	r3, #1
 8003e38:	697a      	ldr	r2, [r7, #20]
 8003e3a:	f7ff fd1d 	bl	8003878 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	3b01      	subs	r3, #1
 8003e42:	613b      	str	r3, [r7, #16]
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d8eb      	bhi.n	8003e22 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8003e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3718      	adds	r7, #24
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e66:	683a      	ldr	r2, [r7, #0]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d01b      	beq.n	8003ea4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f7ff ffad 	bl	8003dcc <sync_window>
 8003e72:	4603      	mov	r3, r0
 8003e74:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003e76:	7bfb      	ldrb	r3, [r7, #15]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d113      	bne.n	8003ea4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	7858      	ldrb	r0, [r3, #1]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003e86:	2301      	movs	r3, #1
 8003e88:	683a      	ldr	r2, [r7, #0]
 8003e8a:	f7ff fcd5 	bl	8003838 <disk_read>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d004      	beq.n	8003e9e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003e94:	f04f 33ff 	mov.w	r3, #4294967295
 8003e98:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	683a      	ldr	r2, [r7, #0]
 8003ea2:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8003ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3710      	adds	r7, #16
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
	...

08003eb0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f7ff ff87 	bl	8003dcc <sync_window>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003ec2:	7bfb      	ldrb	r3, [r7, #15]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d159      	bne.n	8003f7c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	2b03      	cmp	r3, #3
 8003ece:	d149      	bne.n	8003f64 <sync_fs+0xb4>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	791b      	ldrb	r3, [r3, #4]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d145      	bne.n	8003f64 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	899b      	ldrh	r3, [r3, #12]
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	2100      	movs	r1, #0
 8003ee6:	f7ff fda8 	bl	8003a3a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	3338      	adds	r3, #56	; 0x38
 8003eee:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003ef2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7ff fd37 	bl	800396a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	3338      	adds	r3, #56	; 0x38
 8003f00:	4921      	ldr	r1, [pc, #132]	; (8003f88 <sync_fs+0xd8>)
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7ff fd4c 	bl	80039a0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	3338      	adds	r3, #56	; 0x38
 8003f0c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003f10:	491e      	ldr	r1, [pc, #120]	; (8003f8c <sync_fs+0xdc>)
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7ff fd44 	bl	80039a0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	3338      	adds	r3, #56	; 0x38
 8003f1c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	4619      	mov	r1, r3
 8003f26:	4610      	mov	r0, r2
 8003f28:	f7ff fd3a 	bl	80039a0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	3338      	adds	r3, #56	; 0x38
 8003f30:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	695b      	ldr	r3, [r3, #20]
 8003f38:	4619      	mov	r1, r3
 8003f3a:	4610      	mov	r0, r2
 8003f3c:	f7ff fd30 	bl	80039a0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f44:	1c5a      	adds	r2, r3, #1
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	7858      	ldrb	r0, [r3, #1]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f58:	2301      	movs	r3, #1
 8003f5a:	f7ff fc8d 	bl	8003878 <disk_write>
			fs->fsi_flag = 0;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	785b      	ldrb	r3, [r3, #1]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	2100      	movs	r1, #0
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7ff fca3 	bl	80038b8 <disk_ioctl>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d001      	beq.n	8003f7c <sync_fs+0xcc>
 8003f78:	2301      	movs	r3, #1
 8003f7a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8003f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	41615252 	.word	0x41615252
 8003f8c:	61417272 	.word	0x61417272

08003f90 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	3b02      	subs	r3, #2
 8003f9e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	69db      	ldr	r3, [r3, #28]
 8003fa4:	3b02      	subs	r3, #2
 8003fa6:	683a      	ldr	r2, [r7, #0]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d301      	bcc.n	8003fb0 <clust2sect+0x20>
 8003fac:	2300      	movs	r3, #0
 8003fae:	e008      	b.n	8003fc2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	895b      	ldrh	r3, [r3, #10]
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	fb03 f202 	mul.w	r2, r3, r2
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc0:	4413      	add	r3, r2
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	370c      	adds	r7, #12
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr

08003fce <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	b086      	sub	sp, #24
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
 8003fd6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d904      	bls.n	8003fee <get_fat+0x20>
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	69db      	ldr	r3, [r3, #28]
 8003fe8:	683a      	ldr	r2, [r7, #0]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d302      	bcc.n	8003ff4 <get_fat+0x26>
		val = 1;	/* Internal error */
 8003fee:	2301      	movs	r3, #1
 8003ff0:	617b      	str	r3, [r7, #20]
 8003ff2:	e0bb      	b.n	800416c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ff8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	2b03      	cmp	r3, #3
 8004000:	f000 8083 	beq.w	800410a <get_fat+0x13c>
 8004004:	2b03      	cmp	r3, #3
 8004006:	f300 80a7 	bgt.w	8004158 <get_fat+0x18a>
 800400a:	2b01      	cmp	r3, #1
 800400c:	d002      	beq.n	8004014 <get_fat+0x46>
 800400e:	2b02      	cmp	r3, #2
 8004010:	d056      	beq.n	80040c0 <get_fat+0xf2>
 8004012:	e0a1      	b.n	8004158 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	60fb      	str	r3, [r7, #12]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	085b      	lsrs	r3, r3, #1
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	4413      	add	r3, r2
 8004020:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	899b      	ldrh	r3, [r3, #12]
 800402a:	4619      	mov	r1, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004032:	4413      	add	r3, r2
 8004034:	4619      	mov	r1, r3
 8004036:	6938      	ldr	r0, [r7, #16]
 8004038:	f7ff ff0c 	bl	8003e54 <move_window>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	f040 808d 	bne.w	800415e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	1c5a      	adds	r2, r3, #1
 8004048:	60fa      	str	r2, [r7, #12]
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	8992      	ldrh	r2, [r2, #12]
 800404e:	fbb3 f1f2 	udiv	r1, r3, r2
 8004052:	fb01 f202 	mul.w	r2, r1, r2
 8004056:	1a9b      	subs	r3, r3, r2
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	4413      	add	r3, r2
 800405c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004060:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	899b      	ldrh	r3, [r3, #12]
 800406a:	4619      	mov	r1, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004072:	4413      	add	r3, r2
 8004074:	4619      	mov	r1, r3
 8004076:	6938      	ldr	r0, [r7, #16]
 8004078:	f7ff feec 	bl	8003e54 <move_window>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d16f      	bne.n	8004162 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	899b      	ldrh	r3, [r3, #12]
 8004086:	461a      	mov	r2, r3
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	fbb3 f1f2 	udiv	r1, r3, r2
 800408e:	fb01 f202 	mul.w	r2, r1, r2
 8004092:	1a9b      	subs	r3, r3, r2
 8004094:	693a      	ldr	r2, [r7, #16]
 8004096:	4413      	add	r3, r2
 8004098:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800409c:	021b      	lsls	r3, r3, #8
 800409e:	461a      	mov	r2, r3
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	f003 0301 	and.w	r3, r3, #1
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d002      	beq.n	80040b6 <get_fat+0xe8>
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	091b      	lsrs	r3, r3, #4
 80040b4:	e002      	b.n	80040bc <get_fat+0xee>
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040bc:	617b      	str	r3, [r7, #20]
			break;
 80040be:	e055      	b.n	800416c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	899b      	ldrh	r3, [r3, #12]
 80040c8:	085b      	lsrs	r3, r3, #1
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	4619      	mov	r1, r3
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	fbb3 f3f1 	udiv	r3, r3, r1
 80040d4:	4413      	add	r3, r2
 80040d6:	4619      	mov	r1, r3
 80040d8:	6938      	ldr	r0, [r7, #16]
 80040da:	f7ff febb 	bl	8003e54 <move_window>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d140      	bne.n	8004166 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	8992      	ldrh	r2, [r2, #12]
 80040f2:	fbb3 f0f2 	udiv	r0, r3, r2
 80040f6:	fb00 f202 	mul.w	r2, r0, r2
 80040fa:	1a9b      	subs	r3, r3, r2
 80040fc:	440b      	add	r3, r1
 80040fe:	4618      	mov	r0, r3
 8004100:	f7ff fbf8 	bl	80038f4 <ld_word>
 8004104:	4603      	mov	r3, r0
 8004106:	617b      	str	r3, [r7, #20]
			break;
 8004108:	e030      	b.n	800416c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	899b      	ldrh	r3, [r3, #12]
 8004112:	089b      	lsrs	r3, r3, #2
 8004114:	b29b      	uxth	r3, r3
 8004116:	4619      	mov	r1, r3
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	fbb3 f3f1 	udiv	r3, r3, r1
 800411e:	4413      	add	r3, r2
 8004120:	4619      	mov	r1, r3
 8004122:	6938      	ldr	r0, [r7, #16]
 8004124:	f7ff fe96 	bl	8003e54 <move_window>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d11d      	bne.n	800416a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	693a      	ldr	r2, [r7, #16]
 800413a:	8992      	ldrh	r2, [r2, #12]
 800413c:	fbb3 f0f2 	udiv	r0, r3, r2
 8004140:	fb00 f202 	mul.w	r2, r0, r2
 8004144:	1a9b      	subs	r3, r3, r2
 8004146:	440b      	add	r3, r1
 8004148:	4618      	mov	r0, r3
 800414a:	f7ff fbeb 	bl	8003924 <ld_dword>
 800414e:	4603      	mov	r3, r0
 8004150:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004154:	617b      	str	r3, [r7, #20]
			break;
 8004156:	e009      	b.n	800416c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004158:	2301      	movs	r3, #1
 800415a:	617b      	str	r3, [r7, #20]
 800415c:	e006      	b.n	800416c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800415e:	bf00      	nop
 8004160:	e004      	b.n	800416c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004162:	bf00      	nop
 8004164:	e002      	b.n	800416c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004166:	bf00      	nop
 8004168:	e000      	b.n	800416c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800416a:	bf00      	nop
		}
	}

	return val;
 800416c:	697b      	ldr	r3, [r7, #20]
}
 800416e:	4618      	mov	r0, r3
 8004170:	3718      	adds	r7, #24
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004176:	b590      	push	{r4, r7, lr}
 8004178:	b089      	sub	sp, #36	; 0x24
 800417a:	af00      	add	r7, sp, #0
 800417c:	60f8      	str	r0, [r7, #12]
 800417e:	60b9      	str	r1, [r7, #8]
 8004180:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004182:	2302      	movs	r3, #2
 8004184:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	2b01      	cmp	r3, #1
 800418a:	f240 8102 	bls.w	8004392 <put_fat+0x21c>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	69db      	ldr	r3, [r3, #28]
 8004192:	68ba      	ldr	r2, [r7, #8]
 8004194:	429a      	cmp	r2, r3
 8004196:	f080 80fc 	bcs.w	8004392 <put_fat+0x21c>
		switch (fs->fs_type) {
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	2b03      	cmp	r3, #3
 80041a0:	f000 80b6 	beq.w	8004310 <put_fat+0x19a>
 80041a4:	2b03      	cmp	r3, #3
 80041a6:	f300 80fd 	bgt.w	80043a4 <put_fat+0x22e>
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d003      	beq.n	80041b6 <put_fat+0x40>
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	f000 8083 	beq.w	80042ba <put_fat+0x144>
 80041b4:	e0f6      	b.n	80043a4 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	61bb      	str	r3, [r7, #24]
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	085b      	lsrs	r3, r3, #1
 80041be:	69ba      	ldr	r2, [r7, #24]
 80041c0:	4413      	add	r3, r2
 80041c2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	899b      	ldrh	r3, [r3, #12]
 80041cc:	4619      	mov	r1, r3
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	fbb3 f3f1 	udiv	r3, r3, r1
 80041d4:	4413      	add	r3, r2
 80041d6:	4619      	mov	r1, r3
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f7ff fe3b 	bl	8003e54 <move_window>
 80041de:	4603      	mov	r3, r0
 80041e0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80041e2:	7ffb      	ldrb	r3, [r7, #31]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f040 80d6 	bne.w	8004396 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	1c5a      	adds	r2, r3, #1
 80041f4:	61ba      	str	r2, [r7, #24]
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	8992      	ldrh	r2, [r2, #12]
 80041fa:	fbb3 f0f2 	udiv	r0, r3, r2
 80041fe:	fb00 f202 	mul.w	r2, r0, r2
 8004202:	1a9b      	subs	r3, r3, r2
 8004204:	440b      	add	r3, r1
 8004206:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	f003 0301 	and.w	r3, r3, #1
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00d      	beq.n	800422e <put_fat+0xb8>
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	b25b      	sxtb	r3, r3
 8004218:	f003 030f 	and.w	r3, r3, #15
 800421c:	b25a      	sxtb	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	b2db      	uxtb	r3, r3
 8004222:	011b      	lsls	r3, r3, #4
 8004224:	b25b      	sxtb	r3, r3
 8004226:	4313      	orrs	r3, r2
 8004228:	b25b      	sxtb	r3, r3
 800422a:	b2db      	uxtb	r3, r3
 800422c:	e001      	b.n	8004232 <put_fat+0xbc>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	b2db      	uxtb	r3, r3
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2201      	movs	r2, #1
 800423a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	899b      	ldrh	r3, [r3, #12]
 8004244:	4619      	mov	r1, r3
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	fbb3 f3f1 	udiv	r3, r3, r1
 800424c:	4413      	add	r3, r2
 800424e:	4619      	mov	r1, r3
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f7ff fdff 	bl	8003e54 <move_window>
 8004256:	4603      	mov	r3, r0
 8004258:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800425a:	7ffb      	ldrb	r3, [r7, #31]
 800425c:	2b00      	cmp	r3, #0
 800425e:	f040 809c 	bne.w	800439a <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	899b      	ldrh	r3, [r3, #12]
 800426c:	461a      	mov	r2, r3
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	fbb3 f0f2 	udiv	r0, r3, r2
 8004274:	fb00 f202 	mul.w	r2, r0, r2
 8004278:	1a9b      	subs	r3, r3, r2
 800427a:	440b      	add	r3, r1
 800427c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	f003 0301 	and.w	r3, r3, #1
 8004284:	2b00      	cmp	r3, #0
 8004286:	d003      	beq.n	8004290 <put_fat+0x11a>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	091b      	lsrs	r3, r3, #4
 800428c:	b2db      	uxtb	r3, r3
 800428e:	e00e      	b.n	80042ae <put_fat+0x138>
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	b25b      	sxtb	r3, r3
 8004296:	f023 030f 	bic.w	r3, r3, #15
 800429a:	b25a      	sxtb	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	0a1b      	lsrs	r3, r3, #8
 80042a0:	b25b      	sxtb	r3, r3
 80042a2:	f003 030f 	and.w	r3, r3, #15
 80042a6:	b25b      	sxtb	r3, r3
 80042a8:	4313      	orrs	r3, r2
 80042aa:	b25b      	sxtb	r3, r3
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2201      	movs	r2, #1
 80042b6:	70da      	strb	r2, [r3, #3]
			break;
 80042b8:	e074      	b.n	80043a4 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	899b      	ldrh	r3, [r3, #12]
 80042c2:	085b      	lsrs	r3, r3, #1
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	4619      	mov	r1, r3
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80042ce:	4413      	add	r3, r2
 80042d0:	4619      	mov	r1, r3
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f7ff fdbe 	bl	8003e54 <move_window>
 80042d8:	4603      	mov	r3, r0
 80042da:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80042dc:	7ffb      	ldrb	r3, [r7, #31]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d15d      	bne.n	800439e <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	005b      	lsls	r3, r3, #1
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	8992      	ldrh	r2, [r2, #12]
 80042f0:	fbb3 f0f2 	udiv	r0, r3, r2
 80042f4:	fb00 f202 	mul.w	r2, r0, r2
 80042f8:	1a9b      	subs	r3, r3, r2
 80042fa:	440b      	add	r3, r1
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	b292      	uxth	r2, r2
 8004300:	4611      	mov	r1, r2
 8004302:	4618      	mov	r0, r3
 8004304:	f7ff fb31 	bl	800396a <st_word>
			fs->wflag = 1;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2201      	movs	r2, #1
 800430c:	70da      	strb	r2, [r3, #3]
			break;
 800430e:	e049      	b.n	80043a4 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	899b      	ldrh	r3, [r3, #12]
 8004318:	089b      	lsrs	r3, r3, #2
 800431a:	b29b      	uxth	r3, r3
 800431c:	4619      	mov	r1, r3
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	fbb3 f3f1 	udiv	r3, r3, r1
 8004324:	4413      	add	r3, r2
 8004326:	4619      	mov	r1, r3
 8004328:	68f8      	ldr	r0, [r7, #12]
 800432a:	f7ff fd93 	bl	8003e54 <move_window>
 800432e:	4603      	mov	r3, r0
 8004330:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004332:	7ffb      	ldrb	r3, [r7, #31]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d134      	bne.n	80043a2 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	8992      	ldrh	r2, [r2, #12]
 800434c:	fbb3 f0f2 	udiv	r0, r3, r2
 8004350:	fb00 f202 	mul.w	r2, r0, r2
 8004354:	1a9b      	subs	r3, r3, r2
 8004356:	440b      	add	r3, r1
 8004358:	4618      	mov	r0, r3
 800435a:	f7ff fae3 	bl	8003924 <ld_dword>
 800435e:	4603      	mov	r3, r0
 8004360:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004364:	4323      	orrs	r3, r4
 8004366:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	8992      	ldrh	r2, [r2, #12]
 8004376:	fbb3 f0f2 	udiv	r0, r3, r2
 800437a:	fb00 f202 	mul.w	r2, r0, r2
 800437e:	1a9b      	subs	r3, r3, r2
 8004380:	440b      	add	r3, r1
 8004382:	6879      	ldr	r1, [r7, #4]
 8004384:	4618      	mov	r0, r3
 8004386:	f7ff fb0b 	bl	80039a0 <st_dword>
			fs->wflag = 1;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2201      	movs	r2, #1
 800438e:	70da      	strb	r2, [r3, #3]
			break;
 8004390:	e008      	b.n	80043a4 <put_fat+0x22e>
		}
	}
 8004392:	bf00      	nop
 8004394:	e006      	b.n	80043a4 <put_fat+0x22e>
			if (res != FR_OK) break;
 8004396:	bf00      	nop
 8004398:	e004      	b.n	80043a4 <put_fat+0x22e>
			if (res != FR_OK) break;
 800439a:	bf00      	nop
 800439c:	e002      	b.n	80043a4 <put_fat+0x22e>
			if (res != FR_OK) break;
 800439e:	bf00      	nop
 80043a0:	e000      	b.n	80043a4 <put_fat+0x22e>
			if (res != FR_OK) break;
 80043a2:	bf00      	nop
	return res;
 80043a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3724      	adds	r7, #36	; 0x24
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd90      	pop	{r4, r7, pc}

080043ae <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b088      	sub	sp, #32
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	60f8      	str	r0, [r7, #12]
 80043b6:	60b9      	str	r1, [r7, #8]
 80043b8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80043ba:	2300      	movs	r3, #0
 80043bc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d904      	bls.n	80043d4 <remove_chain+0x26>
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	69db      	ldr	r3, [r3, #28]
 80043ce:	68ba      	ldr	r2, [r7, #8]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d301      	bcc.n	80043d8 <remove_chain+0x2a>
 80043d4:	2302      	movs	r3, #2
 80043d6:	e04b      	b.n	8004470 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00c      	beq.n	80043f8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80043de:	f04f 32ff 	mov.w	r2, #4294967295
 80043e2:	6879      	ldr	r1, [r7, #4]
 80043e4:	69b8      	ldr	r0, [r7, #24]
 80043e6:	f7ff fec6 	bl	8004176 <put_fat>
 80043ea:	4603      	mov	r3, r0
 80043ec:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80043ee:	7ffb      	ldrb	r3, [r7, #31]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d001      	beq.n	80043f8 <remove_chain+0x4a>
 80043f4:	7ffb      	ldrb	r3, [r7, #31]
 80043f6:	e03b      	b.n	8004470 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80043f8:	68b9      	ldr	r1, [r7, #8]
 80043fa:	68f8      	ldr	r0, [r7, #12]
 80043fc:	f7ff fde7 	bl	8003fce <get_fat>
 8004400:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d031      	beq.n	800446c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d101      	bne.n	8004412 <remove_chain+0x64>
 800440e:	2302      	movs	r3, #2
 8004410:	e02e      	b.n	8004470 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004418:	d101      	bne.n	800441e <remove_chain+0x70>
 800441a:	2301      	movs	r3, #1
 800441c:	e028      	b.n	8004470 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800441e:	2200      	movs	r2, #0
 8004420:	68b9      	ldr	r1, [r7, #8]
 8004422:	69b8      	ldr	r0, [r7, #24]
 8004424:	f7ff fea7 	bl	8004176 <put_fat>
 8004428:	4603      	mov	r3, r0
 800442a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800442c:	7ffb      	ldrb	r3, [r7, #31]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d001      	beq.n	8004436 <remove_chain+0x88>
 8004432:	7ffb      	ldrb	r3, [r7, #31]
 8004434:	e01c      	b.n	8004470 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	699a      	ldr	r2, [r3, #24]
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	69db      	ldr	r3, [r3, #28]
 800443e:	3b02      	subs	r3, #2
 8004440:	429a      	cmp	r2, r3
 8004442:	d20b      	bcs.n	800445c <remove_chain+0xae>
			fs->free_clst++;
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	699b      	ldr	r3, [r3, #24]
 8004448:	1c5a      	adds	r2, r3, #1
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	791b      	ldrb	r3, [r3, #4]
 8004452:	f043 0301 	orr.w	r3, r3, #1
 8004456:	b2da      	uxtb	r2, r3
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	69db      	ldr	r3, [r3, #28]
 8004464:	68ba      	ldr	r2, [r7, #8]
 8004466:	429a      	cmp	r2, r3
 8004468:	d3c6      	bcc.n	80043f8 <remove_chain+0x4a>
 800446a:	e000      	b.n	800446e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800446c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3720      	adds	r7, #32
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b088      	sub	sp, #32
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d10d      	bne.n	80044aa <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d004      	beq.n	80044a4 <create_chain+0x2c>
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	69db      	ldr	r3, [r3, #28]
 800449e:	69ba      	ldr	r2, [r7, #24]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d31b      	bcc.n	80044dc <create_chain+0x64>
 80044a4:	2301      	movs	r3, #1
 80044a6:	61bb      	str	r3, [r7, #24]
 80044a8:	e018      	b.n	80044dc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80044aa:	6839      	ldr	r1, [r7, #0]
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f7ff fd8e 	bl	8003fce <get_fat>
 80044b2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d801      	bhi.n	80044be <create_chain+0x46>
 80044ba:	2301      	movs	r3, #1
 80044bc:	e070      	b.n	80045a0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c4:	d101      	bne.n	80044ca <create_chain+0x52>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	e06a      	b.n	80045a0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	69db      	ldr	r3, [r3, #28]
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d201      	bcs.n	80044d8 <create_chain+0x60>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	e063      	b.n	80045a0 <create_chain+0x128>
		scl = clst;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	3301      	adds	r3, #1
 80044e4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	69db      	ldr	r3, [r3, #28]
 80044ea:	69fa      	ldr	r2, [r7, #28]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d307      	bcc.n	8004500 <create_chain+0x88>
				ncl = 2;
 80044f0:	2302      	movs	r3, #2
 80044f2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80044f4:	69fa      	ldr	r2, [r7, #28]
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d901      	bls.n	8004500 <create_chain+0x88>
 80044fc:	2300      	movs	r3, #0
 80044fe:	e04f      	b.n	80045a0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004500:	69f9      	ldr	r1, [r7, #28]
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f7ff fd63 	bl	8003fce <get_fat>
 8004508:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00e      	beq.n	800452e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d003      	beq.n	800451e <create_chain+0xa6>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800451c:	d101      	bne.n	8004522 <create_chain+0xaa>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	e03e      	b.n	80045a0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004522:	69fa      	ldr	r2, [r7, #28]
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	429a      	cmp	r2, r3
 8004528:	d1da      	bne.n	80044e0 <create_chain+0x68>
 800452a:	2300      	movs	r3, #0
 800452c:	e038      	b.n	80045a0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800452e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004530:	f04f 32ff 	mov.w	r2, #4294967295
 8004534:	69f9      	ldr	r1, [r7, #28]
 8004536:	6938      	ldr	r0, [r7, #16]
 8004538:	f7ff fe1d 	bl	8004176 <put_fat>
 800453c:	4603      	mov	r3, r0
 800453e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004540:	7dfb      	ldrb	r3, [r7, #23]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d109      	bne.n	800455a <create_chain+0xe2>
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d006      	beq.n	800455a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800454c:	69fa      	ldr	r2, [r7, #28]
 800454e:	6839      	ldr	r1, [r7, #0]
 8004550:	6938      	ldr	r0, [r7, #16]
 8004552:	f7ff fe10 	bl	8004176 <put_fat>
 8004556:	4603      	mov	r3, r0
 8004558:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800455a:	7dfb      	ldrb	r3, [r7, #23]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d116      	bne.n	800458e <create_chain+0x116>
		fs->last_clst = ncl;
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	69fa      	ldr	r2, [r7, #28]
 8004564:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	699a      	ldr	r2, [r3, #24]
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	69db      	ldr	r3, [r3, #28]
 800456e:	3b02      	subs	r3, #2
 8004570:	429a      	cmp	r2, r3
 8004572:	d804      	bhi.n	800457e <create_chain+0x106>
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	1e5a      	subs	r2, r3, #1
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	791b      	ldrb	r3, [r3, #4]
 8004582:	f043 0301 	orr.w	r3, r3, #1
 8004586:	b2da      	uxtb	r2, r3
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	711a      	strb	r2, [r3, #4]
 800458c:	e007      	b.n	800459e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800458e:	7dfb      	ldrb	r3, [r7, #23]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d102      	bne.n	800459a <create_chain+0x122>
 8004594:	f04f 33ff 	mov.w	r3, #4294967295
 8004598:	e000      	b.n	800459c <create_chain+0x124>
 800459a:	2301      	movs	r3, #1
 800459c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800459e:	69fb      	ldr	r3, [r7, #28]
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3720      	adds	r7, #32
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b087      	sub	sp, #28
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045bc:	3304      	adds	r3, #4
 80045be:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	899b      	ldrh	r3, [r3, #12]
 80045c4:	461a      	mov	r2, r3
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80045cc:	68fa      	ldr	r2, [r7, #12]
 80045ce:	8952      	ldrh	r2, [r2, #10]
 80045d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80045d4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	1d1a      	adds	r2, r3, #4
 80045da:	613a      	str	r2, [r7, #16]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d101      	bne.n	80045ea <clmt_clust+0x42>
 80045e6:	2300      	movs	r3, #0
 80045e8:	e010      	b.n	800460c <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d307      	bcc.n	8004602 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	617b      	str	r3, [r7, #20]
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	3304      	adds	r3, #4
 80045fe:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004600:	e7e9      	b.n	80045d6 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8004602:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	4413      	add	r3, r2
}
 800460c:	4618      	mov	r0, r3
 800460e:	371c      	adds	r7, #28
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b086      	sub	sp, #24
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800462e:	d204      	bcs.n	800463a <dir_sdi+0x22>
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	f003 031f 	and.w	r3, r3, #31
 8004636:	2b00      	cmp	r3, #0
 8004638:	d001      	beq.n	800463e <dir_sdi+0x26>
		return FR_INT_ERR;
 800463a:	2302      	movs	r3, #2
 800463c:	e071      	b.n	8004722 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	683a      	ldr	r2, [r7, #0]
 8004642:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d106      	bne.n	800465e <dir_sdi+0x46>
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	2b02      	cmp	r3, #2
 8004656:	d902      	bls.n	800465e <dir_sdi+0x46>
		clst = fs->dirbase;
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d10c      	bne.n	800467e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	095b      	lsrs	r3, r3, #5
 8004668:	693a      	ldr	r2, [r7, #16]
 800466a:	8912      	ldrh	r2, [r2, #8]
 800466c:	4293      	cmp	r3, r2
 800466e:	d301      	bcc.n	8004674 <dir_sdi+0x5c>
 8004670:	2302      	movs	r3, #2
 8004672:	e056      	b.n	8004722 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	61da      	str	r2, [r3, #28]
 800467c:	e02d      	b.n	80046da <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	895b      	ldrh	r3, [r3, #10]
 8004682:	461a      	mov	r2, r3
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	899b      	ldrh	r3, [r3, #12]
 8004688:	fb02 f303 	mul.w	r3, r2, r3
 800468c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800468e:	e019      	b.n	80046c4 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6979      	ldr	r1, [r7, #20]
 8004694:	4618      	mov	r0, r3
 8004696:	f7ff fc9a 	bl	8003fce <get_fat>
 800469a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a2:	d101      	bne.n	80046a8 <dir_sdi+0x90>
 80046a4:	2301      	movs	r3, #1
 80046a6:	e03c      	b.n	8004722 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d904      	bls.n	80046b8 <dir_sdi+0xa0>
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	69db      	ldr	r3, [r3, #28]
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d301      	bcc.n	80046bc <dir_sdi+0xa4>
 80046b8:	2302      	movs	r3, #2
 80046ba:	e032      	b.n	8004722 <dir_sdi+0x10a>
			ofs -= csz;
 80046bc:	683a      	ldr	r2, [r7, #0]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80046c4:	683a      	ldr	r2, [r7, #0]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d2e1      	bcs.n	8004690 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80046cc:	6979      	ldr	r1, [r7, #20]
 80046ce:	6938      	ldr	r0, [r7, #16]
 80046d0:	f7ff fc5e 	bl	8003f90 <clust2sect>
 80046d4:	4602      	mov	r2, r0
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	697a      	ldr	r2, [r7, #20]
 80046de:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	69db      	ldr	r3, [r3, #28]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d101      	bne.n	80046ec <dir_sdi+0xd4>
 80046e8:	2302      	movs	r3, #2
 80046ea:	e01a      	b.n	8004722 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	69da      	ldr	r2, [r3, #28]
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	899b      	ldrh	r3, [r3, #12]
 80046f4:	4619      	mov	r1, r3
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	fbb3 f3f1 	udiv	r3, r3, r1
 80046fc:	441a      	add	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	899b      	ldrh	r3, [r3, #12]
 800470c:	461a      	mov	r2, r3
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	fbb3 f0f2 	udiv	r0, r3, r2
 8004714:	fb00 f202 	mul.w	r2, r0, r2
 8004718:	1a9b      	subs	r3, r3, r2
 800471a:	18ca      	adds	r2, r1, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3718      	adds	r7, #24
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b086      	sub	sp, #24
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
 8004732:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	3320      	adds	r3, #32
 8004740:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	69db      	ldr	r3, [r3, #28]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d003      	beq.n	8004752 <dir_next+0x28>
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004750:	d301      	bcc.n	8004756 <dir_next+0x2c>
 8004752:	2304      	movs	r3, #4
 8004754:	e0bb      	b.n	80048ce <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	899b      	ldrh	r3, [r3, #12]
 800475a:	461a      	mov	r2, r3
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	fbb3 f1f2 	udiv	r1, r3, r2
 8004762:	fb01 f202 	mul.w	r2, r1, r2
 8004766:	1a9b      	subs	r3, r3, r2
 8004768:	2b00      	cmp	r3, #0
 800476a:	f040 809d 	bne.w	80048a8 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	69db      	ldr	r3, [r3, #28]
 8004772:	1c5a      	adds	r2, r3, #1
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	699b      	ldr	r3, [r3, #24]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d10b      	bne.n	8004798 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	095b      	lsrs	r3, r3, #5
 8004784:	68fa      	ldr	r2, [r7, #12]
 8004786:	8912      	ldrh	r2, [r2, #8]
 8004788:	4293      	cmp	r3, r2
 800478a:	f0c0 808d 	bcc.w	80048a8 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	61da      	str	r2, [r3, #28]
 8004794:	2304      	movs	r3, #4
 8004796:	e09a      	b.n	80048ce <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	899b      	ldrh	r3, [r3, #12]
 800479c:	461a      	mov	r2, r3
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	8952      	ldrh	r2, [r2, #10]
 80047a8:	3a01      	subs	r2, #1
 80047aa:	4013      	ands	r3, r2
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d17b      	bne.n	80048a8 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	4619      	mov	r1, r3
 80047b8:	4610      	mov	r0, r2
 80047ba:	f7ff fc08 	bl	8003fce <get_fat>
 80047be:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d801      	bhi.n	80047ca <dir_next+0xa0>
 80047c6:	2302      	movs	r3, #2
 80047c8:	e081      	b.n	80048ce <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d0:	d101      	bne.n	80047d6 <dir_next+0xac>
 80047d2:	2301      	movs	r3, #1
 80047d4:	e07b      	b.n	80048ce <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	69db      	ldr	r3, [r3, #28]
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d359      	bcc.n	8004894 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d104      	bne.n	80047f0 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	61da      	str	r2, [r3, #28]
 80047ec:	2304      	movs	r3, #4
 80047ee:	e06e      	b.n	80048ce <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	4619      	mov	r1, r3
 80047f8:	4610      	mov	r0, r2
 80047fa:	f7ff fe3d 	bl	8004478 <create_chain>
 80047fe:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d101      	bne.n	800480a <dir_next+0xe0>
 8004806:	2307      	movs	r3, #7
 8004808:	e061      	b.n	80048ce <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d101      	bne.n	8004814 <dir_next+0xea>
 8004810:	2302      	movs	r3, #2
 8004812:	e05c      	b.n	80048ce <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800481a:	d101      	bne.n	8004820 <dir_next+0xf6>
 800481c:	2301      	movs	r3, #1
 800481e:	e056      	b.n	80048ce <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004820:	68f8      	ldr	r0, [r7, #12]
 8004822:	f7ff fad3 	bl	8003dcc <sync_window>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d001      	beq.n	8004830 <dir_next+0x106>
 800482c:	2301      	movs	r3, #1
 800482e:	e04e      	b.n	80048ce <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	899b      	ldrh	r3, [r3, #12]
 800483a:	461a      	mov	r2, r3
 800483c:	2100      	movs	r1, #0
 800483e:	f7ff f8fc 	bl	8003a3a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004842:	2300      	movs	r3, #0
 8004844:	613b      	str	r3, [r7, #16]
 8004846:	6979      	ldr	r1, [r7, #20]
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	f7ff fba1 	bl	8003f90 <clust2sect>
 800484e:	4602      	mov	r2, r0
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	635a      	str	r2, [r3, #52]	; 0x34
 8004854:	e012      	b.n	800487c <dir_next+0x152>
						fs->wflag = 1;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2201      	movs	r2, #1
 800485a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800485c:	68f8      	ldr	r0, [r7, #12]
 800485e:	f7ff fab5 	bl	8003dcc <sync_window>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d001      	beq.n	800486c <dir_next+0x142>
 8004868:	2301      	movs	r3, #1
 800486a:	e030      	b.n	80048ce <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	3301      	adds	r3, #1
 8004870:	613b      	str	r3, [r7, #16]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004876:	1c5a      	adds	r2, r3, #1
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	635a      	str	r2, [r3, #52]	; 0x34
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	895b      	ldrh	r3, [r3, #10]
 8004880:	461a      	mov	r2, r3
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	4293      	cmp	r3, r2
 8004886:	d3e6      	bcc.n	8004856 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	1ad2      	subs	r2, r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800489a:	6979      	ldr	r1, [r7, #20]
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	f7ff fb77 	bl	8003f90 <clust2sect>
 80048a2:	4602      	mov	r2, r0
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	68ba      	ldr	r2, [r7, #8]
 80048ac:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	899b      	ldrh	r3, [r3, #12]
 80048b8:	461a      	mov	r2, r3
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	fbb3 f0f2 	udiv	r0, r3, r2
 80048c0:	fb00 f202 	mul.w	r2, r0, r2
 80048c4:	1a9b      	subs	r3, r3, r2
 80048c6:	18ca      	adds	r2, r1, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3718      	adds	r7, #24
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}

080048d6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80048d6:	b580      	push	{r7, lr}
 80048d8:	b086      	sub	sp, #24
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
 80048de:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80048e6:	2100      	movs	r1, #0
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f7ff fe95 	bl	8004618 <dir_sdi>
 80048ee:	4603      	mov	r3, r0
 80048f0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80048f2:	7dfb      	ldrb	r3, [r7, #23]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d12b      	bne.n	8004950 <dir_alloc+0x7a>
		n = 0;
 80048f8:	2300      	movs	r3, #0
 80048fa:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	69db      	ldr	r3, [r3, #28]
 8004900:	4619      	mov	r1, r3
 8004902:	68f8      	ldr	r0, [r7, #12]
 8004904:	f7ff faa6 	bl	8003e54 <move_window>
 8004908:	4603      	mov	r3, r0
 800490a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800490c:	7dfb      	ldrb	r3, [r7, #23]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d11d      	bne.n	800494e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	2be5      	cmp	r3, #229	; 0xe5
 800491a:	d004      	beq.n	8004926 <dir_alloc+0x50>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a1b      	ldr	r3, [r3, #32]
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d107      	bne.n	8004936 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	3301      	adds	r3, #1
 800492a:	613b      	str	r3, [r7, #16]
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	429a      	cmp	r2, r3
 8004932:	d102      	bne.n	800493a <dir_alloc+0x64>
 8004934:	e00c      	b.n	8004950 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004936:	2300      	movs	r3, #0
 8004938:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800493a:	2101      	movs	r1, #1
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f7ff fef4 	bl	800472a <dir_next>
 8004942:	4603      	mov	r3, r0
 8004944:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8004946:	7dfb      	ldrb	r3, [r7, #23]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d0d7      	beq.n	80048fc <dir_alloc+0x26>
 800494c:	e000      	b.n	8004950 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800494e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004950:	7dfb      	ldrb	r3, [r7, #23]
 8004952:	2b04      	cmp	r3, #4
 8004954:	d101      	bne.n	800495a <dir_alloc+0x84>
 8004956:	2307      	movs	r3, #7
 8004958:	75fb      	strb	r3, [r7, #23]
	return res;
 800495a:	7dfb      	ldrb	r3, [r7, #23]
}
 800495c:	4618      	mov	r0, r3
 800495e:	3718      	adds	r7, #24
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	331a      	adds	r3, #26
 8004972:	4618      	mov	r0, r3
 8004974:	f7fe ffbe 	bl	80038f4 <ld_word>
 8004978:	4603      	mov	r3, r0
 800497a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	2b03      	cmp	r3, #3
 8004982:	d109      	bne.n	8004998 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	3314      	adds	r3, #20
 8004988:	4618      	mov	r0, r3
 800498a:	f7fe ffb3 	bl	80038f4 <ld_word>
 800498e:	4603      	mov	r3, r0
 8004990:	041b      	lsls	r3, r3, #16
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	4313      	orrs	r3, r2
 8004996:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8004998:	68fb      	ldr	r3, [r7, #12]
}
 800499a:	4618      	mov	r0, r3
 800499c:	3710      	adds	r7, #16
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80049a2:	b580      	push	{r7, lr}
 80049a4:	b084      	sub	sp, #16
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	60f8      	str	r0, [r7, #12]
 80049aa:	60b9      	str	r1, [r7, #8]
 80049ac:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	331a      	adds	r3, #26
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	b292      	uxth	r2, r2
 80049b6:	4611      	mov	r1, r2
 80049b8:	4618      	mov	r0, r3
 80049ba:	f7fe ffd6 	bl	800396a <st_word>
	if (fs->fs_type == FS_FAT32) {
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	2b03      	cmp	r3, #3
 80049c4:	d109      	bne.n	80049da <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	f103 0214 	add.w	r2, r3, #20
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	0c1b      	lsrs	r3, r3, #16
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	4619      	mov	r1, r3
 80049d4:	4610      	mov	r0, r2
 80049d6:	f7fe ffc8 	bl	800396a <st_word>
	}
}
 80049da:	bf00      	nop
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
	...

080049e4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80049e4:	b590      	push	{r4, r7, lr}
 80049e6:	b087      	sub	sp, #28
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	331a      	adds	r3, #26
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7fe ff7e 	bl	80038f4 <ld_word>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d001      	beq.n	8004a02 <cmp_lfn+0x1e>
 80049fe:	2300      	movs	r3, #0
 8004a00:	e059      	b.n	8004ab6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a0a:	1e5a      	subs	r2, r3, #1
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	005b      	lsls	r3, r3, #1
 8004a10:	4413      	add	r3, r2
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	4413      	add	r3, r2
 8004a16:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8004a18:	2301      	movs	r3, #1
 8004a1a:	81fb      	strh	r3, [r7, #14]
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	613b      	str	r3, [r7, #16]
 8004a20:	e033      	b.n	8004a8a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8004a22:	4a27      	ldr	r2, [pc, #156]	; (8004ac0 <cmp_lfn+0xdc>)
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	4413      	add	r3, r2
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	4413      	add	r3, r2
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7fe ff5f 	bl	80038f4 <ld_word>
 8004a36:	4603      	mov	r3, r0
 8004a38:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8004a3a:	89fb      	ldrh	r3, [r7, #14]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d01a      	beq.n	8004a76 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	2bfe      	cmp	r3, #254	; 0xfe
 8004a44:	d812      	bhi.n	8004a6c <cmp_lfn+0x88>
 8004a46:	89bb      	ldrh	r3, [r7, #12]
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f001 fe11 	bl	8006670 <ff_wtoupper>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	461c      	mov	r4, r3
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	1c5a      	adds	r2, r3, #1
 8004a56:	617a      	str	r2, [r7, #20]
 8004a58:	005b      	lsls	r3, r3, #1
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	881b      	ldrh	r3, [r3, #0]
 8004a60:	4618      	mov	r0, r3
 8004a62:	f001 fe05 	bl	8006670 <ff_wtoupper>
 8004a66:	4603      	mov	r3, r0
 8004a68:	429c      	cmp	r4, r3
 8004a6a:	d001      	beq.n	8004a70 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	e022      	b.n	8004ab6 <cmp_lfn+0xd2>
			}
			wc = uc;
 8004a70:	89bb      	ldrh	r3, [r7, #12]
 8004a72:	81fb      	strh	r3, [r7, #14]
 8004a74:	e006      	b.n	8004a84 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8004a76:	89bb      	ldrh	r3, [r7, #12]
 8004a78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d001      	beq.n	8004a84 <cmp_lfn+0xa0>
 8004a80:	2300      	movs	r3, #0
 8004a82:	e018      	b.n	8004ab6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	3301      	adds	r3, #1
 8004a88:	613b      	str	r3, [r7, #16]
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	2b0c      	cmp	r3, #12
 8004a8e:	d9c8      	bls.n	8004a22 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d00b      	beq.n	8004ab4 <cmp_lfn+0xd0>
 8004a9c:	89fb      	ldrh	r3, [r7, #14]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d008      	beq.n	8004ab4 <cmp_lfn+0xd0>
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	005b      	lsls	r3, r3, #1
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	881b      	ldrh	r3, [r3, #0]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d001      	beq.n	8004ab4 <cmp_lfn+0xd0>
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	e000      	b.n	8004ab6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8004ab4:	2301      	movs	r3, #1
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	371c      	adds	r7, #28
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd90      	pop	{r4, r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	080069f8 	.word	0x080069f8

08004ac4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b088      	sub	sp, #32
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	4611      	mov	r1, r2
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	71fb      	strb	r3, [r7, #7]
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	330d      	adds	r3, #13
 8004ade:	79ba      	ldrb	r2, [r7, #6]
 8004ae0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	330b      	adds	r3, #11
 8004ae6:	220f      	movs	r2, #15
 8004ae8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	330c      	adds	r3, #12
 8004aee:	2200      	movs	r2, #0
 8004af0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	331a      	adds	r3, #26
 8004af6:	2100      	movs	r1, #0
 8004af8:	4618      	mov	r0, r3
 8004afa:	f7fe ff36 	bl	800396a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8004afe:	79fb      	ldrb	r3, [r7, #7]
 8004b00:	1e5a      	subs	r2, r3, #1
 8004b02:	4613      	mov	r3, r2
 8004b04:	005b      	lsls	r3, r3, #1
 8004b06:	4413      	add	r3, r2
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	4413      	add	r3, r2
 8004b0c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	82fb      	strh	r3, [r7, #22]
 8004b12:	2300      	movs	r3, #0
 8004b14:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8004b16:	8afb      	ldrh	r3, [r7, #22]
 8004b18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d007      	beq.n	8004b30 <put_lfn+0x6c>
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	1c5a      	adds	r2, r3, #1
 8004b24:	61fa      	str	r2, [r7, #28]
 8004b26:	005b      	lsls	r3, r3, #1
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	881b      	ldrh	r3, [r3, #0]
 8004b2e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8004b30:	4a17      	ldr	r2, [pc, #92]	; (8004b90 <put_lfn+0xcc>)
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	4413      	add	r3, r2
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	461a      	mov	r2, r3
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	8afa      	ldrh	r2, [r7, #22]
 8004b40:	4611      	mov	r1, r2
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7fe ff11 	bl	800396a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8004b48:	8afb      	ldrh	r3, [r7, #22]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d102      	bne.n	8004b54 <put_lfn+0x90>
 8004b4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b52:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	3301      	adds	r3, #1
 8004b58:	61bb      	str	r3, [r7, #24]
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	2b0c      	cmp	r3, #12
 8004b5e:	d9da      	bls.n	8004b16 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8004b60:	8afb      	ldrh	r3, [r7, #22]
 8004b62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d006      	beq.n	8004b78 <put_lfn+0xb4>
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	005b      	lsls	r3, r3, #1
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	4413      	add	r3, r2
 8004b72:	881b      	ldrh	r3, [r3, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d103      	bne.n	8004b80 <put_lfn+0xbc>
 8004b78:	79fb      	ldrb	r3, [r7, #7]
 8004b7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b7e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	79fa      	ldrb	r2, [r7, #7]
 8004b84:	701a      	strb	r2, [r3, #0]
}
 8004b86:	bf00      	nop
 8004b88:	3720      	adds	r7, #32
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	080069f8 	.word	0x080069f8

08004b94 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b08c      	sub	sp, #48	; 0x30
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	607a      	str	r2, [r7, #4]
 8004ba0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8004ba2:	220b      	movs	r2, #11
 8004ba4:	68b9      	ldr	r1, [r7, #8]
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f7fe ff26 	bl	80039f8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	2b05      	cmp	r3, #5
 8004bb0:	d92b      	bls.n	8004c0a <gen_numname+0x76>
		sr = seq;
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8004bb6:	e022      	b.n	8004bfe <gen_numname+0x6a>
			wc = *lfn++;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	1c9a      	adds	r2, r3, #2
 8004bbc:	607a      	str	r2, [r7, #4]
 8004bbe:	881b      	ldrh	r3, [r3, #0]
 8004bc0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bc6:	e017      	b.n	8004bf8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	005a      	lsls	r2, r3, #1
 8004bcc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004bce:	f003 0301 	and.w	r3, r3, #1
 8004bd2:	4413      	add	r3, r2
 8004bd4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8004bd6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004bd8:	085b      	lsrs	r3, r3, #1
 8004bda:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d005      	beq.n	8004bf2 <gen_numname+0x5e>
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8004bec:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8004bf0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8004bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bfa:	2b0f      	cmp	r3, #15
 8004bfc:	d9e4      	bls.n	8004bc8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	881b      	ldrh	r3, [r3, #0]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1d8      	bne.n	8004bb8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8004c0a:	2307      	movs	r3, #7
 8004c0c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	f003 030f 	and.w	r3, r3, #15
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	3330      	adds	r3, #48	; 0x30
 8004c1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8004c1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004c22:	2b39      	cmp	r3, #57	; 0x39
 8004c24:	d904      	bls.n	8004c30 <gen_numname+0x9c>
 8004c26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004c2a:	3307      	adds	r3, #7
 8004c2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8004c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c32:	1e5a      	subs	r2, r3, #1
 8004c34:	62ba      	str	r2, [r7, #40]	; 0x28
 8004c36:	3330      	adds	r3, #48	; 0x30
 8004c38:	443b      	add	r3, r7
 8004c3a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004c3e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	091b      	lsrs	r3, r3, #4
 8004c46:	603b      	str	r3, [r7, #0]
	} while (seq);
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d1df      	bne.n	8004c0e <gen_numname+0x7a>
	ns[i] = '~';
 8004c4e:	f107 0214 	add.w	r2, r7, #20
 8004c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c54:	4413      	add	r3, r2
 8004c56:	227e      	movs	r2, #126	; 0x7e
 8004c58:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c5e:	e002      	b.n	8004c66 <gen_numname+0xd2>
 8004c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c62:	3301      	adds	r3, #1
 8004c64:	627b      	str	r3, [r7, #36]	; 0x24
 8004c66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d205      	bcs.n	8004c7a <gen_numname+0xe6>
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c72:	4413      	add	r3, r2
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	2b20      	cmp	r3, #32
 8004c78:	d1f2      	bne.n	8004c60 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8004c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7c:	2b07      	cmp	r3, #7
 8004c7e:	d807      	bhi.n	8004c90 <gen_numname+0xfc>
 8004c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c82:	1c5a      	adds	r2, r3, #1
 8004c84:	62ba      	str	r2, [r7, #40]	; 0x28
 8004c86:	3330      	adds	r3, #48	; 0x30
 8004c88:	443b      	add	r3, r7
 8004c8a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8004c8e:	e000      	b.n	8004c92 <gen_numname+0xfe>
 8004c90:	2120      	movs	r1, #32
 8004c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c94:	1c5a      	adds	r2, r3, #1
 8004c96:	627a      	str	r2, [r7, #36]	; 0x24
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	460a      	mov	r2, r1
 8004c9e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8004ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca2:	2b07      	cmp	r3, #7
 8004ca4:	d9e9      	bls.n	8004c7a <gen_numname+0xe6>
}
 8004ca6:	bf00      	nop
 8004ca8:	bf00      	nop
 8004caa:	3730      	adds	r7, #48	; 0x30
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8004cbc:	230b      	movs	r3, #11
 8004cbe:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8004cc0:	7bfb      	ldrb	r3, [r7, #15]
 8004cc2:	b2da      	uxtb	r2, r3
 8004cc4:	0852      	lsrs	r2, r2, #1
 8004cc6:	01db      	lsls	r3, r3, #7
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	b2da      	uxtb	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	1c59      	adds	r1, r3, #1
 8004cd0:	6079      	str	r1, [r7, #4]
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	60bb      	str	r3, [r7, #8]
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1ed      	bne.n	8004cc0 <sum_sfn+0x10>
	return sum;
 8004ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3714      	adds	r7, #20
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr

08004cf2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b086      	sub	sp, #24
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004d00:	2100      	movs	r1, #0
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f7ff fc88 	bl	8004618 <dir_sdi>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004d0c:	7dfb      	ldrb	r3, [r7, #23]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d001      	beq.n	8004d16 <dir_find+0x24>
 8004d12:	7dfb      	ldrb	r3, [r7, #23]
 8004d14:	e0a9      	b.n	8004e6a <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8004d16:	23ff      	movs	r3, #255	; 0xff
 8004d18:	753b      	strb	r3, [r7, #20]
 8004d1a:	7d3b      	ldrb	r3, [r7, #20]
 8004d1c:	757b      	strb	r3, [r7, #21]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f04f 32ff 	mov.w	r2, #4294967295
 8004d24:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	69db      	ldr	r3, [r3, #28]
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	6938      	ldr	r0, [r7, #16]
 8004d2e:	f7ff f891 	bl	8003e54 <move_window>
 8004d32:	4603      	mov	r3, r0
 8004d34:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004d36:	7dfb      	ldrb	r3, [r7, #23]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	f040 8090 	bne.w	8004e5e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004d46:	7dbb      	ldrb	r3, [r7, #22]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d102      	bne.n	8004d52 <dir_find+0x60>
 8004d4c:	2304      	movs	r3, #4
 8004d4e:	75fb      	strb	r3, [r7, #23]
 8004d50:	e08a      	b.n	8004e68 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	330b      	adds	r3, #11
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d5e:	73fb      	strb	r3, [r7, #15]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	7bfa      	ldrb	r2, [r7, #15]
 8004d64:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8004d66:	7dbb      	ldrb	r3, [r7, #22]
 8004d68:	2be5      	cmp	r3, #229	; 0xe5
 8004d6a:	d007      	beq.n	8004d7c <dir_find+0x8a>
 8004d6c:	7bfb      	ldrb	r3, [r7, #15]
 8004d6e:	f003 0308 	and.w	r3, r3, #8
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d009      	beq.n	8004d8a <dir_find+0x98>
 8004d76:	7bfb      	ldrb	r3, [r7, #15]
 8004d78:	2b0f      	cmp	r3, #15
 8004d7a:	d006      	beq.n	8004d8a <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8004d7c:	23ff      	movs	r3, #255	; 0xff
 8004d7e:	757b      	strb	r3, [r7, #21]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f04f 32ff 	mov.w	r2, #4294967295
 8004d86:	631a      	str	r2, [r3, #48]	; 0x30
 8004d88:	e05e      	b.n	8004e48 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8004d8a:	7bfb      	ldrb	r3, [r7, #15]
 8004d8c:	2b0f      	cmp	r3, #15
 8004d8e:	d136      	bne.n	8004dfe <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d154      	bne.n	8004e48 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8004d9e:	7dbb      	ldrb	r3, [r7, #22]
 8004da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00d      	beq.n	8004dc4 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a1b      	ldr	r3, [r3, #32]
 8004dac:	7b5b      	ldrb	r3, [r3, #13]
 8004dae:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8004db0:	7dbb      	ldrb	r3, [r7, #22]
 8004db2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004db6:	75bb      	strb	r3, [r7, #22]
 8004db8:	7dbb      	ldrb	r3, [r7, #22]
 8004dba:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	695a      	ldr	r2, [r3, #20]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8004dc4:	7dba      	ldrb	r2, [r7, #22]
 8004dc6:	7d7b      	ldrb	r3, [r7, #21]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d115      	bne.n	8004df8 <dir_find+0x106>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a1b      	ldr	r3, [r3, #32]
 8004dd0:	330d      	adds	r3, #13
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	7d3a      	ldrb	r2, [r7, #20]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d10e      	bne.n	8004df8 <dir_find+0x106>
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	691a      	ldr	r2, [r3, #16]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	4619      	mov	r1, r3
 8004de4:	4610      	mov	r0, r2
 8004de6:	f7ff fdfd 	bl	80049e4 <cmp_lfn>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d003      	beq.n	8004df8 <dir_find+0x106>
 8004df0:	7d7b      	ldrb	r3, [r7, #21]
 8004df2:	3b01      	subs	r3, #1
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	e000      	b.n	8004dfa <dir_find+0x108>
 8004df8:	23ff      	movs	r3, #255	; 0xff
 8004dfa:	757b      	strb	r3, [r7, #21]
 8004dfc:	e024      	b.n	8004e48 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8004dfe:	7d7b      	ldrb	r3, [r7, #21]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d109      	bne.n	8004e18 <dir_find+0x126>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a1b      	ldr	r3, [r3, #32]
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f7ff ff51 	bl	8004cb0 <sum_sfn>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	461a      	mov	r2, r3
 8004e12:	7d3b      	ldrb	r3, [r7, #20]
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d024      	beq.n	8004e62 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004e1e:	f003 0301 	and.w	r3, r3, #1
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d10a      	bne.n	8004e3c <dir_find+0x14a>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a18      	ldr	r0, [r3, #32]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	3324      	adds	r3, #36	; 0x24
 8004e2e:	220b      	movs	r2, #11
 8004e30:	4619      	mov	r1, r3
 8004e32:	f7fe fe1d 	bl	8003a70 <mem_cmp>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d014      	beq.n	8004e66 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8004e3c:	23ff      	movs	r3, #255	; 0xff
 8004e3e:	757b      	strb	r3, [r7, #21]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f04f 32ff 	mov.w	r2, #4294967295
 8004e46:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8004e48:	2100      	movs	r1, #0
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f7ff fc6d 	bl	800472a <dir_next>
 8004e50:	4603      	mov	r3, r0
 8004e52:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004e54:	7dfb      	ldrb	r3, [r7, #23]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	f43f af65 	beq.w	8004d26 <dir_find+0x34>
 8004e5c:	e004      	b.n	8004e68 <dir_find+0x176>
		if (res != FR_OK) break;
 8004e5e:	bf00      	nop
 8004e60:	e002      	b.n	8004e68 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8004e62:	bf00      	nop
 8004e64:	e000      	b.n	8004e68 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8004e66:	bf00      	nop

	return res;
 8004e68:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3718      	adds	r7, #24
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
	...

08004e74 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b08c      	sub	sp, #48	; 0x30
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004e88:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d001      	beq.n	8004e94 <dir_register+0x20>
 8004e90:	2306      	movs	r3, #6
 8004e92:	e0e0      	b.n	8005056 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8004e94:	2300      	movs	r3, #0
 8004e96:	627b      	str	r3, [r7, #36]	; 0x24
 8004e98:	e002      	b.n	8004ea0 <dir_register+0x2c>
 8004e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	627b      	str	r3, [r7, #36]	; 0x24
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	691a      	ldr	r2, [r3, #16]
 8004ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea6:	005b      	lsls	r3, r3, #1
 8004ea8:	4413      	add	r3, r2
 8004eaa:	881b      	ldrh	r3, [r3, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d1f4      	bne.n	8004e9a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8004eb6:	f107 030c 	add.w	r3, r7, #12
 8004eba:	220c      	movs	r2, #12
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f7fe fd9b 	bl	80039f8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8004ec2:	7dfb      	ldrb	r3, [r7, #23]
 8004ec4:	f003 0301 	and.w	r3, r3, #1
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d032      	beq.n	8004f32 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2240      	movs	r2, #64	; 0x40
 8004ed0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ed8:	e016      	b.n	8004f08 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	691a      	ldr	r2, [r3, #16]
 8004ee4:	f107 010c 	add.w	r1, r7, #12
 8004ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eea:	f7ff fe53 	bl	8004b94 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f7ff feff 	bl	8004cf2 <dir_find>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8004efa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d106      	bne.n	8004f10 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8004f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f04:	3301      	adds	r3, #1
 8004f06:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0a:	2b63      	cmp	r3, #99	; 0x63
 8004f0c:	d9e5      	bls.n	8004eda <dir_register+0x66>
 8004f0e:	e000      	b.n	8004f12 <dir_register+0x9e>
			if (res != FR_OK) break;
 8004f10:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8004f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f14:	2b64      	cmp	r3, #100	; 0x64
 8004f16:	d101      	bne.n	8004f1c <dir_register+0xa8>
 8004f18:	2307      	movs	r3, #7
 8004f1a:	e09c      	b.n	8005056 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8004f1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004f20:	2b04      	cmp	r3, #4
 8004f22:	d002      	beq.n	8004f2a <dir_register+0xb6>
 8004f24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004f28:	e095      	b.n	8005056 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8004f2a:	7dfa      	ldrb	r2, [r7, #23]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8004f32:	7dfb      	ldrb	r3, [r7, #23]
 8004f34:	f003 0302 	and.w	r3, r3, #2
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d007      	beq.n	8004f4c <dir_register+0xd8>
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3e:	330c      	adds	r3, #12
 8004f40:	4a47      	ldr	r2, [pc, #284]	; (8005060 <dir_register+0x1ec>)
 8004f42:	fba2 2303 	umull	r2, r3, r2, r3
 8004f46:	089b      	lsrs	r3, r3, #2
 8004f48:	3301      	adds	r3, #1
 8004f4a:	e000      	b.n	8004f4e <dir_register+0xda>
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8004f50:	6a39      	ldr	r1, [r7, #32]
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f7ff fcbf 	bl	80048d6 <dir_alloc>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8004f5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d148      	bne.n	8004ff8 <dir_register+0x184>
 8004f66:	6a3b      	ldr	r3, [r7, #32]
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	623b      	str	r3, [r7, #32]
 8004f6c:	6a3b      	ldr	r3, [r7, #32]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d042      	beq.n	8004ff8 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	695a      	ldr	r2, [r3, #20]
 8004f76:	6a3b      	ldr	r3, [r7, #32]
 8004f78:	015b      	lsls	r3, r3, #5
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f7ff fb4a 	bl	8004618 <dir_sdi>
 8004f84:	4603      	mov	r3, r0
 8004f86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8004f8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d132      	bne.n	8004ff8 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	3324      	adds	r3, #36	; 0x24
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7ff fe8a 	bl	8004cb0 <sum_sfn>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	69db      	ldr	r3, [r3, #28]
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	69f8      	ldr	r0, [r7, #28]
 8004fa8:	f7fe ff54 	bl	8003e54 <move_window>
 8004fac:	4603      	mov	r3, r0
 8004fae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8004fb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d11d      	bne.n	8004ff6 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	6918      	ldr	r0, [r3, #16]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a19      	ldr	r1, [r3, #32]
 8004fc2:	6a3b      	ldr	r3, [r7, #32]
 8004fc4:	b2da      	uxtb	r2, r3
 8004fc6:	7efb      	ldrb	r3, [r7, #27]
 8004fc8:	f7ff fd7c 	bl	8004ac4 <put_lfn>
				fs->wflag = 1;
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8004fd2:	2100      	movs	r1, #0
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f7ff fba8 	bl	800472a <dir_next>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8004fe0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d107      	bne.n	8004ff8 <dir_register+0x184>
 8004fe8:	6a3b      	ldr	r3, [r7, #32]
 8004fea:	3b01      	subs	r3, #1
 8004fec:	623b      	str	r3, [r7, #32]
 8004fee:	6a3b      	ldr	r3, [r7, #32]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d1d5      	bne.n	8004fa0 <dir_register+0x12c>
 8004ff4:	e000      	b.n	8004ff8 <dir_register+0x184>
				if (res != FR_OK) break;
 8004ff6:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8004ff8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d128      	bne.n	8005052 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	69db      	ldr	r3, [r3, #28]
 8005004:	4619      	mov	r1, r3
 8005006:	69f8      	ldr	r0, [r7, #28]
 8005008:	f7fe ff24 	bl	8003e54 <move_window>
 800500c:	4603      	mov	r3, r0
 800500e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8005012:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005016:	2b00      	cmp	r3, #0
 8005018:	d11b      	bne.n	8005052 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	2220      	movs	r2, #32
 8005020:	2100      	movs	r1, #0
 8005022:	4618      	mov	r0, r3
 8005024:	f7fe fd09 	bl	8003a3a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a18      	ldr	r0, [r3, #32]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	3324      	adds	r3, #36	; 0x24
 8005030:	220b      	movs	r2, #11
 8005032:	4619      	mov	r1, r3
 8005034:	f7fe fce0 	bl	80039f8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	330c      	adds	r3, #12
 8005044:	f002 0218 	and.w	r2, r2, #24
 8005048:	b2d2      	uxtb	r2, r2
 800504a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	2201      	movs	r2, #1
 8005050:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005052:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005056:	4618      	mov	r0, r3
 8005058:	3730      	adds	r7, #48	; 0x30
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	4ec4ec4f 	.word	0x4ec4ec4f

08005064 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b08a      	sub	sp, #40	; 0x28
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	613b      	str	r3, [r7, #16]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	60fb      	str	r3, [r7, #12]
 800507c:	2300      	movs	r3, #0
 800507e:	617b      	str	r3, [r7, #20]
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	1c5a      	adds	r2, r3, #1
 8005088:	61ba      	str	r2, [r7, #24]
 800508a:	693a      	ldr	r2, [r7, #16]
 800508c:	4413      	add	r3, r2
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8005092:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005094:	2b1f      	cmp	r3, #31
 8005096:	d940      	bls.n	800511a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8005098:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800509a:	2b2f      	cmp	r3, #47	; 0x2f
 800509c:	d006      	beq.n	80050ac <create_name+0x48>
 800509e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80050a0:	2b5c      	cmp	r3, #92	; 0x5c
 80050a2:	d110      	bne.n	80050c6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80050a4:	e002      	b.n	80050ac <create_name+0x48>
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	3301      	adds	r3, #1
 80050aa:	61bb      	str	r3, [r7, #24]
 80050ac:	693a      	ldr	r2, [r7, #16]
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	4413      	add	r3, r2
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	2b2f      	cmp	r3, #47	; 0x2f
 80050b6:	d0f6      	beq.n	80050a6 <create_name+0x42>
 80050b8:	693a      	ldr	r2, [r7, #16]
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	4413      	add	r3, r2
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	2b5c      	cmp	r3, #92	; 0x5c
 80050c2:	d0f0      	beq.n	80050a6 <create_name+0x42>
			break;
 80050c4:	e02a      	b.n	800511c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	2bfe      	cmp	r3, #254	; 0xfe
 80050ca:	d901      	bls.n	80050d0 <create_name+0x6c>
 80050cc:	2306      	movs	r3, #6
 80050ce:	e17d      	b.n	80053cc <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80050d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80050d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80050d8:	2101      	movs	r1, #1
 80050da:	4618      	mov	r0, r3
 80050dc:	f001 fa8c 	bl	80065f8 <ff_convert>
 80050e0:	4603      	mov	r3, r0
 80050e2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80050e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d101      	bne.n	80050ee <create_name+0x8a>
 80050ea:	2306      	movs	r3, #6
 80050ec:	e16e      	b.n	80053cc <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80050ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80050f0:	2b7f      	cmp	r3, #127	; 0x7f
 80050f2:	d809      	bhi.n	8005108 <create_name+0xa4>
 80050f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80050f6:	4619      	mov	r1, r3
 80050f8:	488d      	ldr	r0, [pc, #564]	; (8005330 <create_name+0x2cc>)
 80050fa:	f7fe fce0 	bl	8003abe <chk_chr>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d001      	beq.n	8005108 <create_name+0xa4>
 8005104:	2306      	movs	r3, #6
 8005106:	e161      	b.n	80053cc <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	1c5a      	adds	r2, r3, #1
 800510c:	617a      	str	r2, [r7, #20]
 800510e:	005b      	lsls	r3, r3, #1
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	4413      	add	r3, r2
 8005114:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005116:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8005118:	e7b4      	b.n	8005084 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800511a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	441a      	add	r2, r3
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005126:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005128:	2b1f      	cmp	r3, #31
 800512a:	d801      	bhi.n	8005130 <create_name+0xcc>
 800512c:	2304      	movs	r3, #4
 800512e:	e000      	b.n	8005132 <create_name+0xce>
 8005130:	2300      	movs	r3, #0
 8005132:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005136:	e011      	b.n	800515c <create_name+0xf8>
		w = lfn[di - 1];
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800513e:	3b01      	subs	r3, #1
 8005140:	005b      	lsls	r3, r3, #1
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	4413      	add	r3, r2
 8005146:	881b      	ldrh	r3, [r3, #0]
 8005148:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800514a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800514c:	2b20      	cmp	r3, #32
 800514e:	d002      	beq.n	8005156 <create_name+0xf2>
 8005150:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005152:	2b2e      	cmp	r3, #46	; 0x2e
 8005154:	d106      	bne.n	8005164 <create_name+0x100>
		di--;
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	3b01      	subs	r3, #1
 800515a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1ea      	bne.n	8005138 <create_name+0xd4>
 8005162:	e000      	b.n	8005166 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8005164:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	005b      	lsls	r3, r3, #1
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	4413      	add	r3, r2
 800516e:	2200      	movs	r2, #0
 8005170:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d101      	bne.n	800517c <create_name+0x118>
 8005178:	2306      	movs	r3, #6
 800517a:	e127      	b.n	80053cc <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	3324      	adds	r3, #36	; 0x24
 8005180:	220b      	movs	r2, #11
 8005182:	2120      	movs	r1, #32
 8005184:	4618      	mov	r0, r3
 8005186:	f7fe fc58 	bl	8003a3a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800518a:	2300      	movs	r3, #0
 800518c:	61bb      	str	r3, [r7, #24]
 800518e:	e002      	b.n	8005196 <create_name+0x132>
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	3301      	adds	r3, #1
 8005194:	61bb      	str	r3, [r7, #24]
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	005b      	lsls	r3, r3, #1
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	4413      	add	r3, r2
 800519e:	881b      	ldrh	r3, [r3, #0]
 80051a0:	2b20      	cmp	r3, #32
 80051a2:	d0f5      	beq.n	8005190 <create_name+0x12c>
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	005b      	lsls	r3, r3, #1
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	4413      	add	r3, r2
 80051ac:	881b      	ldrh	r3, [r3, #0]
 80051ae:	2b2e      	cmp	r3, #46	; 0x2e
 80051b0:	d0ee      	beq.n	8005190 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d009      	beq.n	80051cc <create_name+0x168>
 80051b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80051bc:	f043 0303 	orr.w	r3, r3, #3
 80051c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80051c4:	e002      	b.n	80051cc <create_name+0x168>
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	3b01      	subs	r3, #1
 80051ca:	617b      	str	r3, [r7, #20]
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d009      	beq.n	80051e6 <create_name+0x182>
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80051d8:	3b01      	subs	r3, #1
 80051da:	005b      	lsls	r3, r3, #1
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	4413      	add	r3, r2
 80051e0:	881b      	ldrh	r3, [r3, #0]
 80051e2:	2b2e      	cmp	r3, #46	; 0x2e
 80051e4:	d1ef      	bne.n	80051c6 <create_name+0x162>

	i = b = 0; ni = 8;
 80051e6:	2300      	movs	r3, #0
 80051e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80051ec:	2300      	movs	r3, #0
 80051ee:	623b      	str	r3, [r7, #32]
 80051f0:	2308      	movs	r3, #8
 80051f2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	1c5a      	adds	r2, r3, #1
 80051f8:	61ba      	str	r2, [r7, #24]
 80051fa:	005b      	lsls	r3, r3, #1
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	4413      	add	r3, r2
 8005200:	881b      	ldrh	r3, [r3, #0]
 8005202:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8005204:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005206:	2b00      	cmp	r3, #0
 8005208:	f000 8090 	beq.w	800532c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800520c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800520e:	2b20      	cmp	r3, #32
 8005210:	d006      	beq.n	8005220 <create_name+0x1bc>
 8005212:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005214:	2b2e      	cmp	r3, #46	; 0x2e
 8005216:	d10a      	bne.n	800522e <create_name+0x1ca>
 8005218:	69ba      	ldr	r2, [r7, #24]
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	429a      	cmp	r2, r3
 800521e:	d006      	beq.n	800522e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8005220:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005224:	f043 0303 	orr.w	r3, r3, #3
 8005228:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800522c:	e07d      	b.n	800532a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800522e:	6a3a      	ldr	r2, [r7, #32]
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	429a      	cmp	r2, r3
 8005234:	d203      	bcs.n	800523e <create_name+0x1da>
 8005236:	69ba      	ldr	r2, [r7, #24]
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	429a      	cmp	r2, r3
 800523c:	d123      	bne.n	8005286 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	2b0b      	cmp	r3, #11
 8005242:	d106      	bne.n	8005252 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8005244:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005248:	f043 0303 	orr.w	r3, r3, #3
 800524c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005250:	e075      	b.n	800533e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8005252:	69ba      	ldr	r2, [r7, #24]
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	429a      	cmp	r2, r3
 8005258:	d005      	beq.n	8005266 <create_name+0x202>
 800525a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800525e:	f043 0303 	orr.w	r3, r3, #3
 8005262:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8005266:	69ba      	ldr	r2, [r7, #24]
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	429a      	cmp	r2, r3
 800526c:	d866      	bhi.n	800533c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	61bb      	str	r3, [r7, #24]
 8005272:	2308      	movs	r3, #8
 8005274:	623b      	str	r3, [r7, #32]
 8005276:	230b      	movs	r3, #11
 8005278:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800527a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005284:	e051      	b.n	800532a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8005286:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005288:	2b7f      	cmp	r3, #127	; 0x7f
 800528a:	d914      	bls.n	80052b6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800528c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800528e:	2100      	movs	r1, #0
 8005290:	4618      	mov	r0, r3
 8005292:	f001 f9b1 	bl	80065f8 <ff_convert>
 8005296:	4603      	mov	r3, r0
 8005298:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800529a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800529c:	2b00      	cmp	r3, #0
 800529e:	d004      	beq.n	80052aa <create_name+0x246>
 80052a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80052a2:	3b80      	subs	r3, #128	; 0x80
 80052a4:	4a23      	ldr	r2, [pc, #140]	; (8005334 <create_name+0x2d0>)
 80052a6:	5cd3      	ldrb	r3, [r2, r3]
 80052a8:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80052aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80052ae:	f043 0302 	orr.w	r3, r3, #2
 80052b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80052b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d007      	beq.n	80052cc <create_name+0x268>
 80052bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80052be:	4619      	mov	r1, r3
 80052c0:	481d      	ldr	r0, [pc, #116]	; (8005338 <create_name+0x2d4>)
 80052c2:	f7fe fbfc 	bl	8003abe <chk_chr>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d008      	beq.n	80052de <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80052cc:	235f      	movs	r3, #95	; 0x5f
 80052ce:	84bb      	strh	r3, [r7, #36]	; 0x24
 80052d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80052d4:	f043 0303 	orr.w	r3, r3, #3
 80052d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80052dc:	e01b      	b.n	8005316 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80052de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80052e0:	2b40      	cmp	r3, #64	; 0x40
 80052e2:	d909      	bls.n	80052f8 <create_name+0x294>
 80052e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80052e6:	2b5a      	cmp	r3, #90	; 0x5a
 80052e8:	d806      	bhi.n	80052f8 <create_name+0x294>
					b |= 2;
 80052ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80052ee:	f043 0302 	orr.w	r3, r3, #2
 80052f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80052f6:	e00e      	b.n	8005316 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80052f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80052fa:	2b60      	cmp	r3, #96	; 0x60
 80052fc:	d90b      	bls.n	8005316 <create_name+0x2b2>
 80052fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005300:	2b7a      	cmp	r3, #122	; 0x7a
 8005302:	d808      	bhi.n	8005316 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8005304:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005308:	f043 0301 	orr.w	r3, r3, #1
 800530c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005310:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005312:	3b20      	subs	r3, #32
 8005314:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8005316:	6a3b      	ldr	r3, [r7, #32]
 8005318:	1c5a      	adds	r2, r3, #1
 800531a:	623a      	str	r2, [r7, #32]
 800531c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800531e:	b2d1      	uxtb	r1, r2
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	4413      	add	r3, r2
 8005324:	460a      	mov	r2, r1
 8005326:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800532a:	e763      	b.n	80051f4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800532c:	bf00      	nop
 800532e:	e006      	b.n	800533e <create_name+0x2da>
 8005330:	08006918 	.word	0x08006918
 8005334:	08006978 	.word	0x08006978
 8005338:	08006924 	.word	0x08006924
			if (si > di) break;			/* No extension */
 800533c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005344:	2be5      	cmp	r3, #229	; 0xe5
 8005346:	d103      	bne.n	8005350 <create_name+0x2ec>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2205      	movs	r2, #5
 800534c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	2b08      	cmp	r3, #8
 8005354:	d104      	bne.n	8005360 <create_name+0x2fc>
 8005356:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8005360:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005364:	f003 030c 	and.w	r3, r3, #12
 8005368:	2b0c      	cmp	r3, #12
 800536a:	d005      	beq.n	8005378 <create_name+0x314>
 800536c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005370:	f003 0303 	and.w	r3, r3, #3
 8005374:	2b03      	cmp	r3, #3
 8005376:	d105      	bne.n	8005384 <create_name+0x320>
 8005378:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800537c:	f043 0302 	orr.w	r3, r3, #2
 8005380:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8005384:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005388:	f003 0302 	and.w	r3, r3, #2
 800538c:	2b00      	cmp	r3, #0
 800538e:	d117      	bne.n	80053c0 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8005390:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005394:	f003 0303 	and.w	r3, r3, #3
 8005398:	2b01      	cmp	r3, #1
 800539a:	d105      	bne.n	80053a8 <create_name+0x344>
 800539c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80053a0:	f043 0310 	orr.w	r3, r3, #16
 80053a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80053a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80053ac:	f003 030c 	and.w	r3, r3, #12
 80053b0:	2b04      	cmp	r3, #4
 80053b2:	d105      	bne.n	80053c0 <create_name+0x35c>
 80053b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80053b8:	f043 0308 	orr.w	r3, r3, #8
 80053bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80053c6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 80053ca:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3728      	adds	r7, #40	; 0x28
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b086      	sub	sp, #24
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80053e8:	e002      	b.n	80053f0 <follow_path+0x1c>
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	3301      	adds	r3, #1
 80053ee:	603b      	str	r3, [r7, #0]
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	2b2f      	cmp	r3, #47	; 0x2f
 80053f6:	d0f8      	beq.n	80053ea <follow_path+0x16>
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	2b5c      	cmp	r3, #92	; 0x5c
 80053fe:	d0f4      	beq.n	80053ea <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	2200      	movs	r2, #0
 8005404:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	2b1f      	cmp	r3, #31
 800540c:	d80a      	bhi.n	8005424 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2280      	movs	r2, #128	; 0x80
 8005412:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8005416:	2100      	movs	r1, #0
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f7ff f8fd 	bl	8004618 <dir_sdi>
 800541e:	4603      	mov	r3, r0
 8005420:	75fb      	strb	r3, [r7, #23]
 8005422:	e048      	b.n	80054b6 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005424:	463b      	mov	r3, r7
 8005426:	4619      	mov	r1, r3
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f7ff fe1b 	bl	8005064 <create_name>
 800542e:	4603      	mov	r3, r0
 8005430:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005432:	7dfb      	ldrb	r3, [r7, #23]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d139      	bne.n	80054ac <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f7ff fc5a 	bl	8004cf2 <dir_find>
 800543e:	4603      	mov	r3, r0
 8005440:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005448:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800544a:	7dfb      	ldrb	r3, [r7, #23]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00a      	beq.n	8005466 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005450:	7dfb      	ldrb	r3, [r7, #23]
 8005452:	2b04      	cmp	r3, #4
 8005454:	d12c      	bne.n	80054b0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005456:	7afb      	ldrb	r3, [r7, #11]
 8005458:	f003 0304 	and.w	r3, r3, #4
 800545c:	2b00      	cmp	r3, #0
 800545e:	d127      	bne.n	80054b0 <follow_path+0xdc>
 8005460:	2305      	movs	r3, #5
 8005462:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005464:	e024      	b.n	80054b0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005466:	7afb      	ldrb	r3, [r7, #11]
 8005468:	f003 0304 	and.w	r3, r3, #4
 800546c:	2b00      	cmp	r3, #0
 800546e:	d121      	bne.n	80054b4 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	799b      	ldrb	r3, [r3, #6]
 8005474:	f003 0310 	and.w	r3, r3, #16
 8005478:	2b00      	cmp	r3, #0
 800547a:	d102      	bne.n	8005482 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800547c:	2305      	movs	r3, #5
 800547e:	75fb      	strb	r3, [r7, #23]
 8005480:	e019      	b.n	80054b6 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	695b      	ldr	r3, [r3, #20]
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	8992      	ldrh	r2, [r2, #12]
 8005490:	fbb3 f0f2 	udiv	r0, r3, r2
 8005494:	fb00 f202 	mul.w	r2, r0, r2
 8005498:	1a9b      	subs	r3, r3, r2
 800549a:	440b      	add	r3, r1
 800549c:	4619      	mov	r1, r3
 800549e:	68f8      	ldr	r0, [r7, #12]
 80054a0:	f7ff fa60 	bl	8004964 <ld_clust>
 80054a4:	4602      	mov	r2, r0
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80054aa:	e7bb      	b.n	8005424 <follow_path+0x50>
			if (res != FR_OK) break;
 80054ac:	bf00      	nop
 80054ae:	e002      	b.n	80054b6 <follow_path+0xe2>
				break;
 80054b0:	bf00      	nop
 80054b2:	e000      	b.n	80054b6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80054b4:	bf00      	nop
			}
		}
	}

	return res;
 80054b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3718      	adds	r7, #24
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b087      	sub	sp, #28
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80054c8:	f04f 33ff 	mov.w	r3, #4294967295
 80054cc:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d031      	beq.n	800553a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	617b      	str	r3, [r7, #20]
 80054dc:	e002      	b.n	80054e4 <get_ldnumber+0x24>
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	3301      	adds	r3, #1
 80054e2:	617b      	str	r3, [r7, #20]
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	2b1f      	cmp	r3, #31
 80054ea:	d903      	bls.n	80054f4 <get_ldnumber+0x34>
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	2b3a      	cmp	r3, #58	; 0x3a
 80054f2:	d1f4      	bne.n	80054de <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	2b3a      	cmp	r3, #58	; 0x3a
 80054fa:	d11c      	bne.n	8005536 <get_ldnumber+0x76>
			tp = *path;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	1c5a      	adds	r2, r3, #1
 8005506:	60fa      	str	r2, [r7, #12]
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	3b30      	subs	r3, #48	; 0x30
 800550c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	2b09      	cmp	r3, #9
 8005512:	d80e      	bhi.n	8005532 <get_ldnumber+0x72>
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	429a      	cmp	r2, r3
 800551a:	d10a      	bne.n	8005532 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d107      	bne.n	8005532 <get_ldnumber+0x72>
					vol = (int)i;
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	3301      	adds	r3, #1
 800552a:	617b      	str	r3, [r7, #20]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	697a      	ldr	r2, [r7, #20]
 8005530:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	e002      	b.n	800553c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005536:	2300      	movs	r3, #0
 8005538:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800553a:	693b      	ldr	r3, [r7, #16]
}
 800553c:	4618      	mov	r0, r3
 800553e:	371c      	adds	r7, #28
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	70da      	strb	r2, [r3, #3]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f04f 32ff 	mov.w	r2, #4294967295
 800555e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005560:	6839      	ldr	r1, [r7, #0]
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f7fe fc76 	bl	8003e54 <move_window>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d001      	beq.n	8005572 <check_fs+0x2a>
 800556e:	2304      	movs	r3, #4
 8005570:	e038      	b.n	80055e4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	3338      	adds	r3, #56	; 0x38
 8005576:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800557a:	4618      	mov	r0, r3
 800557c:	f7fe f9ba 	bl	80038f4 <ld_word>
 8005580:	4603      	mov	r3, r0
 8005582:	461a      	mov	r2, r3
 8005584:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005588:	429a      	cmp	r2, r3
 800558a:	d001      	beq.n	8005590 <check_fs+0x48>
 800558c:	2303      	movs	r3, #3
 800558e:	e029      	b.n	80055e4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005596:	2be9      	cmp	r3, #233	; 0xe9
 8005598:	d009      	beq.n	80055ae <check_fs+0x66>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80055a0:	2beb      	cmp	r3, #235	; 0xeb
 80055a2:	d11e      	bne.n	80055e2 <check_fs+0x9a>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80055aa:	2b90      	cmp	r3, #144	; 0x90
 80055ac:	d119      	bne.n	80055e2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	3338      	adds	r3, #56	; 0x38
 80055b2:	3336      	adds	r3, #54	; 0x36
 80055b4:	4618      	mov	r0, r3
 80055b6:	f7fe f9b5 	bl	8003924 <ld_dword>
 80055ba:	4603      	mov	r3, r0
 80055bc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80055c0:	4a0a      	ldr	r2, [pc, #40]	; (80055ec <check_fs+0xa4>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d101      	bne.n	80055ca <check_fs+0x82>
 80055c6:	2300      	movs	r3, #0
 80055c8:	e00c      	b.n	80055e4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	3338      	adds	r3, #56	; 0x38
 80055ce:	3352      	adds	r3, #82	; 0x52
 80055d0:	4618      	mov	r0, r3
 80055d2:	f7fe f9a7 	bl	8003924 <ld_dword>
 80055d6:	4603      	mov	r3, r0
 80055d8:	4a05      	ldr	r2, [pc, #20]	; (80055f0 <check_fs+0xa8>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d101      	bne.n	80055e2 <check_fs+0x9a>
 80055de:	2300      	movs	r3, #0
 80055e0:	e000      	b.n	80055e4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80055e2:	2302      	movs	r3, #2
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3708      	adds	r7, #8
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	00544146 	.word	0x00544146
 80055f0:	33544146 	.word	0x33544146

080055f4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b096      	sub	sp, #88	; 0x58
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	4613      	mov	r3, r2
 8005600:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	2200      	movs	r2, #0
 8005606:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005608:	68f8      	ldr	r0, [r7, #12]
 800560a:	f7ff ff59 	bl	80054c0 <get_ldnumber>
 800560e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005612:	2b00      	cmp	r3, #0
 8005614:	da01      	bge.n	800561a <find_volume+0x26>
 8005616:	230b      	movs	r3, #11
 8005618:	e265      	b.n	8005ae6 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800561a:	4a9f      	ldr	r2, [pc, #636]	; (8005898 <find_volume+0x2a4>)
 800561c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800561e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005622:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005626:	2b00      	cmp	r3, #0
 8005628:	d101      	bne.n	800562e <find_volume+0x3a>
 800562a:	230c      	movs	r3, #12
 800562c:	e25b      	b.n	8005ae6 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005632:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005634:	79fb      	ldrb	r3, [r7, #7]
 8005636:	f023 0301 	bic.w	r3, r3, #1
 800563a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800563c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d01a      	beq.n	800567a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005646:	785b      	ldrb	r3, [r3, #1]
 8005648:	4618      	mov	r0, r3
 800564a:	f7fe f8b5 	bl	80037b8 <disk_status>
 800564e:	4603      	mov	r3, r0
 8005650:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005654:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005658:	f003 0301 	and.w	r3, r3, #1
 800565c:	2b00      	cmp	r3, #0
 800565e:	d10c      	bne.n	800567a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005660:	79fb      	ldrb	r3, [r7, #7]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d007      	beq.n	8005676 <find_volume+0x82>
 8005666:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800566a:	f003 0304 	and.w	r3, r3, #4
 800566e:	2b00      	cmp	r3, #0
 8005670:	d001      	beq.n	8005676 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005672:	230a      	movs	r3, #10
 8005674:	e237      	b.n	8005ae6 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8005676:	2300      	movs	r3, #0
 8005678:	e235      	b.n	8005ae6 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800567a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800567c:	2200      	movs	r2, #0
 800567e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005682:	b2da      	uxtb	r2, r3
 8005684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005686:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800568a:	785b      	ldrb	r3, [r3, #1]
 800568c:	4618      	mov	r0, r3
 800568e:	f7fe f8ad 	bl	80037ec <disk_initialize>
 8005692:	4603      	mov	r3, r0
 8005694:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005698:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800569c:	f003 0301 	and.w	r3, r3, #1
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d001      	beq.n	80056a8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80056a4:	2303      	movs	r3, #3
 80056a6:	e21e      	b.n	8005ae6 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80056a8:	79fb      	ldrb	r3, [r7, #7]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d007      	beq.n	80056be <find_volume+0xca>
 80056ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80056b2:	f003 0304 	and.w	r3, r3, #4
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d001      	beq.n	80056be <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80056ba:	230a      	movs	r3, #10
 80056bc:	e213      	b.n	8005ae6 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80056be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c0:	7858      	ldrb	r0, [r3, #1]
 80056c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c4:	330c      	adds	r3, #12
 80056c6:	461a      	mov	r2, r3
 80056c8:	2102      	movs	r1, #2
 80056ca:	f7fe f8f5 	bl	80038b8 <disk_ioctl>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d001      	beq.n	80056d8 <find_volume+0xe4>
 80056d4:	2301      	movs	r3, #1
 80056d6:	e206      	b.n	8005ae6 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80056d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056da:	899b      	ldrh	r3, [r3, #12]
 80056dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056e0:	d80d      	bhi.n	80056fe <find_volume+0x10a>
 80056e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e4:	899b      	ldrh	r3, [r3, #12]
 80056e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056ea:	d308      	bcc.n	80056fe <find_volume+0x10a>
 80056ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ee:	899b      	ldrh	r3, [r3, #12]
 80056f0:	461a      	mov	r2, r3
 80056f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f4:	899b      	ldrh	r3, [r3, #12]
 80056f6:	3b01      	subs	r3, #1
 80056f8:	4013      	ands	r3, r2
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d001      	beq.n	8005702 <find_volume+0x10e>
 80056fe:	2301      	movs	r3, #1
 8005700:	e1f1      	b.n	8005ae6 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005702:	2300      	movs	r3, #0
 8005704:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005706:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005708:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800570a:	f7ff ff1d 	bl	8005548 <check_fs>
 800570e:	4603      	mov	r3, r0
 8005710:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005714:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005718:	2b02      	cmp	r3, #2
 800571a:	d149      	bne.n	80057b0 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800571c:	2300      	movs	r3, #0
 800571e:	643b      	str	r3, [r7, #64]	; 0x40
 8005720:	e01e      	b.n	8005760 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005724:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005728:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800572a:	011b      	lsls	r3, r3, #4
 800572c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005730:	4413      	add	r3, r2
 8005732:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005736:	3304      	adds	r3, #4
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d006      	beq.n	800574c <find_volume+0x158>
 800573e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005740:	3308      	adds	r3, #8
 8005742:	4618      	mov	r0, r3
 8005744:	f7fe f8ee 	bl	8003924 <ld_dword>
 8005748:	4602      	mov	r2, r0
 800574a:	e000      	b.n	800574e <find_volume+0x15a>
 800574c:	2200      	movs	r2, #0
 800574e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	3358      	adds	r3, #88	; 0x58
 8005754:	443b      	add	r3, r7
 8005756:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800575a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800575c:	3301      	adds	r3, #1
 800575e:	643b      	str	r3, [r7, #64]	; 0x40
 8005760:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005762:	2b03      	cmp	r3, #3
 8005764:	d9dd      	bls.n	8005722 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005766:	2300      	movs	r3, #0
 8005768:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800576a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800576c:	2b00      	cmp	r3, #0
 800576e:	d002      	beq.n	8005776 <find_volume+0x182>
 8005770:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005772:	3b01      	subs	r3, #1
 8005774:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005776:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	3358      	adds	r3, #88	; 0x58
 800577c:	443b      	add	r3, r7
 800577e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005782:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005784:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005786:	2b00      	cmp	r3, #0
 8005788:	d005      	beq.n	8005796 <find_volume+0x1a2>
 800578a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800578c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800578e:	f7ff fedb 	bl	8005548 <check_fs>
 8005792:	4603      	mov	r3, r0
 8005794:	e000      	b.n	8005798 <find_volume+0x1a4>
 8005796:	2303      	movs	r3, #3
 8005798:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800579c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d905      	bls.n	80057b0 <find_volume+0x1bc>
 80057a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057a6:	3301      	adds	r3, #1
 80057a8:	643b      	str	r3, [r7, #64]	; 0x40
 80057aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057ac:	2b03      	cmp	r3, #3
 80057ae:	d9e2      	bls.n	8005776 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80057b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80057b4:	2b04      	cmp	r3, #4
 80057b6:	d101      	bne.n	80057bc <find_volume+0x1c8>
 80057b8:	2301      	movs	r3, #1
 80057ba:	e194      	b.n	8005ae6 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80057bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d901      	bls.n	80057c8 <find_volume+0x1d4>
 80057c4:	230d      	movs	r3, #13
 80057c6:	e18e      	b.n	8005ae6 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80057c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ca:	3338      	adds	r3, #56	; 0x38
 80057cc:	330b      	adds	r3, #11
 80057ce:	4618      	mov	r0, r3
 80057d0:	f7fe f890 	bl	80038f4 <ld_word>
 80057d4:	4603      	mov	r3, r0
 80057d6:	461a      	mov	r2, r3
 80057d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057da:	899b      	ldrh	r3, [r3, #12]
 80057dc:	429a      	cmp	r2, r3
 80057de:	d001      	beq.n	80057e4 <find_volume+0x1f0>
 80057e0:	230d      	movs	r3, #13
 80057e2:	e180      	b.n	8005ae6 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80057e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e6:	3338      	adds	r3, #56	; 0x38
 80057e8:	3316      	adds	r3, #22
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7fe f882 	bl	80038f4 <ld_word>
 80057f0:	4603      	mov	r3, r0
 80057f2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80057f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d106      	bne.n	8005808 <find_volume+0x214>
 80057fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057fc:	3338      	adds	r3, #56	; 0x38
 80057fe:	3324      	adds	r3, #36	; 0x24
 8005800:	4618      	mov	r0, r3
 8005802:	f7fe f88f 	bl	8003924 <ld_dword>
 8005806:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8005808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800580a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800580c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800580e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005810:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8005814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005816:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800581a:	789b      	ldrb	r3, [r3, #2]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d005      	beq.n	800582c <find_volume+0x238>
 8005820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005822:	789b      	ldrb	r3, [r3, #2]
 8005824:	2b02      	cmp	r3, #2
 8005826:	d001      	beq.n	800582c <find_volume+0x238>
 8005828:	230d      	movs	r3, #13
 800582a:	e15c      	b.n	8005ae6 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800582c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800582e:	789b      	ldrb	r3, [r3, #2]
 8005830:	461a      	mov	r2, r3
 8005832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005834:	fb02 f303 	mul.w	r3, r2, r3
 8005838:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800583a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800583c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005840:	b29a      	uxth	r2, r3
 8005842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005844:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005848:	895b      	ldrh	r3, [r3, #10]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d008      	beq.n	8005860 <find_volume+0x26c>
 800584e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005850:	895b      	ldrh	r3, [r3, #10]
 8005852:	461a      	mov	r2, r3
 8005854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005856:	895b      	ldrh	r3, [r3, #10]
 8005858:	3b01      	subs	r3, #1
 800585a:	4013      	ands	r3, r2
 800585c:	2b00      	cmp	r3, #0
 800585e:	d001      	beq.n	8005864 <find_volume+0x270>
 8005860:	230d      	movs	r3, #13
 8005862:	e140      	b.n	8005ae6 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005866:	3338      	adds	r3, #56	; 0x38
 8005868:	3311      	adds	r3, #17
 800586a:	4618      	mov	r0, r3
 800586c:	f7fe f842 	bl	80038f4 <ld_word>
 8005870:	4603      	mov	r3, r0
 8005872:	461a      	mov	r2, r3
 8005874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005876:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800587a:	891b      	ldrh	r3, [r3, #8]
 800587c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800587e:	8992      	ldrh	r2, [r2, #12]
 8005880:	0952      	lsrs	r2, r2, #5
 8005882:	b292      	uxth	r2, r2
 8005884:	fbb3 f1f2 	udiv	r1, r3, r2
 8005888:	fb01 f202 	mul.w	r2, r1, r2
 800588c:	1a9b      	subs	r3, r3, r2
 800588e:	b29b      	uxth	r3, r3
 8005890:	2b00      	cmp	r3, #0
 8005892:	d003      	beq.n	800589c <find_volume+0x2a8>
 8005894:	230d      	movs	r3, #13
 8005896:	e126      	b.n	8005ae6 <find_volume+0x4f2>
 8005898:	20002568 	.word	0x20002568

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800589c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800589e:	3338      	adds	r3, #56	; 0x38
 80058a0:	3313      	adds	r3, #19
 80058a2:	4618      	mov	r0, r3
 80058a4:	f7fe f826 	bl	80038f4 <ld_word>
 80058a8:	4603      	mov	r3, r0
 80058aa:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80058ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d106      	bne.n	80058c0 <find_volume+0x2cc>
 80058b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b4:	3338      	adds	r3, #56	; 0x38
 80058b6:	3320      	adds	r3, #32
 80058b8:	4618      	mov	r0, r3
 80058ba:	f7fe f833 	bl	8003924 <ld_dword>
 80058be:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80058c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c2:	3338      	adds	r3, #56	; 0x38
 80058c4:	330e      	adds	r3, #14
 80058c6:	4618      	mov	r0, r3
 80058c8:	f7fe f814 	bl	80038f4 <ld_word>
 80058cc:	4603      	mov	r3, r0
 80058ce:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80058d0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d101      	bne.n	80058da <find_volume+0x2e6>
 80058d6:	230d      	movs	r3, #13
 80058d8:	e105      	b.n	8005ae6 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80058da:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80058dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058de:	4413      	add	r3, r2
 80058e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058e2:	8911      	ldrh	r1, [r2, #8]
 80058e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058e6:	8992      	ldrh	r2, [r2, #12]
 80058e8:	0952      	lsrs	r2, r2, #5
 80058ea:	b292      	uxth	r2, r2
 80058ec:	fbb1 f2f2 	udiv	r2, r1, r2
 80058f0:	b292      	uxth	r2, r2
 80058f2:	4413      	add	r3, r2
 80058f4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80058f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d201      	bcs.n	8005902 <find_volume+0x30e>
 80058fe:	230d      	movs	r3, #13
 8005900:	e0f1      	b.n	8005ae6 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005902:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800590a:	8952      	ldrh	r2, [r2, #10]
 800590c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005910:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005914:	2b00      	cmp	r3, #0
 8005916:	d101      	bne.n	800591c <find_volume+0x328>
 8005918:	230d      	movs	r3, #13
 800591a:	e0e4      	b.n	8005ae6 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800591c:	2303      	movs	r3, #3
 800591e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005924:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005928:	4293      	cmp	r3, r2
 800592a:	d802      	bhi.n	8005932 <find_volume+0x33e>
 800592c:	2302      	movs	r3, #2
 800592e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005934:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005938:	4293      	cmp	r3, r2
 800593a:	d802      	bhi.n	8005942 <find_volume+0x34e>
 800593c:	2301      	movs	r3, #1
 800593e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005944:	1c9a      	adds	r2, r3, #2
 8005946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005948:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800594a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800594c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800594e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005950:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005952:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005954:	441a      	add	r2, r3
 8005956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005958:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800595a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800595c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595e:	441a      	add	r2, r3
 8005960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005962:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8005964:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005968:	2b03      	cmp	r3, #3
 800596a:	d11e      	bne.n	80059aa <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800596c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800596e:	3338      	adds	r3, #56	; 0x38
 8005970:	332a      	adds	r3, #42	; 0x2a
 8005972:	4618      	mov	r0, r3
 8005974:	f7fd ffbe 	bl	80038f4 <ld_word>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d001      	beq.n	8005982 <find_volume+0x38e>
 800597e:	230d      	movs	r3, #13
 8005980:	e0b1      	b.n	8005ae6 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005984:	891b      	ldrh	r3, [r3, #8]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d001      	beq.n	800598e <find_volume+0x39a>
 800598a:	230d      	movs	r3, #13
 800598c:	e0ab      	b.n	8005ae6 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800598e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005990:	3338      	adds	r3, #56	; 0x38
 8005992:	332c      	adds	r3, #44	; 0x2c
 8005994:	4618      	mov	r0, r3
 8005996:	f7fd ffc5 	bl	8003924 <ld_dword>
 800599a:	4602      	mov	r2, r0
 800599c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800599e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80059a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a2:	69db      	ldr	r3, [r3, #28]
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	647b      	str	r3, [r7, #68]	; 0x44
 80059a8:	e01f      	b.n	80059ea <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80059aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ac:	891b      	ldrh	r3, [r3, #8]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d101      	bne.n	80059b6 <find_volume+0x3c2>
 80059b2:	230d      	movs	r3, #13
 80059b4:	e097      	b.n	8005ae6 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80059b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059bc:	441a      	add	r2, r3
 80059be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c0:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80059c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d103      	bne.n	80059d2 <find_volume+0x3de>
 80059ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059cc:	69db      	ldr	r3, [r3, #28]
 80059ce:	005b      	lsls	r3, r3, #1
 80059d0:	e00a      	b.n	80059e8 <find_volume+0x3f4>
 80059d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d4:	69da      	ldr	r2, [r3, #28]
 80059d6:	4613      	mov	r3, r2
 80059d8:	005b      	lsls	r3, r3, #1
 80059da:	4413      	add	r3, r2
 80059dc:	085a      	lsrs	r2, r3, #1
 80059de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e0:	69db      	ldr	r3, [r3, #28]
 80059e2:	f003 0301 	and.w	r3, r3, #1
 80059e6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80059e8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80059ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ec:	6a1a      	ldr	r2, [r3, #32]
 80059ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f0:	899b      	ldrh	r3, [r3, #12]
 80059f2:	4619      	mov	r1, r3
 80059f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059f6:	440b      	add	r3, r1
 80059f8:	3b01      	subs	r3, #1
 80059fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80059fc:	8989      	ldrh	r1, [r1, #12]
 80059fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d201      	bcs.n	8005a0a <find_volume+0x416>
 8005a06:	230d      	movs	r3, #13
 8005a08:	e06d      	b.n	8005ae6 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8005a10:	619a      	str	r2, [r3, #24]
 8005a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a14:	699a      	ldr	r2, [r3, #24]
 8005a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a18:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8005a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a1c:	2280      	movs	r2, #128	; 0x80
 8005a1e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005a20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a24:	2b03      	cmp	r3, #3
 8005a26:	d149      	bne.n	8005abc <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a2a:	3338      	adds	r3, #56	; 0x38
 8005a2c:	3330      	adds	r3, #48	; 0x30
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f7fd ff60 	bl	80038f4 <ld_word>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d140      	bne.n	8005abc <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005a3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	4619      	mov	r1, r3
 8005a40:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005a42:	f7fe fa07 	bl	8003e54 <move_window>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d137      	bne.n	8005abc <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8005a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a4e:	2200      	movs	r2, #0
 8005a50:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a54:	3338      	adds	r3, #56	; 0x38
 8005a56:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7fd ff4a 	bl	80038f4 <ld_word>
 8005a60:	4603      	mov	r3, r0
 8005a62:	461a      	mov	r2, r3
 8005a64:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d127      	bne.n	8005abc <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a6e:	3338      	adds	r3, #56	; 0x38
 8005a70:	4618      	mov	r0, r3
 8005a72:	f7fd ff57 	bl	8003924 <ld_dword>
 8005a76:	4603      	mov	r3, r0
 8005a78:	4a1d      	ldr	r2, [pc, #116]	; (8005af0 <find_volume+0x4fc>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d11e      	bne.n	8005abc <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a80:	3338      	adds	r3, #56	; 0x38
 8005a82:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005a86:	4618      	mov	r0, r3
 8005a88:	f7fd ff4c 	bl	8003924 <ld_dword>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	4a19      	ldr	r2, [pc, #100]	; (8005af4 <find_volume+0x500>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d113      	bne.n	8005abc <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a96:	3338      	adds	r3, #56	; 0x38
 8005a98:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f7fd ff41 	bl	8003924 <ld_dword>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa6:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aaa:	3338      	adds	r3, #56	; 0x38
 8005aac:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f7fd ff37 	bl	8003924 <ld_dword>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aba:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8005abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005abe:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005ac2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005ac4:	4b0c      	ldr	r3, [pc, #48]	; (8005af8 <find_volume+0x504>)
 8005ac6:	881b      	ldrh	r3, [r3, #0]
 8005ac8:	3301      	adds	r3, #1
 8005aca:	b29a      	uxth	r2, r3
 8005acc:	4b0a      	ldr	r3, [pc, #40]	; (8005af8 <find_volume+0x504>)
 8005ace:	801a      	strh	r2, [r3, #0]
 8005ad0:	4b09      	ldr	r3, [pc, #36]	; (8005af8 <find_volume+0x504>)
 8005ad2:	881a      	ldrh	r2, [r3, #0]
 8005ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad6:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8005ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ada:	4a08      	ldr	r2, [pc, #32]	; (8005afc <find_volume+0x508>)
 8005adc:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005ade:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005ae0:	f7fe f950 	bl	8003d84 <clear_lock>
#endif
	return FR_OK;
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3758      	adds	r7, #88	; 0x58
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	41615252 	.word	0x41615252
 8005af4:	61417272 	.word	0x61417272
 8005af8:	2000256c 	.word	0x2000256c
 8005afc:	20002590 	.word	0x20002590

08005b00 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8005b0a:	2309      	movs	r3, #9
 8005b0c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d01c      	beq.n	8005b4e <validate+0x4e>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d018      	beq.n	8005b4e <validate+0x4e>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d013      	beq.n	8005b4e <validate+0x4e>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	889a      	ldrh	r2, [r3, #4]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	88db      	ldrh	r3, [r3, #6]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d10c      	bne.n	8005b4e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	785b      	ldrb	r3, [r3, #1]
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f7fd fe3c 	bl	80037b8 <disk_status>
 8005b40:	4603      	mov	r3, r0
 8005b42:	f003 0301 	and.w	r3, r3, #1
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d101      	bne.n	8005b4e <validate+0x4e>
			res = FR_OK;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005b4e:	7bfb      	ldrb	r3, [r7, #15]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d102      	bne.n	8005b5a <validate+0x5a>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	e000      	b.n	8005b5c <validate+0x5c>
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	683a      	ldr	r2, [r7, #0]
 8005b5e:	6013      	str	r3, [r2, #0]
	return res;
 8005b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3710      	adds	r7, #16
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
	...

08005b6c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b088      	sub	sp, #32
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	4613      	mov	r3, r2
 8005b78:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005b7e:	f107 0310 	add.w	r3, r7, #16
 8005b82:	4618      	mov	r0, r3
 8005b84:	f7ff fc9c 	bl	80054c0 <get_ldnumber>
 8005b88:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	da01      	bge.n	8005b94 <f_mount+0x28>
 8005b90:	230b      	movs	r3, #11
 8005b92:	e02b      	b.n	8005bec <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005b94:	4a17      	ldr	r2, [pc, #92]	; (8005bf4 <f_mount+0x88>)
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b9c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d005      	beq.n	8005bb0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005ba4:	69b8      	ldr	r0, [r7, #24]
 8005ba6:	f7fe f8ed 	bl	8003d84 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	2200      	movs	r2, #0
 8005bae:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d002      	beq.n	8005bbc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	490d      	ldr	r1, [pc, #52]	; (8005bf4 <f_mount+0x88>)
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d002      	beq.n	8005bd2 <f_mount+0x66>
 8005bcc:	79fb      	ldrb	r3, [r7, #7]
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d001      	beq.n	8005bd6 <f_mount+0x6a>
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	e00a      	b.n	8005bec <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8005bd6:	f107 010c 	add.w	r1, r7, #12
 8005bda:	f107 0308 	add.w	r3, r7, #8
 8005bde:	2200      	movs	r2, #0
 8005be0:	4618      	mov	r0, r3
 8005be2:	f7ff fd07 	bl	80055f4 <find_volume>
 8005be6:	4603      	mov	r3, r0
 8005be8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005bea:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3720      	adds	r7, #32
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	20002568 	.word	0x20002568

08005bf8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b09a      	sub	sp, #104	; 0x68
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	4613      	mov	r3, r2
 8005c04:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d101      	bne.n	8005c10 <f_open+0x18>
 8005c0c:	2309      	movs	r3, #9
 8005c0e:	e1bb      	b.n	8005f88 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8005c10:	79fb      	ldrb	r3, [r7, #7]
 8005c12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c16:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8005c18:	79fa      	ldrb	r2, [r7, #7]
 8005c1a:	f107 0114 	add.w	r1, r7, #20
 8005c1e:	f107 0308 	add.w	r3, r7, #8
 8005c22:	4618      	mov	r0, r3
 8005c24:	f7ff fce6 	bl	80055f4 <find_volume>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8005c2e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	f040 819f 	bne.w	8005f76 <f_open+0x37e>
		dj.obj.fs = fs;
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8005c3c:	68ba      	ldr	r2, [r7, #8]
 8005c3e:	f107 0318 	add.w	r3, r7, #24
 8005c42:	4611      	mov	r1, r2
 8005c44:	4618      	mov	r0, r3
 8005c46:	f7ff fbc5 	bl	80053d4 <follow_path>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005c50:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d11a      	bne.n	8005c8e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8005c58:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005c5c:	b25b      	sxtb	r3, r3
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	da03      	bge.n	8005c6a <f_open+0x72>
				res = FR_INVALID_NAME;
 8005c62:	2306      	movs	r3, #6
 8005c64:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005c68:	e011      	b.n	8005c8e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005c6a:	79fb      	ldrb	r3, [r7, #7]
 8005c6c:	f023 0301 	bic.w	r3, r3, #1
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	bf14      	ite	ne
 8005c74:	2301      	movne	r3, #1
 8005c76:	2300      	moveq	r3, #0
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	f107 0318 	add.w	r3, r7, #24
 8005c80:	4611      	mov	r1, r2
 8005c82:	4618      	mov	r0, r3
 8005c84:	f7fd ff36 	bl	8003af4 <chk_lock>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005c8e:	79fb      	ldrb	r3, [r7, #7]
 8005c90:	f003 031c 	and.w	r3, r3, #28
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d07f      	beq.n	8005d98 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8005c98:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d017      	beq.n	8005cd0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005ca0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005ca4:	2b04      	cmp	r3, #4
 8005ca6:	d10e      	bne.n	8005cc6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005ca8:	f7fd ff80 	bl	8003bac <enq_lock>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d006      	beq.n	8005cc0 <f_open+0xc8>
 8005cb2:	f107 0318 	add.w	r3, r7, #24
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f7ff f8dc 	bl	8004e74 <dir_register>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	e000      	b.n	8005cc2 <f_open+0xca>
 8005cc0:	2312      	movs	r3, #18
 8005cc2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005cc6:	79fb      	ldrb	r3, [r7, #7]
 8005cc8:	f043 0308 	orr.w	r3, r3, #8
 8005ccc:	71fb      	strb	r3, [r7, #7]
 8005cce:	e010      	b.n	8005cf2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005cd0:	7fbb      	ldrb	r3, [r7, #30]
 8005cd2:	f003 0311 	and.w	r3, r3, #17
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d003      	beq.n	8005ce2 <f_open+0xea>
					res = FR_DENIED;
 8005cda:	2307      	movs	r3, #7
 8005cdc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005ce0:	e007      	b.n	8005cf2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8005ce2:	79fb      	ldrb	r3, [r7, #7]
 8005ce4:	f003 0304 	and.w	r3, r3, #4
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d002      	beq.n	8005cf2 <f_open+0xfa>
 8005cec:	2308      	movs	r3, #8
 8005cee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005cf2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d168      	bne.n	8005dcc <f_open+0x1d4>
 8005cfa:	79fb      	ldrb	r3, [r7, #7]
 8005cfc:	f003 0308 	and.w	r3, r3, #8
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d063      	beq.n	8005dcc <f_open+0x1d4>
				dw = GET_FATTIME();
 8005d04:	f7fd fcf4 	bl	80036f0 <get_fattime>
 8005d08:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8005d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d0c:	330e      	adds	r3, #14
 8005d0e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005d10:	4618      	mov	r0, r3
 8005d12:	f7fd fe45 	bl	80039a0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8005d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d18:	3316      	adds	r3, #22
 8005d1a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f7fd fe3f 	bl	80039a0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8005d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d24:	330b      	adds	r3, #11
 8005d26:	2220      	movs	r2, #32
 8005d28:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d2e:	4611      	mov	r1, r2
 8005d30:	4618      	mov	r0, r3
 8005d32:	f7fe fe17 	bl	8004964 <ld_clust>
 8005d36:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f7fe fe2f 	bl	80049a2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8005d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d46:	331c      	adds	r3, #28
 8005d48:	2100      	movs	r1, #0
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f7fd fe28 	bl	80039a0 <st_dword>
					fs->wflag = 1;
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	2201      	movs	r2, #1
 8005d54:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8005d56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d037      	beq.n	8005dcc <f_open+0x1d4>
						dw = fs->winsect;
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d60:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8005d62:	f107 0318 	add.w	r3, r7, #24
 8005d66:	2200      	movs	r2, #0
 8005d68:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7fe fb1f 	bl	80043ae <remove_chain>
 8005d70:	4603      	mov	r3, r0
 8005d72:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8005d76:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d126      	bne.n	8005dcc <f_open+0x1d4>
							res = move_window(fs, dw);
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005d82:	4618      	mov	r0, r3
 8005d84:	f7fe f866 	bl	8003e54 <move_window>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005d92:	3a01      	subs	r2, #1
 8005d94:	615a      	str	r2, [r3, #20]
 8005d96:	e019      	b.n	8005dcc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8005d98:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d115      	bne.n	8005dcc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8005da0:	7fbb      	ldrb	r3, [r7, #30]
 8005da2:	f003 0310 	and.w	r3, r3, #16
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d003      	beq.n	8005db2 <f_open+0x1ba>
					res = FR_NO_FILE;
 8005daa:	2304      	movs	r3, #4
 8005dac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005db0:	e00c      	b.n	8005dcc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8005db2:	79fb      	ldrb	r3, [r7, #7]
 8005db4:	f003 0302 	and.w	r3, r3, #2
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d007      	beq.n	8005dcc <f_open+0x1d4>
 8005dbc:	7fbb      	ldrb	r3, [r7, #30]
 8005dbe:	f003 0301 	and.w	r3, r3, #1
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d002      	beq.n	8005dcc <f_open+0x1d4>
						res = FR_DENIED;
 8005dc6:	2307      	movs	r3, #7
 8005dc8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8005dcc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d128      	bne.n	8005e26 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005dd4:	79fb      	ldrb	r3, [r7, #7]
 8005dd6:	f003 0308 	and.w	r3, r3, #8
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d003      	beq.n	8005de6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8005dde:	79fb      	ldrb	r3, [r7, #7]
 8005de0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005de4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8005dee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005df4:	79fb      	ldrb	r3, [r7, #7]
 8005df6:	f023 0301 	bic.w	r3, r3, #1
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	bf14      	ite	ne
 8005dfe:	2301      	movne	r3, #1
 8005e00:	2300      	moveq	r3, #0
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	461a      	mov	r2, r3
 8005e06:	f107 0318 	add.w	r3, r7, #24
 8005e0a:	4611      	mov	r1, r2
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f7fd feef 	bl	8003bf0 <inc_lock>
 8005e12:	4602      	mov	r2, r0
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d102      	bne.n	8005e26 <f_open+0x22e>
 8005e20:	2302      	movs	r3, #2
 8005e22:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8005e26:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	f040 80a3 	bne.w	8005f76 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e34:	4611      	mov	r1, r2
 8005e36:	4618      	mov	r0, r3
 8005e38:	f7fe fd94 	bl	8004964 <ld_clust>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8005e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e44:	331c      	adds	r3, #28
 8005e46:	4618      	mov	r0, r3
 8005e48:	f7fd fd6c 	bl	8003924 <ld_dword>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2200      	movs	r2, #0
 8005e56:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8005e58:	697a      	ldr	r2, [r7, #20]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	88da      	ldrh	r2, [r3, #6]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	79fa      	ldrb	r2, [r7, #7]
 8005e6a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2200      	movs	r2, #0
 8005e76:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	3330      	adds	r3, #48	; 0x30
 8005e82:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005e86:	2100      	movs	r1, #0
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f7fd fdd6 	bl	8003a3a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8005e8e:	79fb      	ldrb	r3, [r7, #7]
 8005e90:	f003 0320 	and.w	r3, r3, #32
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d06e      	beq.n	8005f76 <f_open+0x37e>
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d06a      	beq.n	8005f76 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	68da      	ldr	r2, [r3, #12]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	895b      	ldrh	r3, [r3, #10]
 8005eac:	461a      	mov	r2, r3
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	899b      	ldrh	r3, [r3, #12]
 8005eb2:	fb02 f303 	mul.w	r3, r2, r3
 8005eb6:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ec4:	e016      	b.n	8005ef4 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f7fe f87f 	bl	8003fce <get_fat>
 8005ed0:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8005ed2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d802      	bhi.n	8005ede <f_open+0x2e6>
 8005ed8:	2302      	movs	r3, #2
 8005eda:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005ede:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ee4:	d102      	bne.n	8005eec <f_open+0x2f4>
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005eec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005eee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ef4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d103      	bne.n	8005f04 <f_open+0x30c>
 8005efc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005efe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d8e0      	bhi.n	8005ec6 <f_open+0x2ce>
				}
				fp->clust = clst;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005f08:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8005f0a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d131      	bne.n	8005f76 <f_open+0x37e>
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	899b      	ldrh	r3, [r3, #12]
 8005f16:	461a      	mov	r2, r3
 8005f18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f1a:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f1e:	fb01 f202 	mul.w	r2, r1, r2
 8005f22:	1a9b      	subs	r3, r3, r2
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d026      	beq.n	8005f76 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f7fe f82f 	bl	8003f90 <clust2sect>
 8005f32:	64f8      	str	r0, [r7, #76]	; 0x4c
 8005f34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d103      	bne.n	8005f42 <f_open+0x34a>
						res = FR_INT_ERR;
 8005f3a:	2302      	movs	r3, #2
 8005f3c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005f40:	e019      	b.n	8005f76 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	899b      	ldrh	r3, [r3, #12]
 8005f46:	461a      	mov	r2, r3
 8005f48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f4a:	fbb3 f2f2 	udiv	r2, r3, r2
 8005f4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f50:	441a      	add	r2, r3
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	7858      	ldrb	r0, [r3, #1]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6a1a      	ldr	r2, [r3, #32]
 8005f64:	2301      	movs	r3, #1
 8005f66:	f7fd fc67 	bl	8003838 <disk_read>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d002      	beq.n	8005f76 <f_open+0x37e>
 8005f70:	2301      	movs	r3, #1
 8005f72:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8005f76:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d002      	beq.n	8005f84 <f_open+0x38c>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2200      	movs	r2, #0
 8005f82:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8005f84:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3768      	adds	r7, #104	; 0x68
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b08c      	sub	sp, #48	; 0x30
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	607a      	str	r2, [r7, #4]
 8005f9c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f107 0210 	add.w	r2, r7, #16
 8005fae:	4611      	mov	r1, r2
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f7ff fda5 	bl	8005b00 <validate>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005fbc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d107      	bne.n	8005fd4 <f_write+0x44>
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	7d5b      	ldrb	r3, [r3, #21]
 8005fc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005fcc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d002      	beq.n	8005fda <f_write+0x4a>
 8005fd4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005fd8:	e16a      	b.n	80062b0 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	7d1b      	ldrb	r3, [r3, #20]
 8005fde:	f003 0302 	and.w	r3, r3, #2
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d101      	bne.n	8005fea <f_write+0x5a>
 8005fe6:	2307      	movs	r3, #7
 8005fe8:	e162      	b.n	80062b0 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	699a      	ldr	r2, [r3, #24]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	441a      	add	r2, r3
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	699b      	ldr	r3, [r3, #24]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	f080 814c 	bcs.w	8006294 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	699b      	ldr	r3, [r3, #24]
 8006000:	43db      	mvns	r3, r3
 8006002:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8006004:	e146      	b.n	8006294 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	699b      	ldr	r3, [r3, #24]
 800600a:	693a      	ldr	r2, [r7, #16]
 800600c:	8992      	ldrh	r2, [r2, #12]
 800600e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006012:	fb01 f202 	mul.w	r2, r1, r2
 8006016:	1a9b      	subs	r3, r3, r2
 8006018:	2b00      	cmp	r3, #0
 800601a:	f040 80f1 	bne.w	8006200 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	699b      	ldr	r3, [r3, #24]
 8006022:	693a      	ldr	r2, [r7, #16]
 8006024:	8992      	ldrh	r2, [r2, #12]
 8006026:	fbb3 f3f2 	udiv	r3, r3, r2
 800602a:	693a      	ldr	r2, [r7, #16]
 800602c:	8952      	ldrh	r2, [r2, #10]
 800602e:	3a01      	subs	r2, #1
 8006030:	4013      	ands	r3, r2
 8006032:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d143      	bne.n	80060c2 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	699b      	ldr	r3, [r3, #24]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d10c      	bne.n	800605c <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8006048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604a:	2b00      	cmp	r3, #0
 800604c:	d11a      	bne.n	8006084 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2100      	movs	r1, #0
 8006052:	4618      	mov	r0, r3
 8006054:	f7fe fa10 	bl	8004478 <create_chain>
 8006058:	62b8      	str	r0, [r7, #40]	; 0x28
 800605a:	e013      	b.n	8006084 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006060:	2b00      	cmp	r3, #0
 8006062:	d007      	beq.n	8006074 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	699b      	ldr	r3, [r3, #24]
 8006068:	4619      	mov	r1, r3
 800606a:	68f8      	ldr	r0, [r7, #12]
 800606c:	f7fe fa9c 	bl	80045a8 <clmt_clust>
 8006070:	62b8      	str	r0, [r7, #40]	; 0x28
 8006072:	e007      	b.n	8006084 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	69db      	ldr	r3, [r3, #28]
 800607a:	4619      	mov	r1, r3
 800607c:	4610      	mov	r0, r2
 800607e:	f7fe f9fb 	bl	8004478 <create_chain>
 8006082:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006086:	2b00      	cmp	r3, #0
 8006088:	f000 8109 	beq.w	800629e <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800608c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800608e:	2b01      	cmp	r3, #1
 8006090:	d104      	bne.n	800609c <f_write+0x10c>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2202      	movs	r2, #2
 8006096:	755a      	strb	r2, [r3, #21]
 8006098:	2302      	movs	r3, #2
 800609a:	e109      	b.n	80062b0 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800609c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800609e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a2:	d104      	bne.n	80060ae <f_write+0x11e>
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2201      	movs	r2, #1
 80060a8:	755a      	strb	r2, [r3, #21]
 80060aa:	2301      	movs	r3, #1
 80060ac:	e100      	b.n	80062b0 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060b2:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d102      	bne.n	80060c2 <f_write+0x132>
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060c0:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	7d1b      	ldrb	r3, [r3, #20]
 80060c6:	b25b      	sxtb	r3, r3
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	da18      	bge.n	80060fe <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	7858      	ldrb	r0, [r3, #1]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6a1a      	ldr	r2, [r3, #32]
 80060da:	2301      	movs	r3, #1
 80060dc:	f7fd fbcc 	bl	8003878 <disk_write>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d004      	beq.n	80060f0 <f_write+0x160>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2201      	movs	r2, #1
 80060ea:	755a      	strb	r2, [r3, #21]
 80060ec:	2301      	movs	r3, #1
 80060ee:	e0df      	b.n	80062b0 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	7d1b      	ldrb	r3, [r3, #20]
 80060f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060f8:	b2da      	uxtb	r2, r3
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80060fe:	693a      	ldr	r2, [r7, #16]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	69db      	ldr	r3, [r3, #28]
 8006104:	4619      	mov	r1, r3
 8006106:	4610      	mov	r0, r2
 8006108:	f7fd ff42 	bl	8003f90 <clust2sect>
 800610c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d104      	bne.n	800611e <f_write+0x18e>
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2202      	movs	r2, #2
 8006118:	755a      	strb	r2, [r3, #21]
 800611a:	2302      	movs	r3, #2
 800611c:	e0c8      	b.n	80062b0 <f_write+0x320>
			sect += csect;
 800611e:	697a      	ldr	r2, [r7, #20]
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	4413      	add	r3, r2
 8006124:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	899b      	ldrh	r3, [r3, #12]
 800612a:	461a      	mov	r2, r3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006132:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006134:	6a3b      	ldr	r3, [r7, #32]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d043      	beq.n	80061c2 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800613a:	69ba      	ldr	r2, [r7, #24]
 800613c:	6a3b      	ldr	r3, [r7, #32]
 800613e:	4413      	add	r3, r2
 8006140:	693a      	ldr	r2, [r7, #16]
 8006142:	8952      	ldrh	r2, [r2, #10]
 8006144:	4293      	cmp	r3, r2
 8006146:	d905      	bls.n	8006154 <f_write+0x1c4>
					cc = fs->csize - csect;
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	895b      	ldrh	r3, [r3, #10]
 800614c:	461a      	mov	r2, r3
 800614e:	69bb      	ldr	r3, [r7, #24]
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	7858      	ldrb	r0, [r3, #1]
 8006158:	6a3b      	ldr	r3, [r7, #32]
 800615a:	697a      	ldr	r2, [r7, #20]
 800615c:	69f9      	ldr	r1, [r7, #28]
 800615e:	f7fd fb8b 	bl	8003878 <disk_write>
 8006162:	4603      	mov	r3, r0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d004      	beq.n	8006172 <f_write+0x1e2>
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2201      	movs	r2, #1
 800616c:	755a      	strb	r2, [r3, #21]
 800616e:	2301      	movs	r3, #1
 8006170:	e09e      	b.n	80062b0 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6a1a      	ldr	r2, [r3, #32]
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	6a3a      	ldr	r2, [r7, #32]
 800617c:	429a      	cmp	r2, r3
 800617e:	d918      	bls.n	80061b2 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6a1a      	ldr	r2, [r3, #32]
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	1ad3      	subs	r3, r2, r3
 800618e:	693a      	ldr	r2, [r7, #16]
 8006190:	8992      	ldrh	r2, [r2, #12]
 8006192:	fb02 f303 	mul.w	r3, r2, r3
 8006196:	69fa      	ldr	r2, [r7, #28]
 8006198:	18d1      	adds	r1, r2, r3
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	899b      	ldrh	r3, [r3, #12]
 800619e:	461a      	mov	r2, r3
 80061a0:	f7fd fc2a 	bl	80039f8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	7d1b      	ldrb	r3, [r3, #20]
 80061a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061ac:	b2da      	uxtb	r2, r3
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	899b      	ldrh	r3, [r3, #12]
 80061b6:	461a      	mov	r2, r3
 80061b8:	6a3b      	ldr	r3, [r7, #32]
 80061ba:	fb02 f303 	mul.w	r3, r2, r3
 80061be:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80061c0:	e04b      	b.n	800625a <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6a1b      	ldr	r3, [r3, #32]
 80061c6:	697a      	ldr	r2, [r7, #20]
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d016      	beq.n	80061fa <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	699a      	ldr	r2, [r3, #24]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d210      	bcs.n	80061fa <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	7858      	ldrb	r0, [r3, #1]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80061e2:	2301      	movs	r3, #1
 80061e4:	697a      	ldr	r2, [r7, #20]
 80061e6:	f7fd fb27 	bl	8003838 <disk_read>
 80061ea:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d004      	beq.n	80061fa <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2201      	movs	r2, #1
 80061f4:	755a      	strb	r2, [r3, #21]
 80061f6:	2301      	movs	r3, #1
 80061f8:	e05a      	b.n	80062b0 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	697a      	ldr	r2, [r7, #20]
 80061fe:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	899b      	ldrh	r3, [r3, #12]
 8006204:	4618      	mov	r0, r3
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	699b      	ldr	r3, [r3, #24]
 800620a:	693a      	ldr	r2, [r7, #16]
 800620c:	8992      	ldrh	r2, [r2, #12]
 800620e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006212:	fb01 f202 	mul.w	r2, r1, r2
 8006216:	1a9b      	subs	r3, r3, r2
 8006218:	1ac3      	subs	r3, r0, r3
 800621a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800621c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	429a      	cmp	r2, r3
 8006222:	d901      	bls.n	8006228 <f_write+0x298>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	699b      	ldr	r3, [r3, #24]
 8006232:	693a      	ldr	r2, [r7, #16]
 8006234:	8992      	ldrh	r2, [r2, #12]
 8006236:	fbb3 f0f2 	udiv	r0, r3, r2
 800623a:	fb00 f202 	mul.w	r2, r0, r2
 800623e:	1a9b      	subs	r3, r3, r2
 8006240:	440b      	add	r3, r1
 8006242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006244:	69f9      	ldr	r1, [r7, #28]
 8006246:	4618      	mov	r0, r3
 8006248:	f7fd fbd6 	bl	80039f8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	7d1b      	ldrb	r3, [r3, #20]
 8006250:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006254:	b2da      	uxtb	r2, r3
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800625a:	69fa      	ldr	r2, [r7, #28]
 800625c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625e:	4413      	add	r3, r2
 8006260:	61fb      	str	r3, [r7, #28]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	699a      	ldr	r2, [r3, #24]
 8006266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006268:	441a      	add	r2, r3
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	619a      	str	r2, [r3, #24]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	68da      	ldr	r2, [r3, #12]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	699b      	ldr	r3, [r3, #24]
 8006276:	429a      	cmp	r2, r3
 8006278:	bf38      	it	cc
 800627a:	461a      	movcc	r2, r3
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	60da      	str	r2, [r3, #12]
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006286:	441a      	add	r2, r3
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	601a      	str	r2, [r3, #0]
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006290:	1ad3      	subs	r3, r2, r3
 8006292:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2b00      	cmp	r3, #0
 8006298:	f47f aeb5 	bne.w	8006006 <f_write+0x76>
 800629c:	e000      	b.n	80062a0 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800629e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	7d1b      	ldrb	r3, [r3, #20]
 80062a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062a8:	b2da      	uxtb	r2, r3
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80062ae:	2300      	movs	r3, #0
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3730      	adds	r7, #48	; 0x30
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b086      	sub	sp, #24
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f107 0208 	add.w	r2, r7, #8
 80062c6:	4611      	mov	r1, r2
 80062c8:	4618      	mov	r0, r3
 80062ca:	f7ff fc19 	bl	8005b00 <validate>
 80062ce:	4603      	mov	r3, r0
 80062d0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80062d2:	7dfb      	ldrb	r3, [r7, #23]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d168      	bne.n	80063aa <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	7d1b      	ldrb	r3, [r3, #20]
 80062dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d062      	beq.n	80063aa <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	7d1b      	ldrb	r3, [r3, #20]
 80062e8:	b25b      	sxtb	r3, r3
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	da15      	bge.n	800631a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	7858      	ldrb	r0, [r3, #1]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a1a      	ldr	r2, [r3, #32]
 80062fc:	2301      	movs	r3, #1
 80062fe:	f7fd fabb 	bl	8003878 <disk_write>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d001      	beq.n	800630c <f_sync+0x54>
 8006308:	2301      	movs	r3, #1
 800630a:	e04f      	b.n	80063ac <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	7d1b      	ldrb	r3, [r3, #20]
 8006310:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006314:	b2da      	uxtb	r2, r3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800631a:	f7fd f9e9 	bl	80036f0 <get_fattime>
 800631e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006320:	68ba      	ldr	r2, [r7, #8]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006326:	4619      	mov	r1, r3
 8006328:	4610      	mov	r0, r2
 800632a:	f7fd fd93 	bl	8003e54 <move_window>
 800632e:	4603      	mov	r3, r0
 8006330:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006332:	7dfb      	ldrb	r3, [r7, #23]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d138      	bne.n	80063aa <f_sync+0xf2>
					dir = fp->dir_ptr;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800633c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	330b      	adds	r3, #11
 8006342:	781a      	ldrb	r2, [r3, #0]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	330b      	adds	r3, #11
 8006348:	f042 0220 	orr.w	r2, r2, #32
 800634c:	b2d2      	uxtb	r2, r2
 800634e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6818      	ldr	r0, [r3, #0]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	461a      	mov	r2, r3
 800635a:	68f9      	ldr	r1, [r7, #12]
 800635c:	f7fe fb21 	bl	80049a2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f103 021c 	add.w	r2, r3, #28
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	4619      	mov	r1, r3
 800636c:	4610      	mov	r0, r2
 800636e:	f7fd fb17 	bl	80039a0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	3316      	adds	r3, #22
 8006376:	6939      	ldr	r1, [r7, #16]
 8006378:	4618      	mov	r0, r3
 800637a:	f7fd fb11 	bl	80039a0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	3312      	adds	r3, #18
 8006382:	2100      	movs	r1, #0
 8006384:	4618      	mov	r0, r3
 8006386:	f7fd faf0 	bl	800396a <st_word>
					fs->wflag = 1;
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	2201      	movs	r2, #1
 800638e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	4618      	mov	r0, r3
 8006394:	f7fd fd8c 	bl	8003eb0 <sync_fs>
 8006398:	4603      	mov	r3, r0
 800639a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	7d1b      	ldrb	r3, [r3, #20]
 80063a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063a4:	b2da      	uxtb	r2, r3
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80063aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3718      	adds	r7, #24
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f7ff ff7b 	bl	80062b8 <f_sync>
 80063c2:	4603      	mov	r3, r0
 80063c4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80063c6:	7bfb      	ldrb	r3, [r7, #15]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d118      	bne.n	80063fe <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f107 0208 	add.w	r2, r7, #8
 80063d2:	4611      	mov	r1, r2
 80063d4:	4618      	mov	r0, r3
 80063d6:	f7ff fb93 	bl	8005b00 <validate>
 80063da:	4603      	mov	r3, r0
 80063dc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80063de:	7bfb      	ldrb	r3, [r7, #15]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d10c      	bne.n	80063fe <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	691b      	ldr	r3, [r3, #16]
 80063e8:	4618      	mov	r0, r3
 80063ea:	f7fd fc8f 	bl	8003d0c <dec_lock>
 80063ee:	4603      	mov	r3, r0
 80063f0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80063f2:	7bfb      	ldrb	r3, [r7, #15]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d102      	bne.n	80063fe <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80063fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006400:	4618      	mov	r0, r3
 8006402:	3710      	adds	r7, #16
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	460b      	mov	r3, r1
 8006412:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8006414:	78fb      	ldrb	r3, [r7, #3]
 8006416:	2b0a      	cmp	r3, #10
 8006418:	d103      	bne.n	8006422 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800641a:	210d      	movs	r1, #13
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f7ff fff3 	bl	8006408 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2b00      	cmp	r3, #0
 800642c:	db25      	blt.n	800647a <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	1c5a      	adds	r2, r3, #1
 8006432:	60fa      	str	r2, [r7, #12]
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	4413      	add	r3, r2
 8006438:	78fa      	ldrb	r2, [r7, #3]
 800643a:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2b3c      	cmp	r3, #60	; 0x3c
 8006440:	dd12      	ble.n	8006468 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6818      	ldr	r0, [r3, #0]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f103 010c 	add.w	r1, r3, #12
 800644c:	68fa      	ldr	r2, [r7, #12]
 800644e:	f107 0308 	add.w	r3, r7, #8
 8006452:	f7ff fd9d 	bl	8005f90 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8006456:	68ba      	ldr	r2, [r7, #8]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	429a      	cmp	r2, r3
 800645c:	d101      	bne.n	8006462 <putc_bfd+0x5a>
 800645e:	2300      	movs	r3, #0
 8006460:	e001      	b.n	8006466 <putc_bfd+0x5e>
 8006462:	f04f 33ff 	mov.w	r3, #4294967295
 8006466:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	68fa      	ldr	r2, [r7, #12]
 800646c:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	1c5a      	adds	r2, r3, #1
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	609a      	str	r2, [r3, #8]
 8006478:	e000      	b.n	800647c <putc_bfd+0x74>
	if (i < 0) return;
 800647a:	bf00      	nop
}
 800647c:	3710      	adds	r7, #16
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}

08006482 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8006482:	b580      	push	{r7, lr}
 8006484:	b084      	sub	sp, #16
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	2b00      	cmp	r3, #0
 8006490:	db16      	blt.n	80064c0 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6818      	ldr	r0, [r3, #0]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f103 010c 	add.w	r1, r3, #12
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	461a      	mov	r2, r3
 80064a2:	f107 030c 	add.w	r3, r7, #12
 80064a6:	f7ff fd73 	bl	8005f90 <f_write>
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d107      	bne.n	80064c0 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d102      	bne.n	80064c0 <putc_flush+0x3e>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	e001      	b.n	80064c4 <putc_flush+0x42>
	return EOF;
 80064c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3710      	adds	r7, #16
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	683a      	ldr	r2, [r7, #0]
 80064da:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	605a      	str	r2, [r3, #4]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	685a      	ldr	r2, [r3, #4]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	609a      	str	r2, [r3, #8]
}
 80064ea:	bf00      	nop
 80064ec:	370c      	adds	r7, #12
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr

080064f6 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 80064f6:	b580      	push	{r7, lr}
 80064f8:	b096      	sub	sp, #88	; 0x58
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
 80064fe:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8006500:	f107 030c 	add.w	r3, r7, #12
 8006504:	6839      	ldr	r1, [r7, #0]
 8006506:	4618      	mov	r0, r3
 8006508:	f7ff ffe0 	bl	80064cc <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800650c:	e009      	b.n	8006522 <f_puts+0x2c>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	1c5a      	adds	r2, r3, #1
 8006512:	607a      	str	r2, [r7, #4]
 8006514:	781a      	ldrb	r2, [r3, #0]
 8006516:	f107 030c 	add.w	r3, r7, #12
 800651a:	4611      	mov	r1, r2
 800651c:	4618      	mov	r0, r3
 800651e:	f7ff ff73 	bl	8006408 <putc_bfd>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d1f1      	bne.n	800650e <f_puts+0x18>
	return putc_flush(&pb);
 800652a:	f107 030c 	add.w	r3, r7, #12
 800652e:	4618      	mov	r0, r3
 8006530:	f7ff ffa7 	bl	8006482 <putc_flush>
 8006534:	4603      	mov	r3, r0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3758      	adds	r7, #88	; 0x58
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
	...

08006540 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006540:	b480      	push	{r7}
 8006542:	b087      	sub	sp, #28
 8006544:	af00      	add	r7, sp, #0
 8006546:	60f8      	str	r0, [r7, #12]
 8006548:	60b9      	str	r1, [r7, #8]
 800654a:	4613      	mov	r3, r2
 800654c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800654e:	2301      	movs	r3, #1
 8006550:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006552:	2300      	movs	r3, #0
 8006554:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006556:	4b1f      	ldr	r3, [pc, #124]	; (80065d4 <FATFS_LinkDriverEx+0x94>)
 8006558:	7a5b      	ldrb	r3, [r3, #9]
 800655a:	b2db      	uxtb	r3, r3
 800655c:	2b00      	cmp	r3, #0
 800655e:	d131      	bne.n	80065c4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006560:	4b1c      	ldr	r3, [pc, #112]	; (80065d4 <FATFS_LinkDriverEx+0x94>)
 8006562:	7a5b      	ldrb	r3, [r3, #9]
 8006564:	b2db      	uxtb	r3, r3
 8006566:	461a      	mov	r2, r3
 8006568:	4b1a      	ldr	r3, [pc, #104]	; (80065d4 <FATFS_LinkDriverEx+0x94>)
 800656a:	2100      	movs	r1, #0
 800656c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800656e:	4b19      	ldr	r3, [pc, #100]	; (80065d4 <FATFS_LinkDriverEx+0x94>)
 8006570:	7a5b      	ldrb	r3, [r3, #9]
 8006572:	b2db      	uxtb	r3, r3
 8006574:	4a17      	ldr	r2, [pc, #92]	; (80065d4 <FATFS_LinkDriverEx+0x94>)
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	4413      	add	r3, r2
 800657a:	68fa      	ldr	r2, [r7, #12]
 800657c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800657e:	4b15      	ldr	r3, [pc, #84]	; (80065d4 <FATFS_LinkDriverEx+0x94>)
 8006580:	7a5b      	ldrb	r3, [r3, #9]
 8006582:	b2db      	uxtb	r3, r3
 8006584:	461a      	mov	r2, r3
 8006586:	4b13      	ldr	r3, [pc, #76]	; (80065d4 <FATFS_LinkDriverEx+0x94>)
 8006588:	4413      	add	r3, r2
 800658a:	79fa      	ldrb	r2, [r7, #7]
 800658c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800658e:	4b11      	ldr	r3, [pc, #68]	; (80065d4 <FATFS_LinkDriverEx+0x94>)
 8006590:	7a5b      	ldrb	r3, [r3, #9]
 8006592:	b2db      	uxtb	r3, r3
 8006594:	1c5a      	adds	r2, r3, #1
 8006596:	b2d1      	uxtb	r1, r2
 8006598:	4a0e      	ldr	r2, [pc, #56]	; (80065d4 <FATFS_LinkDriverEx+0x94>)
 800659a:	7251      	strb	r1, [r2, #9]
 800659c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800659e:	7dbb      	ldrb	r3, [r7, #22]
 80065a0:	3330      	adds	r3, #48	; 0x30
 80065a2:	b2da      	uxtb	r2, r3
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	3301      	adds	r3, #1
 80065ac:	223a      	movs	r2, #58	; 0x3a
 80065ae:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	3302      	adds	r3, #2
 80065b4:	222f      	movs	r2, #47	; 0x2f
 80065b6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	3303      	adds	r3, #3
 80065bc:	2200      	movs	r2, #0
 80065be:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80065c0:	2300      	movs	r3, #0
 80065c2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80065c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	371c      	adds	r7, #28
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr
 80065d2:	bf00      	nop
 80065d4:	20002790 	.word	0x20002790

080065d8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80065e2:	2200      	movs	r2, #0
 80065e4:	6839      	ldr	r1, [r7, #0]
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f7ff ffaa 	bl	8006540 <FATFS_LinkDriverEx>
 80065ec:	4603      	mov	r3, r0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3708      	adds	r7, #8
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
	...

080065f8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b085      	sub	sp, #20
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	4603      	mov	r3, r0
 8006600:	6039      	str	r1, [r7, #0]
 8006602:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8006604:	88fb      	ldrh	r3, [r7, #6]
 8006606:	2b7f      	cmp	r3, #127	; 0x7f
 8006608:	d802      	bhi.n	8006610 <ff_convert+0x18>
		c = chr;
 800660a:	88fb      	ldrh	r3, [r7, #6]
 800660c:	81fb      	strh	r3, [r7, #14]
 800660e:	e025      	b.n	800665c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d00b      	beq.n	800662e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8006616:	88fb      	ldrh	r3, [r7, #6]
 8006618:	2bff      	cmp	r3, #255	; 0xff
 800661a:	d805      	bhi.n	8006628 <ff_convert+0x30>
 800661c:	88fb      	ldrh	r3, [r7, #6]
 800661e:	3b80      	subs	r3, #128	; 0x80
 8006620:	4a12      	ldr	r2, [pc, #72]	; (800666c <ff_convert+0x74>)
 8006622:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006626:	e000      	b.n	800662a <ff_convert+0x32>
 8006628:	2300      	movs	r3, #0
 800662a:	81fb      	strh	r3, [r7, #14]
 800662c:	e016      	b.n	800665c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800662e:	2300      	movs	r3, #0
 8006630:	81fb      	strh	r3, [r7, #14]
 8006632:	e009      	b.n	8006648 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8006634:	89fb      	ldrh	r3, [r7, #14]
 8006636:	4a0d      	ldr	r2, [pc, #52]	; (800666c <ff_convert+0x74>)
 8006638:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800663c:	88fa      	ldrh	r2, [r7, #6]
 800663e:	429a      	cmp	r2, r3
 8006640:	d006      	beq.n	8006650 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8006642:	89fb      	ldrh	r3, [r7, #14]
 8006644:	3301      	adds	r3, #1
 8006646:	81fb      	strh	r3, [r7, #14]
 8006648:	89fb      	ldrh	r3, [r7, #14]
 800664a:	2b7f      	cmp	r3, #127	; 0x7f
 800664c:	d9f2      	bls.n	8006634 <ff_convert+0x3c>
 800664e:	e000      	b.n	8006652 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8006650:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8006652:	89fb      	ldrh	r3, [r7, #14]
 8006654:	3380      	adds	r3, #128	; 0x80
 8006656:	b29b      	uxth	r3, r3
 8006658:	b2db      	uxtb	r3, r3
 800665a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800665c:	89fb      	ldrh	r3, [r7, #14]
}
 800665e:	4618      	mov	r0, r3
 8006660:	3714      	adds	r7, #20
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr
 800666a:	bf00      	nop
 800666c:	08006a08 	.word	0x08006a08

08006670 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8006670:	b480      	push	{r7}
 8006672:	b087      	sub	sp, #28
 8006674:	af00      	add	r7, sp, #0
 8006676:	4603      	mov	r3, r0
 8006678:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800667a:	88fb      	ldrh	r3, [r7, #6]
 800667c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006680:	d201      	bcs.n	8006686 <ff_wtoupper+0x16>
 8006682:	4b3e      	ldr	r3, [pc, #248]	; (800677c <ff_wtoupper+0x10c>)
 8006684:	e000      	b.n	8006688 <ff_wtoupper+0x18>
 8006686:	4b3e      	ldr	r3, [pc, #248]	; (8006780 <ff_wtoupper+0x110>)
 8006688:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	1c9a      	adds	r2, r3, #2
 800668e:	617a      	str	r2, [r7, #20]
 8006690:	881b      	ldrh	r3, [r3, #0]
 8006692:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8006694:	8a7b      	ldrh	r3, [r7, #18]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d068      	beq.n	800676c <ff_wtoupper+0xfc>
 800669a:	88fa      	ldrh	r2, [r7, #6]
 800669c:	8a7b      	ldrh	r3, [r7, #18]
 800669e:	429a      	cmp	r2, r3
 80066a0:	d364      	bcc.n	800676c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	1c9a      	adds	r2, r3, #2
 80066a6:	617a      	str	r2, [r7, #20]
 80066a8:	881b      	ldrh	r3, [r3, #0]
 80066aa:	823b      	strh	r3, [r7, #16]
 80066ac:	8a3b      	ldrh	r3, [r7, #16]
 80066ae:	0a1b      	lsrs	r3, r3, #8
 80066b0:	81fb      	strh	r3, [r7, #14]
 80066b2:	8a3b      	ldrh	r3, [r7, #16]
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80066b8:	88fa      	ldrh	r2, [r7, #6]
 80066ba:	8a79      	ldrh	r1, [r7, #18]
 80066bc:	8a3b      	ldrh	r3, [r7, #16]
 80066be:	440b      	add	r3, r1
 80066c0:	429a      	cmp	r2, r3
 80066c2:	da49      	bge.n	8006758 <ff_wtoupper+0xe8>
			switch (cmd) {
 80066c4:	89fb      	ldrh	r3, [r7, #14]
 80066c6:	2b08      	cmp	r3, #8
 80066c8:	d84f      	bhi.n	800676a <ff_wtoupper+0xfa>
 80066ca:	a201      	add	r2, pc, #4	; (adr r2, 80066d0 <ff_wtoupper+0x60>)
 80066cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d0:	080066f5 	.word	0x080066f5
 80066d4:	08006707 	.word	0x08006707
 80066d8:	0800671d 	.word	0x0800671d
 80066dc:	08006725 	.word	0x08006725
 80066e0:	0800672d 	.word	0x0800672d
 80066e4:	08006735 	.word	0x08006735
 80066e8:	0800673d 	.word	0x0800673d
 80066ec:	08006745 	.word	0x08006745
 80066f0:	0800674d 	.word	0x0800674d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80066f4:	88fa      	ldrh	r2, [r7, #6]
 80066f6:	8a7b      	ldrh	r3, [r7, #18]
 80066f8:	1ad3      	subs	r3, r2, r3
 80066fa:	005b      	lsls	r3, r3, #1
 80066fc:	697a      	ldr	r2, [r7, #20]
 80066fe:	4413      	add	r3, r2
 8006700:	881b      	ldrh	r3, [r3, #0]
 8006702:	80fb      	strh	r3, [r7, #6]
 8006704:	e027      	b.n	8006756 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8006706:	88fa      	ldrh	r2, [r7, #6]
 8006708:	8a7b      	ldrh	r3, [r7, #18]
 800670a:	1ad3      	subs	r3, r2, r3
 800670c:	b29b      	uxth	r3, r3
 800670e:	f003 0301 	and.w	r3, r3, #1
 8006712:	b29b      	uxth	r3, r3
 8006714:	88fa      	ldrh	r2, [r7, #6]
 8006716:	1ad3      	subs	r3, r2, r3
 8006718:	80fb      	strh	r3, [r7, #6]
 800671a:	e01c      	b.n	8006756 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800671c:	88fb      	ldrh	r3, [r7, #6]
 800671e:	3b10      	subs	r3, #16
 8006720:	80fb      	strh	r3, [r7, #6]
 8006722:	e018      	b.n	8006756 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8006724:	88fb      	ldrh	r3, [r7, #6]
 8006726:	3b20      	subs	r3, #32
 8006728:	80fb      	strh	r3, [r7, #6]
 800672a:	e014      	b.n	8006756 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800672c:	88fb      	ldrh	r3, [r7, #6]
 800672e:	3b30      	subs	r3, #48	; 0x30
 8006730:	80fb      	strh	r3, [r7, #6]
 8006732:	e010      	b.n	8006756 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8006734:	88fb      	ldrh	r3, [r7, #6]
 8006736:	3b1a      	subs	r3, #26
 8006738:	80fb      	strh	r3, [r7, #6]
 800673a:	e00c      	b.n	8006756 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800673c:	88fb      	ldrh	r3, [r7, #6]
 800673e:	3308      	adds	r3, #8
 8006740:	80fb      	strh	r3, [r7, #6]
 8006742:	e008      	b.n	8006756 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8006744:	88fb      	ldrh	r3, [r7, #6]
 8006746:	3b50      	subs	r3, #80	; 0x50
 8006748:	80fb      	strh	r3, [r7, #6]
 800674a:	e004      	b.n	8006756 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800674c:	88fb      	ldrh	r3, [r7, #6]
 800674e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8006752:	80fb      	strh	r3, [r7, #6]
 8006754:	bf00      	nop
			}
			break;
 8006756:	e008      	b.n	800676a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8006758:	89fb      	ldrh	r3, [r7, #14]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d195      	bne.n	800668a <ff_wtoupper+0x1a>
 800675e:	8a3b      	ldrh	r3, [r7, #16]
 8006760:	005b      	lsls	r3, r3, #1
 8006762:	697a      	ldr	r2, [r7, #20]
 8006764:	4413      	add	r3, r2
 8006766:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8006768:	e78f      	b.n	800668a <ff_wtoupper+0x1a>
			break;
 800676a:	bf00      	nop
	}

	return chr;
 800676c:	88fb      	ldrh	r3, [r7, #6]
}
 800676e:	4618      	mov	r0, r3
 8006770:	371c      	adds	r7, #28
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr
 800677a:	bf00      	nop
 800677c:	08006b08 	.word	0x08006b08
 8006780:	08006cfc 	.word	0x08006cfc

08006784 <__libc_init_array>:
 8006784:	b570      	push	{r4, r5, r6, lr}
 8006786:	4d0d      	ldr	r5, [pc, #52]	; (80067bc <__libc_init_array+0x38>)
 8006788:	4c0d      	ldr	r4, [pc, #52]	; (80067c0 <__libc_init_array+0x3c>)
 800678a:	1b64      	subs	r4, r4, r5
 800678c:	10a4      	asrs	r4, r4, #2
 800678e:	2600      	movs	r6, #0
 8006790:	42a6      	cmp	r6, r4
 8006792:	d109      	bne.n	80067a8 <__libc_init_array+0x24>
 8006794:	4d0b      	ldr	r5, [pc, #44]	; (80067c4 <__libc_init_array+0x40>)
 8006796:	4c0c      	ldr	r4, [pc, #48]	; (80067c8 <__libc_init_array+0x44>)
 8006798:	f000 f820 	bl	80067dc <_init>
 800679c:	1b64      	subs	r4, r4, r5
 800679e:	10a4      	asrs	r4, r4, #2
 80067a0:	2600      	movs	r6, #0
 80067a2:	42a6      	cmp	r6, r4
 80067a4:	d105      	bne.n	80067b2 <__libc_init_array+0x2e>
 80067a6:	bd70      	pop	{r4, r5, r6, pc}
 80067a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80067ac:	4798      	blx	r3
 80067ae:	3601      	adds	r6, #1
 80067b0:	e7ee      	b.n	8006790 <__libc_init_array+0xc>
 80067b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80067b6:	4798      	blx	r3
 80067b8:	3601      	adds	r6, #1
 80067ba:	e7f2      	b.n	80067a2 <__libc_init_array+0x1e>
 80067bc:	08006dc0 	.word	0x08006dc0
 80067c0:	08006dc0 	.word	0x08006dc0
 80067c4:	08006dc0 	.word	0x08006dc0
 80067c8:	08006dc4 	.word	0x08006dc4

080067cc <memset>:
 80067cc:	4402      	add	r2, r0
 80067ce:	4603      	mov	r3, r0
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d100      	bne.n	80067d6 <memset+0xa>
 80067d4:	4770      	bx	lr
 80067d6:	f803 1b01 	strb.w	r1, [r3], #1
 80067da:	e7f9      	b.n	80067d0 <memset+0x4>

080067dc <_init>:
 80067dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067de:	bf00      	nop
 80067e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067e2:	bc08      	pop	{r3}
 80067e4:	469e      	mov	lr, r3
 80067e6:	4770      	bx	lr

080067e8 <_fini>:
 80067e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ea:	bf00      	nop
 80067ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ee:	bc08      	pop	{r3}
 80067f0:	469e      	mov	lr, r3
 80067f2:	4770      	bx	lr
