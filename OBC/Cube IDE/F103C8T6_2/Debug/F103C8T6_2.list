
F103C8T6_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e68  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08001f74  08001f74  00011f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001fa0  08001fa0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001fa0  08001fa0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001fa0  08001fa0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001fa0  08001fa0  00011fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001fa4  08001fa4  00011fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001fa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  2000000c  08001fb4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08001fb4  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000969e  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001799  00000000  00000000  000296d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008e8  00000000  00000000  0002ae70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008a8  00000000  00000000  0002b758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016bb6  00000000  00000000  0002c000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a014  00000000  00000000  00042bb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000830d4  00000000  00000000  0004cbca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cfc9e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023c0  00000000  00000000  000cfcf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001f5c 	.word	0x08001f5c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001f5c 	.word	0x08001f5c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fc0a 	bl	8000968 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f834 	bl	80001c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8d4 	bl	8000304 <MX_GPIO_Init>
  MX_SPI1_Init();
 800015c:	f000 f872 	bl	8000244 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000160:	f000 f8a6 	bl	80002b0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(SELECTOR_GPIO_Port, SELECTOR_Pin, GPIO_PIN_RESET);
 8000164:	2200      	movs	r2, #0
 8000166:	2101      	movs	r1, #1
 8000168:	4813      	ldr	r0, [pc, #76]	; (80001b8 <main+0x6c>)
 800016a:	f000 feeb 	bl	8000f44 <HAL_GPIO_WritePin>
  while(!W25qxx_Init()){
 800016e:	e002      	b.n	8000176 <main+0x2a>
	  initRes = false;
 8000170:	4b12      	ldr	r3, [pc, #72]	; (80001bc <main+0x70>)
 8000172:	2200      	movs	r2, #0
 8000174:	701a      	strb	r2, [r3, #0]
  while(!W25qxx_Init()){
 8000176:	f000 faff 	bl	8000778 <W25qxx_Init>
 800017a:	4603      	mov	r3, r0
 800017c:	f083 0301 	eor.w	r3, r3, #1
 8000180:	b2db      	uxtb	r3, r3
 8000182:	2b00      	cmp	r3, #0
 8000184:	d1f4      	bne.n	8000170 <main+0x24>
  }
  initRes = true;
 8000186:	4b0d      	ldr	r3, [pc, #52]	; (80001bc <main+0x70>)
 8000188:	2201      	movs	r2, #1
 800018a:	701a      	strb	r2, [r3, #0]

  HAL_GPIO_WritePin(SELECTOR_GPIO_Port, SELECTOR_Pin, GPIO_PIN_SET);
 800018c:	2201      	movs	r2, #1
 800018e:	2101      	movs	r1, #1
 8000190:	4809      	ldr	r0, [pc, #36]	; (80001b8 <main+0x6c>)
 8000192:	f000 fed7 	bl	8000f44 <HAL_GPIO_WritePin>
    while(!W25qxx_Init()){
 8000196:	e002      	b.n	800019e <main+0x52>
  	  initRes = false;
 8000198:	4b08      	ldr	r3, [pc, #32]	; (80001bc <main+0x70>)
 800019a:	2200      	movs	r2, #0
 800019c:	701a      	strb	r2, [r3, #0]
    while(!W25qxx_Init()){
 800019e:	f000 faeb 	bl	8000778 <W25qxx_Init>
 80001a2:	4603      	mov	r3, r0
 80001a4:	f083 0301 	eor.w	r3, r3, #1
 80001a8:	b2db      	uxtb	r3, r3
 80001aa:	2b00      	cmp	r3, #0
 80001ac:	d1f4      	bne.n	8000198 <main+0x4c>
    }
    initRes = true;
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <main+0x70>)
 80001b0:	2201      	movs	r2, #1
 80001b2:	701a      	strb	r2, [r3, #0]
//  W25qxx_ReadSector(buffer, 3, 0, 4096);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001b4:	e7fe      	b.n	80001b4 <main+0x68>
 80001b6:	bf00      	nop
 80001b8:	40010c00 	.word	0x40010c00
 80001bc:	200000c8 	.word	0x200000c8

080001c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b090      	sub	sp, #64	; 0x40
 80001c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001c6:	f107 0318 	add.w	r3, r7, #24
 80001ca:	2228      	movs	r2, #40	; 0x28
 80001cc:	2100      	movs	r1, #0
 80001ce:	4618      	mov	r0, r3
 80001d0:	f001 febc 	bl	8001f4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d4:	1d3b      	adds	r3, r7, #4
 80001d6:	2200      	movs	r2, #0
 80001d8:	601a      	str	r2, [r3, #0]
 80001da:	605a      	str	r2, [r3, #4]
 80001dc:	609a      	str	r2, [r3, #8]
 80001de:	60da      	str	r2, [r3, #12]
 80001e0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001e2:	2302      	movs	r3, #2
 80001e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001e6:	2301      	movs	r3, #1
 80001e8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001ea:	2310      	movs	r3, #16
 80001ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ee:	2302      	movs	r3, #2
 80001f0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001f2:	2300      	movs	r3, #0
 80001f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001f6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80001fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001fc:	f107 0318 	add.w	r3, r7, #24
 8000200:	4618      	mov	r0, r3
 8000202:	f000 feb7 	bl	8000f74 <HAL_RCC_OscConfig>
 8000206:	4603      	mov	r3, r0
 8000208:	2b00      	cmp	r3, #0
 800020a:	d001      	beq.n	8000210 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800020c:	f000 f8f0 	bl	80003f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000210:	230f      	movs	r3, #15
 8000212:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000214:	2302      	movs	r3, #2
 8000216:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000218:	2300      	movs	r3, #0
 800021a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800021c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000220:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000222:	2300      	movs	r3, #0
 8000224:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	2102      	movs	r1, #2
 800022a:	4618      	mov	r0, r3
 800022c:	f001 f924 	bl	8001478 <HAL_RCC_ClockConfig>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d001      	beq.n	800023a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000236:	f000 f8db 	bl	80003f0 <Error_Handler>
  }
}
 800023a:	bf00      	nop
 800023c:	3740      	adds	r7, #64	; 0x40
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
	...

08000244 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000248:	4b17      	ldr	r3, [pc, #92]	; (80002a8 <MX_SPI1_Init+0x64>)
 800024a:	4a18      	ldr	r2, [pc, #96]	; (80002ac <MX_SPI1_Init+0x68>)
 800024c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800024e:	4b16      	ldr	r3, [pc, #88]	; (80002a8 <MX_SPI1_Init+0x64>)
 8000250:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000254:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000256:	4b14      	ldr	r3, [pc, #80]	; (80002a8 <MX_SPI1_Init+0x64>)
 8000258:	2200      	movs	r2, #0
 800025a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800025c:	4b12      	ldr	r3, [pc, #72]	; (80002a8 <MX_SPI1_Init+0x64>)
 800025e:	2200      	movs	r2, #0
 8000260:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000262:	4b11      	ldr	r3, [pc, #68]	; (80002a8 <MX_SPI1_Init+0x64>)
 8000264:	2200      	movs	r2, #0
 8000266:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000268:	4b0f      	ldr	r3, [pc, #60]	; (80002a8 <MX_SPI1_Init+0x64>)
 800026a:	2200      	movs	r2, #0
 800026c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800026e:	4b0e      	ldr	r3, [pc, #56]	; (80002a8 <MX_SPI1_Init+0x64>)
 8000270:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000274:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000276:	4b0c      	ldr	r3, [pc, #48]	; (80002a8 <MX_SPI1_Init+0x64>)
 8000278:	2208      	movs	r2, #8
 800027a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800027c:	4b0a      	ldr	r3, [pc, #40]	; (80002a8 <MX_SPI1_Init+0x64>)
 800027e:	2200      	movs	r2, #0
 8000280:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000282:	4b09      	ldr	r3, [pc, #36]	; (80002a8 <MX_SPI1_Init+0x64>)
 8000284:	2200      	movs	r2, #0
 8000286:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000288:	4b07      	ldr	r3, [pc, #28]	; (80002a8 <MX_SPI1_Init+0x64>)
 800028a:	2200      	movs	r2, #0
 800028c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800028e:	4b06      	ldr	r3, [pc, #24]	; (80002a8 <MX_SPI1_Init+0x64>)
 8000290:	220a      	movs	r2, #10
 8000292:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000294:	4804      	ldr	r0, [pc, #16]	; (80002a8 <MX_SPI1_Init+0x64>)
 8000296:	f001 fa7d 	bl	8001794 <HAL_SPI_Init>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d001      	beq.n	80002a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80002a0:	f000 f8a6 	bl	80003f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80002a4:	bf00      	nop
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	20000028 	.word	0x20000028
 80002ac:	40013000 	.word	0x40013000

080002b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002b4:	4b11      	ldr	r3, [pc, #68]	; (80002fc <MX_USART1_UART_Init+0x4c>)
 80002b6:	4a12      	ldr	r2, [pc, #72]	; (8000300 <MX_USART1_UART_Init+0x50>)
 80002b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002ba:	4b10      	ldr	r3, [pc, #64]	; (80002fc <MX_USART1_UART_Init+0x4c>)
 80002bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002c2:	4b0e      	ldr	r3, [pc, #56]	; (80002fc <MX_USART1_UART_Init+0x4c>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002c8:	4b0c      	ldr	r3, [pc, #48]	; (80002fc <MX_USART1_UART_Init+0x4c>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002ce:	4b0b      	ldr	r3, [pc, #44]	; (80002fc <MX_USART1_UART_Init+0x4c>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002d4:	4b09      	ldr	r3, [pc, #36]	; (80002fc <MX_USART1_UART_Init+0x4c>)
 80002d6:	220c      	movs	r2, #12
 80002d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002da:	4b08      	ldr	r3, [pc, #32]	; (80002fc <MX_USART1_UART_Init+0x4c>)
 80002dc:	2200      	movs	r2, #0
 80002de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002e0:	4b06      	ldr	r3, [pc, #24]	; (80002fc <MX_USART1_UART_Init+0x4c>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002e6:	4805      	ldr	r0, [pc, #20]	; (80002fc <MX_USART1_UART_Init+0x4c>)
 80002e8:	f001 fd2e 	bl	8001d48 <HAL_UART_Init>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80002f2:	f000 f87d 	bl	80003f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002f6:	bf00      	nop
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	20000080 	.word	0x20000080
 8000300:	40013800 	.word	0x40013800

08000304 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b088      	sub	sp, #32
 8000308:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800030a:	f107 0310 	add.w	r3, r7, #16
 800030e:	2200      	movs	r2, #0
 8000310:	601a      	str	r2, [r3, #0]
 8000312:	605a      	str	r2, [r3, #4]
 8000314:	609a      	str	r2, [r3, #8]
 8000316:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000318:	4b31      	ldr	r3, [pc, #196]	; (80003e0 <MX_GPIO_Init+0xdc>)
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	4a30      	ldr	r2, [pc, #192]	; (80003e0 <MX_GPIO_Init+0xdc>)
 800031e:	f043 0310 	orr.w	r3, r3, #16
 8000322:	6193      	str	r3, [r2, #24]
 8000324:	4b2e      	ldr	r3, [pc, #184]	; (80003e0 <MX_GPIO_Init+0xdc>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	f003 0310 	and.w	r3, r3, #16
 800032c:	60fb      	str	r3, [r7, #12]
 800032e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000330:	4b2b      	ldr	r3, [pc, #172]	; (80003e0 <MX_GPIO_Init+0xdc>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	4a2a      	ldr	r2, [pc, #168]	; (80003e0 <MX_GPIO_Init+0xdc>)
 8000336:	f043 0304 	orr.w	r3, r3, #4
 800033a:	6193      	str	r3, [r2, #24]
 800033c:	4b28      	ldr	r3, [pc, #160]	; (80003e0 <MX_GPIO_Init+0xdc>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	f003 0304 	and.w	r3, r3, #4
 8000344:	60bb      	str	r3, [r7, #8]
 8000346:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000348:	4b25      	ldr	r3, [pc, #148]	; (80003e0 <MX_GPIO_Init+0xdc>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	4a24      	ldr	r2, [pc, #144]	; (80003e0 <MX_GPIO_Init+0xdc>)
 800034e:	f043 0308 	orr.w	r3, r3, #8
 8000352:	6193      	str	r3, [r2, #24]
 8000354:	4b22      	ldr	r3, [pc, #136]	; (80003e0 <MX_GPIO_Init+0xdc>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	f003 0308 	and.w	r3, r3, #8
 800035c:	607b      	str	r3, [r7, #4]
 800035e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000360:	2200      	movs	r2, #0
 8000362:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000366:	481f      	ldr	r0, [pc, #124]	; (80003e4 <MX_GPIO_Init+0xe0>)
 8000368:	f000 fdec 	bl	8000f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 800036c:	2200      	movs	r2, #0
 800036e:	2110      	movs	r1, #16
 8000370:	481d      	ldr	r0, [pc, #116]	; (80003e8 <MX_GPIO_Init+0xe4>)
 8000372:	f000 fde7 	bl	8000f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SELECTOR_GPIO_Port, SELECTOR_Pin, GPIO_PIN_RESET);
 8000376:	2200      	movs	r2, #0
 8000378:	2101      	movs	r1, #1
 800037a:	481c      	ldr	r0, [pc, #112]	; (80003ec <MX_GPIO_Init+0xe8>)
 800037c:	f000 fde2 	bl	8000f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000380:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000384:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000386:	2301      	movs	r3, #1
 8000388:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800038a:	2300      	movs	r3, #0
 800038c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800038e:	2302      	movs	r3, #2
 8000390:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000392:	f107 0310 	add.w	r3, r7, #16
 8000396:	4619      	mov	r1, r3
 8000398:	4812      	ldr	r0, [pc, #72]	; (80003e4 <MX_GPIO_Init+0xe0>)
 800039a:	f000 fc4f 	bl	8000c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_CS_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 800039e:	2310      	movs	r3, #16
 80003a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003a2:	2301      	movs	r3, #1
 80003a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a6:	2300      	movs	r3, #0
 80003a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003aa:	2302      	movs	r3, #2
 80003ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 80003ae:	f107 0310 	add.w	r3, r7, #16
 80003b2:	4619      	mov	r1, r3
 80003b4:	480c      	ldr	r0, [pc, #48]	; (80003e8 <MX_GPIO_Init+0xe4>)
 80003b6:	f000 fc41 	bl	8000c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : SELECTOR_Pin */
  GPIO_InitStruct.Pin = SELECTOR_Pin;
 80003ba:	2301      	movs	r3, #1
 80003bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003be:	2301      	movs	r3, #1
 80003c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c2:	2300      	movs	r3, #0
 80003c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c6:	2302      	movs	r3, #2
 80003c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SELECTOR_GPIO_Port, &GPIO_InitStruct);
 80003ca:	f107 0310 	add.w	r3, r7, #16
 80003ce:	4619      	mov	r1, r3
 80003d0:	4806      	ldr	r0, [pc, #24]	; (80003ec <MX_GPIO_Init+0xe8>)
 80003d2:	f000 fc33 	bl	8000c3c <HAL_GPIO_Init>

}
 80003d6:	bf00      	nop
 80003d8:	3720      	adds	r7, #32
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	40021000 	.word	0x40021000
 80003e4:	40011000 	.word	0x40011000
 80003e8:	40010800 	.word	0x40010800
 80003ec:	40010c00 	.word	0x40010c00

080003f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003f4:	b672      	cpsid	i
}
 80003f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003f8:	e7fe      	b.n	80003f8 <Error_Handler+0x8>
	...

080003fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	b085      	sub	sp, #20
 8000400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000402:	4b15      	ldr	r3, [pc, #84]	; (8000458 <HAL_MspInit+0x5c>)
 8000404:	699b      	ldr	r3, [r3, #24]
 8000406:	4a14      	ldr	r2, [pc, #80]	; (8000458 <HAL_MspInit+0x5c>)
 8000408:	f043 0301 	orr.w	r3, r3, #1
 800040c:	6193      	str	r3, [r2, #24]
 800040e:	4b12      	ldr	r3, [pc, #72]	; (8000458 <HAL_MspInit+0x5c>)
 8000410:	699b      	ldr	r3, [r3, #24]
 8000412:	f003 0301 	and.w	r3, r3, #1
 8000416:	60bb      	str	r3, [r7, #8]
 8000418:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800041a:	4b0f      	ldr	r3, [pc, #60]	; (8000458 <HAL_MspInit+0x5c>)
 800041c:	69db      	ldr	r3, [r3, #28]
 800041e:	4a0e      	ldr	r2, [pc, #56]	; (8000458 <HAL_MspInit+0x5c>)
 8000420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000424:	61d3      	str	r3, [r2, #28]
 8000426:	4b0c      	ldr	r3, [pc, #48]	; (8000458 <HAL_MspInit+0x5c>)
 8000428:	69db      	ldr	r3, [r3, #28]
 800042a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800042e:	607b      	str	r3, [r7, #4]
 8000430:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000432:	4b0a      	ldr	r3, [pc, #40]	; (800045c <HAL_MspInit+0x60>)
 8000434:	685b      	ldr	r3, [r3, #4]
 8000436:	60fb      	str	r3, [r7, #12]
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800043e:	60fb      	str	r3, [r7, #12]
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000446:	60fb      	str	r3, [r7, #12]
 8000448:	4a04      	ldr	r2, [pc, #16]	; (800045c <HAL_MspInit+0x60>)
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800044e:	bf00      	nop
 8000450:	3714      	adds	r7, #20
 8000452:	46bd      	mov	sp, r7
 8000454:	bc80      	pop	{r7}
 8000456:	4770      	bx	lr
 8000458:	40021000 	.word	0x40021000
 800045c:	40010000 	.word	0x40010000

08000460 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b088      	sub	sp, #32
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000468:	f107 0310 	add.w	r3, r7, #16
 800046c:	2200      	movs	r2, #0
 800046e:	601a      	str	r2, [r3, #0]
 8000470:	605a      	str	r2, [r3, #4]
 8000472:	609a      	str	r2, [r3, #8]
 8000474:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	4a1b      	ldr	r2, [pc, #108]	; (80004e8 <HAL_SPI_MspInit+0x88>)
 800047c:	4293      	cmp	r3, r2
 800047e:	d12f      	bne.n	80004e0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000480:	4b1a      	ldr	r3, [pc, #104]	; (80004ec <HAL_SPI_MspInit+0x8c>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	4a19      	ldr	r2, [pc, #100]	; (80004ec <HAL_SPI_MspInit+0x8c>)
 8000486:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800048a:	6193      	str	r3, [r2, #24]
 800048c:	4b17      	ldr	r3, [pc, #92]	; (80004ec <HAL_SPI_MspInit+0x8c>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000494:	60fb      	str	r3, [r7, #12]
 8000496:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000498:	4b14      	ldr	r3, [pc, #80]	; (80004ec <HAL_SPI_MspInit+0x8c>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	4a13      	ldr	r2, [pc, #76]	; (80004ec <HAL_SPI_MspInit+0x8c>)
 800049e:	f043 0304 	orr.w	r3, r3, #4
 80004a2:	6193      	str	r3, [r2, #24]
 80004a4:	4b11      	ldr	r3, [pc, #68]	; (80004ec <HAL_SPI_MspInit+0x8c>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	f003 0304 	and.w	r3, r3, #4
 80004ac:	60bb      	str	r3, [r7, #8]
 80004ae:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80004b0:	23a0      	movs	r3, #160	; 0xa0
 80004b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004b4:	2302      	movs	r3, #2
 80004b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004b8:	2303      	movs	r3, #3
 80004ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004bc:	f107 0310 	add.w	r3, r7, #16
 80004c0:	4619      	mov	r1, r3
 80004c2:	480b      	ldr	r0, [pc, #44]	; (80004f0 <HAL_SPI_MspInit+0x90>)
 80004c4:	f000 fbba 	bl	8000c3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80004c8:	2340      	movs	r3, #64	; 0x40
 80004ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004cc:	2300      	movs	r3, #0
 80004ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d0:	2300      	movs	r3, #0
 80004d2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d4:	f107 0310 	add.w	r3, r7, #16
 80004d8:	4619      	mov	r1, r3
 80004da:	4805      	ldr	r0, [pc, #20]	; (80004f0 <HAL_SPI_MspInit+0x90>)
 80004dc:	f000 fbae 	bl	8000c3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80004e0:	bf00      	nop
 80004e2:	3720      	adds	r7, #32
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	40013000 	.word	0x40013000
 80004ec:	40021000 	.word	0x40021000
 80004f0:	40010800 	.word	0x40010800

080004f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b088      	sub	sp, #32
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fc:	f107 0310 	add.w	r3, r7, #16
 8000500:	2200      	movs	r2, #0
 8000502:	601a      	str	r2, [r3, #0]
 8000504:	605a      	str	r2, [r3, #4]
 8000506:	609a      	str	r2, [r3, #8]
 8000508:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4a1c      	ldr	r2, [pc, #112]	; (8000580 <HAL_UART_MspInit+0x8c>)
 8000510:	4293      	cmp	r3, r2
 8000512:	d131      	bne.n	8000578 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000514:	4b1b      	ldr	r3, [pc, #108]	; (8000584 <HAL_UART_MspInit+0x90>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	4a1a      	ldr	r2, [pc, #104]	; (8000584 <HAL_UART_MspInit+0x90>)
 800051a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800051e:	6193      	str	r3, [r2, #24]
 8000520:	4b18      	ldr	r3, [pc, #96]	; (8000584 <HAL_UART_MspInit+0x90>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000528:	60fb      	str	r3, [r7, #12]
 800052a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800052c:	4b15      	ldr	r3, [pc, #84]	; (8000584 <HAL_UART_MspInit+0x90>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	4a14      	ldr	r2, [pc, #80]	; (8000584 <HAL_UART_MspInit+0x90>)
 8000532:	f043 0304 	orr.w	r3, r3, #4
 8000536:	6193      	str	r3, [r2, #24]
 8000538:	4b12      	ldr	r3, [pc, #72]	; (8000584 <HAL_UART_MspInit+0x90>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	f003 0304 	and.w	r3, r3, #4
 8000540:	60bb      	str	r3, [r7, #8]
 8000542:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000544:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000548:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800054a:	2302      	movs	r3, #2
 800054c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800054e:	2303      	movs	r3, #3
 8000550:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000552:	f107 0310 	add.w	r3, r7, #16
 8000556:	4619      	mov	r1, r3
 8000558:	480b      	ldr	r0, [pc, #44]	; (8000588 <HAL_UART_MspInit+0x94>)
 800055a:	f000 fb6f 	bl	8000c3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800055e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000562:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000564:	2300      	movs	r3, #0
 8000566:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000568:	2300      	movs	r3, #0
 800056a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800056c:	f107 0310 	add.w	r3, r7, #16
 8000570:	4619      	mov	r1, r3
 8000572:	4805      	ldr	r0, [pc, #20]	; (8000588 <HAL_UART_MspInit+0x94>)
 8000574:	f000 fb62 	bl	8000c3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000578:	bf00      	nop
 800057a:	3720      	adds	r7, #32
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40013800 	.word	0x40013800
 8000584:	40021000 	.word	0x40021000
 8000588:	40010800 	.word	0x40010800

0800058c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000590:	e7fe      	b.n	8000590 <NMI_Handler+0x4>

08000592 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000592:	b480      	push	{r7}
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000596:	e7fe      	b.n	8000596 <HardFault_Handler+0x4>

08000598 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800059c:	e7fe      	b.n	800059c <MemManage_Handler+0x4>

0800059e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800059e:	b480      	push	{r7}
 80005a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005a2:	e7fe      	b.n	80005a2 <BusFault_Handler+0x4>

080005a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005a8:	e7fe      	b.n	80005a8 <UsageFault_Handler+0x4>

080005aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005aa:	b480      	push	{r7}
 80005ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005ae:	bf00      	nop
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bc80      	pop	{r7}
 80005b4:	4770      	bx	lr

080005b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005b6:	b480      	push	{r7}
 80005b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005ba:	bf00      	nop
 80005bc:	46bd      	mov	sp, r7
 80005be:	bc80      	pop	{r7}
 80005c0:	4770      	bx	lr

080005c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005c2:	b480      	push	{r7}
 80005c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005c6:	bf00      	nop
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bc80      	pop	{r7}
 80005cc:	4770      	bx	lr

080005ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005ce:	b580      	push	{r7, lr}
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005d2:	f000 fa0f 	bl	80009f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}

080005da <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005da:	b480      	push	{r7}
 80005dc:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005de:	bf00      	nop
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bc80      	pop	{r7}
 80005e4:	4770      	bx	lr
	...

080005e8 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b086      	sub	sp, #24
 80005ec:	af02      	add	r7, sp, #8
 80005ee:	4603      	mov	r3, r0
 80005f0:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 80005f2:	f107 020f 	add.w	r2, r7, #15
 80005f6:	1df9      	adds	r1, r7, #7
 80005f8:	2364      	movs	r3, #100	; 0x64
 80005fa:	9300      	str	r3, [sp, #0]
 80005fc:	2301      	movs	r3, #1
 80005fe:	4804      	ldr	r0, [pc, #16]	; (8000610 <W25qxx_Spi+0x28>)
 8000600:	f001 f94c 	bl	800189c <HAL_SPI_TransmitReceive>
	return ret;
 8000604:	7bfb      	ldrb	r3, [r7, #15]
}
 8000606:	4618      	mov	r0, r3
 8000608:	3710      	adds	r7, #16
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	20000028 	.word	0x20000028

08000614 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	60fb      	str	r3, [r7, #12]
 800061e:	2300      	movs	r3, #0
 8000620:	60bb      	str	r3, [r7, #8]
 8000622:	2300      	movs	r3, #0
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	2300      	movs	r3, #0
 8000628:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	2110      	movs	r1, #16
 800062e:	4813      	ldr	r0, [pc, #76]	; (800067c <W25qxx_ReadID+0x68>)
 8000630:	f000 fc88 	bl	8000f44 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8000634:	209f      	movs	r0, #159	; 0x9f
 8000636:	f7ff ffd7 	bl	80005e8 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800063a:	20a5      	movs	r0, #165	; 0xa5
 800063c:	f7ff ffd4 	bl	80005e8 <W25qxx_Spi>
 8000640:	4603      	mov	r3, r0
 8000642:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000644:	20a5      	movs	r0, #165	; 0xa5
 8000646:	f7ff ffcf 	bl	80005e8 <W25qxx_Spi>
 800064a:	4603      	mov	r3, r0
 800064c:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800064e:	20a5      	movs	r0, #165	; 0xa5
 8000650:	f7ff ffca 	bl	80005e8 <W25qxx_Spi>
 8000654:	4603      	mov	r3, r0
 8000656:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8000658:	2201      	movs	r2, #1
 800065a:	2110      	movs	r1, #16
 800065c:	4807      	ldr	r0, [pc, #28]	; (800067c <W25qxx_ReadID+0x68>)
 800065e:	f000 fc71 	bl	8000f44 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8000662:	68bb      	ldr	r3, [r7, #8]
 8000664:	041a      	lsls	r2, r3, #16
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	021b      	lsls	r3, r3, #8
 800066a:	4313      	orrs	r3, r2
 800066c:	683a      	ldr	r2, [r7, #0]
 800066e:	4313      	orrs	r3, r2
 8000670:	60fb      	str	r3, [r7, #12]
	return Temp;
 8000672:	68fb      	ldr	r3, [r7, #12]
}
 8000674:	4618      	mov	r0, r3
 8000676:	3710      	adds	r7, #16
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40010800 	.word	0x40010800

08000680 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8000680:	b590      	push	{r4, r7, lr}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	2110      	movs	r1, #16
 800068a:	4816      	ldr	r0, [pc, #88]	; (80006e4 <W25qxx_ReadUniqID+0x64>)
 800068c:	f000 fc5a 	bl	8000f44 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8000690:	204b      	movs	r0, #75	; 0x4b
 8000692:	f7ff ffa9 	bl	80005e8 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8000696:	2300      	movs	r3, #0
 8000698:	71fb      	strb	r3, [r7, #7]
 800069a:	e005      	b.n	80006a8 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800069c:	20a5      	movs	r0, #165	; 0xa5
 800069e:	f7ff ffa3 	bl	80005e8 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	3301      	adds	r3, #1
 80006a6:	71fb      	strb	r3, [r7, #7]
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	2b03      	cmp	r3, #3
 80006ac:	d9f6      	bls.n	800069c <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 80006ae:	2300      	movs	r3, #0
 80006b0:	71bb      	strb	r3, [r7, #6]
 80006b2:	e00b      	b.n	80006cc <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80006b4:	79bc      	ldrb	r4, [r7, #6]
 80006b6:	20a5      	movs	r0, #165	; 0xa5
 80006b8:	f7ff ff96 	bl	80005e8 <W25qxx_Spi>
 80006bc:	4603      	mov	r3, r0
 80006be:	461a      	mov	r2, r3
 80006c0:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <W25qxx_ReadUniqID+0x68>)
 80006c2:	4423      	add	r3, r4
 80006c4:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 80006c6:	79bb      	ldrb	r3, [r7, #6]
 80006c8:	3301      	adds	r3, #1
 80006ca:	71bb      	strb	r3, [r7, #6]
 80006cc:	79bb      	ldrb	r3, [r7, #6]
 80006ce:	2b07      	cmp	r3, #7
 80006d0:	d9f0      	bls.n	80006b4 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80006d2:	2201      	movs	r2, #1
 80006d4:	2110      	movs	r1, #16
 80006d6:	4803      	ldr	r0, [pc, #12]	; (80006e4 <W25qxx_ReadUniqID+0x64>)
 80006d8:	f000 fc34 	bl	8000f44 <HAL_GPIO_WritePin>
}
 80006dc:	bf00      	nop
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd90      	pop	{r4, r7, pc}
 80006e4:	40010800 	.word	0x40010800
 80006e8:	200000cc 	.word	0x200000cc

080006ec <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2110      	movs	r1, #16
 80006fe:	481c      	ldr	r0, [pc, #112]	; (8000770 <W25qxx_ReadStatusRegister+0x84>)
 8000700:	f000 fc20 	bl	8000f44 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8000704:	79fb      	ldrb	r3, [r7, #7]
 8000706:	2b01      	cmp	r3, #1
 8000708:	d10c      	bne.n	8000724 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 800070a:	2005      	movs	r0, #5
 800070c:	f7ff ff6c 	bl	80005e8 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000710:	20a5      	movs	r0, #165	; 0xa5
 8000712:	f7ff ff69 	bl	80005e8 <W25qxx_Spi>
 8000716:	4603      	mov	r3, r0
 8000718:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 800071a:	4a16      	ldr	r2, [pc, #88]	; (8000774 <W25qxx_ReadStatusRegister+0x88>)
 800071c:	7bfb      	ldrb	r3, [r7, #15]
 800071e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8000722:	e01b      	b.n	800075c <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8000724:	79fb      	ldrb	r3, [r7, #7]
 8000726:	2b02      	cmp	r3, #2
 8000728:	d10c      	bne.n	8000744 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 800072a:	2035      	movs	r0, #53	; 0x35
 800072c:	f7ff ff5c 	bl	80005e8 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000730:	20a5      	movs	r0, #165	; 0xa5
 8000732:	f7ff ff59 	bl	80005e8 <W25qxx_Spi>
 8000736:	4603      	mov	r3, r0
 8000738:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 800073a:	4a0e      	ldr	r2, [pc, #56]	; (8000774 <W25qxx_ReadStatusRegister+0x88>)
 800073c:	7bfb      	ldrb	r3, [r7, #15]
 800073e:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8000742:	e00b      	b.n	800075c <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8000744:	2015      	movs	r0, #21
 8000746:	f7ff ff4f 	bl	80005e8 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800074a:	20a5      	movs	r0, #165	; 0xa5
 800074c:	f7ff ff4c 	bl	80005e8 <W25qxx_Spi>
 8000750:	4603      	mov	r3, r0
 8000752:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8000754:	4a07      	ldr	r2, [pc, #28]	; (8000774 <W25qxx_ReadStatusRegister+0x88>)
 8000756:	7bfb      	ldrb	r3, [r7, #15]
 8000758:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800075c:	2201      	movs	r2, #1
 800075e:	2110      	movs	r1, #16
 8000760:	4803      	ldr	r0, [pc, #12]	; (8000770 <W25qxx_ReadStatusRegister+0x84>)
 8000762:	f000 fbef 	bl	8000f44 <HAL_GPIO_WritePin>
	return status;
 8000766:	7bfb      	ldrb	r3, [r7, #15]
}
 8000768:	4618      	mov	r0, r3
 800076a:	3710      	adds	r7, #16
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40010800 	.word	0x40010800
 8000774:	200000cc 	.word	0x200000cc

08000778 <W25qxx_Init>:
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
bool W25qxx_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 800077e:	4b65      	ldr	r3, [pc, #404]	; (8000914 <W25qxx_Init+0x19c>)
 8000780:	2201      	movs	r2, #1
 8000782:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 8000786:	e002      	b.n	800078e <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8000788:	2001      	movs	r0, #1
 800078a:	f000 f94f 	bl	8000a2c <HAL_Delay>
	while (HAL_GetTick() < 100)
 800078e:	f000 f943 	bl	8000a18 <HAL_GetTick>
 8000792:	4603      	mov	r3, r0
 8000794:	2b63      	cmp	r3, #99	; 0x63
 8000796:	d9f7      	bls.n	8000788 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8000798:	2201      	movs	r2, #1
 800079a:	2110      	movs	r1, #16
 800079c:	485e      	ldr	r0, [pc, #376]	; (8000918 <W25qxx_Init+0x1a0>)
 800079e:	f000 fbd1 	bl	8000f44 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 80007a2:	2064      	movs	r0, #100	; 0x64
 80007a4:	f000 f942 	bl	8000a2c <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 80007a8:	f7ff ff34 	bl	8000614 <W25qxx_ReadID>
 80007ac:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	3b11      	subs	r3, #17
 80007b4:	2b0f      	cmp	r3, #15
 80007b6:	d86c      	bhi.n	8000892 <W25qxx_Init+0x11a>
 80007b8:	a201      	add	r2, pc, #4	; (adr r2, 80007c0 <W25qxx_Init+0x48>)
 80007ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007be:	bf00      	nop
 80007c0:	08000885 	.word	0x08000885
 80007c4:	08000877 	.word	0x08000877
 80007c8:	08000869 	.word	0x08000869
 80007cc:	0800085b 	.word	0x0800085b
 80007d0:	0800084d 	.word	0x0800084d
 80007d4:	0800083f 	.word	0x0800083f
 80007d8:	08000831 	.word	0x08000831
 80007dc:	08000821 	.word	0x08000821
 80007e0:	08000811 	.word	0x08000811
 80007e4:	08000893 	.word	0x08000893
 80007e8:	08000893 	.word	0x08000893
 80007ec:	08000893 	.word	0x08000893
 80007f0:	08000893 	.word	0x08000893
 80007f4:	08000893 	.word	0x08000893
 80007f8:	08000893 	.word	0x08000893
 80007fc:	08000801 	.word	0x08000801
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8000800:	4b44      	ldr	r3, [pc, #272]	; (8000914 <W25qxx_Init+0x19c>)
 8000802:	220a      	movs	r2, #10
 8000804:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 8000806:	4b43      	ldr	r3, [pc, #268]	; (8000914 <W25qxx_Init+0x19c>)
 8000808:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800080c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 800080e:	e046      	b.n	800089e <W25qxx_Init+0x126>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8000810:	4b40      	ldr	r3, [pc, #256]	; (8000914 <W25qxx_Init+0x19c>)
 8000812:	2209      	movs	r2, #9
 8000814:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8000816:	4b3f      	ldr	r3, [pc, #252]	; (8000914 <W25qxx_Init+0x19c>)
 8000818:	f44f 7200 	mov.w	r2, #512	; 0x200
 800081c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 800081e:	e03e      	b.n	800089e <W25qxx_Init+0x126>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8000820:	4b3c      	ldr	r3, [pc, #240]	; (8000914 <W25qxx_Init+0x19c>)
 8000822:	2208      	movs	r2, #8
 8000824:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8000826:	4b3b      	ldr	r3, [pc, #236]	; (8000914 <W25qxx_Init+0x19c>)
 8000828:	f44f 7280 	mov.w	r2, #256	; 0x100
 800082c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 800082e:	e036      	b.n	800089e <W25qxx_Init+0x126>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8000830:	4b38      	ldr	r3, [pc, #224]	; (8000914 <W25qxx_Init+0x19c>)
 8000832:	2207      	movs	r2, #7
 8000834:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 8000836:	4b37      	ldr	r3, [pc, #220]	; (8000914 <W25qxx_Init+0x19c>)
 8000838:	2280      	movs	r2, #128	; 0x80
 800083a:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 800083c:	e02f      	b.n	800089e <W25qxx_Init+0x126>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 800083e:	4b35      	ldr	r3, [pc, #212]	; (8000914 <W25qxx_Init+0x19c>)
 8000840:	2206      	movs	r2, #6
 8000842:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8000844:	4b33      	ldr	r3, [pc, #204]	; (8000914 <W25qxx_Init+0x19c>)
 8000846:	2240      	movs	r2, #64	; 0x40
 8000848:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 800084a:	e028      	b.n	800089e <W25qxx_Init+0x126>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 800084c:	4b31      	ldr	r3, [pc, #196]	; (8000914 <W25qxx_Init+0x19c>)
 800084e:	2205      	movs	r2, #5
 8000850:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8000852:	4b30      	ldr	r3, [pc, #192]	; (8000914 <W25qxx_Init+0x19c>)
 8000854:	2220      	movs	r2, #32
 8000856:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 8000858:	e021      	b.n	800089e <W25qxx_Init+0x126>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 800085a:	4b2e      	ldr	r3, [pc, #184]	; (8000914 <W25qxx_Init+0x19c>)
 800085c:	2204      	movs	r2, #4
 800085e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8000860:	4b2c      	ldr	r3, [pc, #176]	; (8000914 <W25qxx_Init+0x19c>)
 8000862:	2210      	movs	r2, #16
 8000864:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 8000866:	e01a      	b.n	800089e <W25qxx_Init+0x126>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8000868:	4b2a      	ldr	r3, [pc, #168]	; (8000914 <W25qxx_Init+0x19c>)
 800086a:	2203      	movs	r2, #3
 800086c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 800086e:	4b29      	ldr	r3, [pc, #164]	; (8000914 <W25qxx_Init+0x19c>)
 8000870:	2208      	movs	r2, #8
 8000872:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 8000874:	e013      	b.n	800089e <W25qxx_Init+0x126>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8000876:	4b27      	ldr	r3, [pc, #156]	; (8000914 <W25qxx_Init+0x19c>)
 8000878:	2202      	movs	r2, #2
 800087a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 800087c:	4b25      	ldr	r3, [pc, #148]	; (8000914 <W25qxx_Init+0x19c>)
 800087e:	2204      	movs	r2, #4
 8000880:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 8000882:	e00c      	b.n	800089e <W25qxx_Init+0x126>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8000884:	4b23      	ldr	r3, [pc, #140]	; (8000914 <W25qxx_Init+0x19c>)
 8000886:	2201      	movs	r2, #1
 8000888:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 800088a:	4b22      	ldr	r3, [pc, #136]	; (8000914 <W25qxx_Init+0x19c>)
 800088c:	2202      	movs	r2, #2
 800088e:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 8000890:	e005      	b.n	800089e <W25qxx_Init+0x126>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 8000892:	4b20      	ldr	r3, [pc, #128]	; (8000914 <W25qxx_Init+0x19c>)
 8000894:	2200      	movs	r2, #0
 8000896:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 800089a:	2300      	movs	r3, #0
 800089c:	e036      	b.n	800090c <W25qxx_Init+0x194>
	}
	w25qxx.PageSize = 256;
 800089e:	4b1d      	ldr	r3, [pc, #116]	; (8000914 <W25qxx_Init+0x19c>)
 80008a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008a4:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 80008a6:	4b1b      	ldr	r3, [pc, #108]	; (8000914 <W25qxx_Init+0x19c>)
 80008a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008ac:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 80008ae:	4b19      	ldr	r3, [pc, #100]	; (8000914 <W25qxx_Init+0x19c>)
 80008b0:	69db      	ldr	r3, [r3, #28]
 80008b2:	011b      	lsls	r3, r3, #4
 80008b4:	4a17      	ldr	r2, [pc, #92]	; (8000914 <W25qxx_Init+0x19c>)
 80008b6:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 80008b8:	4b16      	ldr	r3, [pc, #88]	; (8000914 <W25qxx_Init+0x19c>)
 80008ba:	695b      	ldr	r3, [r3, #20]
 80008bc:	4a15      	ldr	r2, [pc, #84]	; (8000914 <W25qxx_Init+0x19c>)
 80008be:	6912      	ldr	r2, [r2, #16]
 80008c0:	fb02 f303 	mul.w	r3, r2, r3
 80008c4:	4a13      	ldr	r2, [pc, #76]	; (8000914 <W25qxx_Init+0x19c>)
 80008c6:	8952      	ldrh	r2, [r2, #10]
 80008c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80008cc:	4a11      	ldr	r2, [pc, #68]	; (8000914 <W25qxx_Init+0x19c>)
 80008ce:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 80008d0:	4b10      	ldr	r3, [pc, #64]	; (8000914 <W25qxx_Init+0x19c>)
 80008d2:	691b      	ldr	r3, [r3, #16]
 80008d4:	011b      	lsls	r3, r3, #4
 80008d6:	4a0f      	ldr	r2, [pc, #60]	; (8000914 <W25qxx_Init+0x19c>)
 80008d8:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 80008da:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <W25qxx_Init+0x19c>)
 80008dc:	695b      	ldr	r3, [r3, #20]
 80008de:	4a0d      	ldr	r2, [pc, #52]	; (8000914 <W25qxx_Init+0x19c>)
 80008e0:	6912      	ldr	r2, [r2, #16]
 80008e2:	fb02 f303 	mul.w	r3, r2, r3
 80008e6:	0a9b      	lsrs	r3, r3, #10
 80008e8:	4a0a      	ldr	r2, [pc, #40]	; (8000914 <W25qxx_Init+0x19c>)
 80008ea:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 80008ec:	f7ff fec8 	bl	8000680 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 80008f0:	2001      	movs	r0, #1
 80008f2:	f7ff fefb 	bl	80006ec <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 80008f6:	2002      	movs	r0, #2
 80008f8:	f7ff fef8 	bl	80006ec <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 80008fc:	2003      	movs	r0, #3
 80008fe:	f7ff fef5 	bl	80006ec <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 8000902:	4b04      	ldr	r3, [pc, #16]	; (8000914 <W25qxx_Init+0x19c>)
 8000904:	2200      	movs	r2, #0
 8000906:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 800090a:	2301      	movs	r3, #1
}
 800090c:	4618      	mov	r0, r3
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	200000cc 	.word	0x200000cc
 8000918:	40010800 	.word	0x40010800

0800091c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800091c:	f7ff fe5d 	bl	80005da <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000920:	480b      	ldr	r0, [pc, #44]	; (8000950 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000922:	490c      	ldr	r1, [pc, #48]	; (8000954 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000924:	4a0c      	ldr	r2, [pc, #48]	; (8000958 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000928:	e002      	b.n	8000930 <LoopCopyDataInit>

0800092a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800092a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800092c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800092e:	3304      	adds	r3, #4

08000930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000934:	d3f9      	bcc.n	800092a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000936:	4a09      	ldr	r2, [pc, #36]	; (800095c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000938:	4c09      	ldr	r4, [pc, #36]	; (8000960 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800093a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800093c:	e001      	b.n	8000942 <LoopFillZerobss>

0800093e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800093e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000940:	3204      	adds	r2, #4

08000942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000944:	d3fb      	bcc.n	800093e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000946:	f001 fadd 	bl	8001f04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800094a:	f7ff fbff 	bl	800014c <main>
  bx lr
 800094e:	4770      	bx	lr
  ldr r0, =_sdata
 8000950:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000954:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000958:	08001fa8 	.word	0x08001fa8
  ldr r2, =_sbss
 800095c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000960:	200000f8 	.word	0x200000f8

08000964 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000964:	e7fe      	b.n	8000964 <ADC1_2_IRQHandler>
	...

08000968 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800096c:	4b08      	ldr	r3, [pc, #32]	; (8000990 <HAL_Init+0x28>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a07      	ldr	r2, [pc, #28]	; (8000990 <HAL_Init+0x28>)
 8000972:	f043 0310 	orr.w	r3, r3, #16
 8000976:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000978:	2003      	movs	r0, #3
 800097a:	f000 f92b 	bl	8000bd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800097e:	200f      	movs	r0, #15
 8000980:	f000 f808 	bl	8000994 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000984:	f7ff fd3a 	bl	80003fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000988:	2300      	movs	r3, #0
}
 800098a:	4618      	mov	r0, r3
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40022000 	.word	0x40022000

08000994 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800099c:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <HAL_InitTick+0x54>)
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	4b12      	ldr	r3, [pc, #72]	; (80009ec <HAL_InitTick+0x58>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	4619      	mov	r1, r3
 80009a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80009b2:	4618      	mov	r0, r3
 80009b4:	f000 f935 	bl	8000c22 <HAL_SYSTICK_Config>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009be:	2301      	movs	r3, #1
 80009c0:	e00e      	b.n	80009e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2b0f      	cmp	r3, #15
 80009c6:	d80a      	bhi.n	80009de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009c8:	2200      	movs	r2, #0
 80009ca:	6879      	ldr	r1, [r7, #4]
 80009cc:	f04f 30ff 	mov.w	r0, #4294967295
 80009d0:	f000 f90b 	bl	8000bea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009d4:	4a06      	ldr	r2, [pc, #24]	; (80009f0 <HAL_InitTick+0x5c>)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009da:	2300      	movs	r3, #0
 80009dc:	e000      	b.n	80009e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009de:	2301      	movs	r3, #1
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20000000 	.word	0x20000000
 80009ec:	20000008 	.word	0x20000008
 80009f0:	20000004 	.word	0x20000004

080009f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009f8:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <HAL_IncTick+0x1c>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	461a      	mov	r2, r3
 80009fe:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <HAL_IncTick+0x20>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4413      	add	r3, r2
 8000a04:	4a03      	ldr	r2, [pc, #12]	; (8000a14 <HAL_IncTick+0x20>)
 8000a06:	6013      	str	r3, [r2, #0]
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bc80      	pop	{r7}
 8000a0e:	4770      	bx	lr
 8000a10:	20000008 	.word	0x20000008
 8000a14:	200000f4 	.word	0x200000f4

08000a18 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a1c:	4b02      	ldr	r3, [pc, #8]	; (8000a28 <HAL_GetTick+0x10>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc80      	pop	{r7}
 8000a26:	4770      	bx	lr
 8000a28:	200000f4 	.word	0x200000f4

08000a2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a34:	f7ff fff0 	bl	8000a18 <HAL_GetTick>
 8000a38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a44:	d005      	beq.n	8000a52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a46:	4b0a      	ldr	r3, [pc, #40]	; (8000a70 <HAL_Delay+0x44>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	4413      	add	r3, r2
 8000a50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a52:	bf00      	nop
 8000a54:	f7ff ffe0 	bl	8000a18 <HAL_GetTick>
 8000a58:	4602      	mov	r2, r0
 8000a5a:	68bb      	ldr	r3, [r7, #8]
 8000a5c:	1ad3      	subs	r3, r2, r3
 8000a5e:	68fa      	ldr	r2, [r7, #12]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d8f7      	bhi.n	8000a54 <HAL_Delay+0x28>
  {
  }
}
 8000a64:	bf00      	nop
 8000a66:	bf00      	nop
 8000a68:	3710      	adds	r7, #16
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20000008 	.word	0x20000008

08000a74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	f003 0307 	and.w	r3, r3, #7
 8000a82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a8a:	68ba      	ldr	r2, [r7, #8]
 8000a8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a90:	4013      	ands	r3, r2
 8000a92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aa6:	4a04      	ldr	r2, [pc, #16]	; (8000ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	60d3      	str	r3, [r2, #12]
}
 8000aac:	bf00      	nop
 8000aae:	3714      	adds	r7, #20
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bc80      	pop	{r7}
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ac0:	4b04      	ldr	r3, [pc, #16]	; (8000ad4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	0a1b      	lsrs	r3, r3, #8
 8000ac6:	f003 0307 	and.w	r3, r3, #7
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bc80      	pop	{r7}
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	6039      	str	r1, [r7, #0]
 8000ae2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	db0a      	blt.n	8000b02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	490c      	ldr	r1, [pc, #48]	; (8000b24 <__NVIC_SetPriority+0x4c>)
 8000af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af6:	0112      	lsls	r2, r2, #4
 8000af8:	b2d2      	uxtb	r2, r2
 8000afa:	440b      	add	r3, r1
 8000afc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b00:	e00a      	b.n	8000b18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	b2da      	uxtb	r2, r3
 8000b06:	4908      	ldr	r1, [pc, #32]	; (8000b28 <__NVIC_SetPriority+0x50>)
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	f003 030f 	and.w	r3, r3, #15
 8000b0e:	3b04      	subs	r3, #4
 8000b10:	0112      	lsls	r2, r2, #4
 8000b12:	b2d2      	uxtb	r2, r2
 8000b14:	440b      	add	r3, r1
 8000b16:	761a      	strb	r2, [r3, #24]
}
 8000b18:	bf00      	nop
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bc80      	pop	{r7}
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	e000e100 	.word	0xe000e100
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b089      	sub	sp, #36	; 0x24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	f003 0307 	and.w	r3, r3, #7
 8000b3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b40:	69fb      	ldr	r3, [r7, #28]
 8000b42:	f1c3 0307 	rsb	r3, r3, #7
 8000b46:	2b04      	cmp	r3, #4
 8000b48:	bf28      	it	cs
 8000b4a:	2304      	movcs	r3, #4
 8000b4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	3304      	adds	r3, #4
 8000b52:	2b06      	cmp	r3, #6
 8000b54:	d902      	bls.n	8000b5c <NVIC_EncodePriority+0x30>
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	3b03      	subs	r3, #3
 8000b5a:	e000      	b.n	8000b5e <NVIC_EncodePriority+0x32>
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b60:	f04f 32ff 	mov.w	r2, #4294967295
 8000b64:	69bb      	ldr	r3, [r7, #24]
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	43da      	mvns	r2, r3
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	401a      	ands	r2, r3
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b74:	f04f 31ff 	mov.w	r1, #4294967295
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b7e:	43d9      	mvns	r1, r3
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b84:	4313      	orrs	r3, r2
         );
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3724      	adds	r7, #36	; 0x24
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc80      	pop	{r7}
 8000b8e:	4770      	bx	lr

08000b90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ba0:	d301      	bcc.n	8000ba6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	e00f      	b.n	8000bc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ba6:	4a0a      	ldr	r2, [pc, #40]	; (8000bd0 <SysTick_Config+0x40>)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	3b01      	subs	r3, #1
 8000bac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bae:	210f      	movs	r1, #15
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	f7ff ff90 	bl	8000ad8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bb8:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <SysTick_Config+0x40>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bbe:	4b04      	ldr	r3, [pc, #16]	; (8000bd0 <SysTick_Config+0x40>)
 8000bc0:	2207      	movs	r2, #7
 8000bc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bc4:	2300      	movs	r3, #0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	e000e010 	.word	0xe000e010

08000bd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f7ff ff49 	bl	8000a74 <__NVIC_SetPriorityGrouping>
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b086      	sub	sp, #24
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	60b9      	str	r1, [r7, #8]
 8000bf4:	607a      	str	r2, [r7, #4]
 8000bf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bfc:	f7ff ff5e 	bl	8000abc <__NVIC_GetPriorityGrouping>
 8000c00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c02:	687a      	ldr	r2, [r7, #4]
 8000c04:	68b9      	ldr	r1, [r7, #8]
 8000c06:	6978      	ldr	r0, [r7, #20]
 8000c08:	f7ff ff90 	bl	8000b2c <NVIC_EncodePriority>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c12:	4611      	mov	r1, r2
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff ff5f 	bl	8000ad8 <__NVIC_SetPriority>
}
 8000c1a:	bf00      	nop
 8000c1c:	3718      	adds	r7, #24
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b082      	sub	sp, #8
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	f7ff ffb0 	bl	8000b90 <SysTick_Config>
 8000c30:	4603      	mov	r3, r0
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
	...

08000c3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b08b      	sub	sp, #44	; 0x2c
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c46:	2300      	movs	r3, #0
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c4e:	e169      	b.n	8000f24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c50:	2201      	movs	r2, #1
 8000c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	69fa      	ldr	r2, [r7, #28]
 8000c60:	4013      	ands	r3, r2
 8000c62:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c64:	69ba      	ldr	r2, [r7, #24]
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	f040 8158 	bne.w	8000f1e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	4a9a      	ldr	r2, [pc, #616]	; (8000edc <HAL_GPIO_Init+0x2a0>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d05e      	beq.n	8000d36 <HAL_GPIO_Init+0xfa>
 8000c78:	4a98      	ldr	r2, [pc, #608]	; (8000edc <HAL_GPIO_Init+0x2a0>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d875      	bhi.n	8000d6a <HAL_GPIO_Init+0x12e>
 8000c7e:	4a98      	ldr	r2, [pc, #608]	; (8000ee0 <HAL_GPIO_Init+0x2a4>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d058      	beq.n	8000d36 <HAL_GPIO_Init+0xfa>
 8000c84:	4a96      	ldr	r2, [pc, #600]	; (8000ee0 <HAL_GPIO_Init+0x2a4>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d86f      	bhi.n	8000d6a <HAL_GPIO_Init+0x12e>
 8000c8a:	4a96      	ldr	r2, [pc, #600]	; (8000ee4 <HAL_GPIO_Init+0x2a8>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d052      	beq.n	8000d36 <HAL_GPIO_Init+0xfa>
 8000c90:	4a94      	ldr	r2, [pc, #592]	; (8000ee4 <HAL_GPIO_Init+0x2a8>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d869      	bhi.n	8000d6a <HAL_GPIO_Init+0x12e>
 8000c96:	4a94      	ldr	r2, [pc, #592]	; (8000ee8 <HAL_GPIO_Init+0x2ac>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d04c      	beq.n	8000d36 <HAL_GPIO_Init+0xfa>
 8000c9c:	4a92      	ldr	r2, [pc, #584]	; (8000ee8 <HAL_GPIO_Init+0x2ac>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d863      	bhi.n	8000d6a <HAL_GPIO_Init+0x12e>
 8000ca2:	4a92      	ldr	r2, [pc, #584]	; (8000eec <HAL_GPIO_Init+0x2b0>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d046      	beq.n	8000d36 <HAL_GPIO_Init+0xfa>
 8000ca8:	4a90      	ldr	r2, [pc, #576]	; (8000eec <HAL_GPIO_Init+0x2b0>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d85d      	bhi.n	8000d6a <HAL_GPIO_Init+0x12e>
 8000cae:	2b12      	cmp	r3, #18
 8000cb0:	d82a      	bhi.n	8000d08 <HAL_GPIO_Init+0xcc>
 8000cb2:	2b12      	cmp	r3, #18
 8000cb4:	d859      	bhi.n	8000d6a <HAL_GPIO_Init+0x12e>
 8000cb6:	a201      	add	r2, pc, #4	; (adr r2, 8000cbc <HAL_GPIO_Init+0x80>)
 8000cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cbc:	08000d37 	.word	0x08000d37
 8000cc0:	08000d11 	.word	0x08000d11
 8000cc4:	08000d23 	.word	0x08000d23
 8000cc8:	08000d65 	.word	0x08000d65
 8000ccc:	08000d6b 	.word	0x08000d6b
 8000cd0:	08000d6b 	.word	0x08000d6b
 8000cd4:	08000d6b 	.word	0x08000d6b
 8000cd8:	08000d6b 	.word	0x08000d6b
 8000cdc:	08000d6b 	.word	0x08000d6b
 8000ce0:	08000d6b 	.word	0x08000d6b
 8000ce4:	08000d6b 	.word	0x08000d6b
 8000ce8:	08000d6b 	.word	0x08000d6b
 8000cec:	08000d6b 	.word	0x08000d6b
 8000cf0:	08000d6b 	.word	0x08000d6b
 8000cf4:	08000d6b 	.word	0x08000d6b
 8000cf8:	08000d6b 	.word	0x08000d6b
 8000cfc:	08000d6b 	.word	0x08000d6b
 8000d00:	08000d19 	.word	0x08000d19
 8000d04:	08000d2d 	.word	0x08000d2d
 8000d08:	4a79      	ldr	r2, [pc, #484]	; (8000ef0 <HAL_GPIO_Init+0x2b4>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d013      	beq.n	8000d36 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d0e:	e02c      	b.n	8000d6a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	623b      	str	r3, [r7, #32]
          break;
 8000d16:	e029      	b.n	8000d6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	3304      	adds	r3, #4
 8000d1e:	623b      	str	r3, [r7, #32]
          break;
 8000d20:	e024      	b.n	8000d6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	68db      	ldr	r3, [r3, #12]
 8000d26:	3308      	adds	r3, #8
 8000d28:	623b      	str	r3, [r7, #32]
          break;
 8000d2a:	e01f      	b.n	8000d6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	330c      	adds	r3, #12
 8000d32:	623b      	str	r3, [r7, #32]
          break;
 8000d34:	e01a      	b.n	8000d6c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d102      	bne.n	8000d44 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d3e:	2304      	movs	r3, #4
 8000d40:	623b      	str	r3, [r7, #32]
          break;
 8000d42:	e013      	b.n	8000d6c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	689b      	ldr	r3, [r3, #8]
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d105      	bne.n	8000d58 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d4c:	2308      	movs	r3, #8
 8000d4e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	69fa      	ldr	r2, [r7, #28]
 8000d54:	611a      	str	r2, [r3, #16]
          break;
 8000d56:	e009      	b.n	8000d6c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d58:	2308      	movs	r3, #8
 8000d5a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	69fa      	ldr	r2, [r7, #28]
 8000d60:	615a      	str	r2, [r3, #20]
          break;
 8000d62:	e003      	b.n	8000d6c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d64:	2300      	movs	r3, #0
 8000d66:	623b      	str	r3, [r7, #32]
          break;
 8000d68:	e000      	b.n	8000d6c <HAL_GPIO_Init+0x130>
          break;
 8000d6a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	2bff      	cmp	r3, #255	; 0xff
 8000d70:	d801      	bhi.n	8000d76 <HAL_GPIO_Init+0x13a>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	e001      	b.n	8000d7a <HAL_GPIO_Init+0x13e>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	3304      	adds	r3, #4
 8000d7a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d7c:	69bb      	ldr	r3, [r7, #24]
 8000d7e:	2bff      	cmp	r3, #255	; 0xff
 8000d80:	d802      	bhi.n	8000d88 <HAL_GPIO_Init+0x14c>
 8000d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	e002      	b.n	8000d8e <HAL_GPIO_Init+0x152>
 8000d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8a:	3b08      	subs	r3, #8
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	210f      	movs	r1, #15
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	401a      	ands	r2, r3
 8000da0:	6a39      	ldr	r1, [r7, #32]
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	fa01 f303 	lsl.w	r3, r1, r3
 8000da8:	431a      	orrs	r2, r3
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	f000 80b1 	beq.w	8000f1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000dbc:	4b4d      	ldr	r3, [pc, #308]	; (8000ef4 <HAL_GPIO_Init+0x2b8>)
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	4a4c      	ldr	r2, [pc, #304]	; (8000ef4 <HAL_GPIO_Init+0x2b8>)
 8000dc2:	f043 0301 	orr.w	r3, r3, #1
 8000dc6:	6193      	str	r3, [r2, #24]
 8000dc8:	4b4a      	ldr	r3, [pc, #296]	; (8000ef4 <HAL_GPIO_Init+0x2b8>)
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	f003 0301 	and.w	r3, r3, #1
 8000dd0:	60bb      	str	r3, [r7, #8]
 8000dd2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000dd4:	4a48      	ldr	r2, [pc, #288]	; (8000ef8 <HAL_GPIO_Init+0x2bc>)
 8000dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd8:	089b      	lsrs	r3, r3, #2
 8000dda:	3302      	adds	r3, #2
 8000ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de4:	f003 0303 	and.w	r3, r3, #3
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	220f      	movs	r2, #15
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	43db      	mvns	r3, r3
 8000df2:	68fa      	ldr	r2, [r7, #12]
 8000df4:	4013      	ands	r3, r2
 8000df6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4a40      	ldr	r2, [pc, #256]	; (8000efc <HAL_GPIO_Init+0x2c0>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d013      	beq.n	8000e28 <HAL_GPIO_Init+0x1ec>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4a3f      	ldr	r2, [pc, #252]	; (8000f00 <HAL_GPIO_Init+0x2c4>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d00d      	beq.n	8000e24 <HAL_GPIO_Init+0x1e8>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	4a3e      	ldr	r2, [pc, #248]	; (8000f04 <HAL_GPIO_Init+0x2c8>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d007      	beq.n	8000e20 <HAL_GPIO_Init+0x1e4>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	4a3d      	ldr	r2, [pc, #244]	; (8000f08 <HAL_GPIO_Init+0x2cc>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d101      	bne.n	8000e1c <HAL_GPIO_Init+0x1e0>
 8000e18:	2303      	movs	r3, #3
 8000e1a:	e006      	b.n	8000e2a <HAL_GPIO_Init+0x1ee>
 8000e1c:	2304      	movs	r3, #4
 8000e1e:	e004      	b.n	8000e2a <HAL_GPIO_Init+0x1ee>
 8000e20:	2302      	movs	r3, #2
 8000e22:	e002      	b.n	8000e2a <HAL_GPIO_Init+0x1ee>
 8000e24:	2301      	movs	r3, #1
 8000e26:	e000      	b.n	8000e2a <HAL_GPIO_Init+0x1ee>
 8000e28:	2300      	movs	r3, #0
 8000e2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e2c:	f002 0203 	and.w	r2, r2, #3
 8000e30:	0092      	lsls	r2, r2, #2
 8000e32:	4093      	lsls	r3, r2
 8000e34:	68fa      	ldr	r2, [r7, #12]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e3a:	492f      	ldr	r1, [pc, #188]	; (8000ef8 <HAL_GPIO_Init+0x2bc>)
 8000e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3e:	089b      	lsrs	r3, r3, #2
 8000e40:	3302      	adds	r3, #2
 8000e42:	68fa      	ldr	r2, [r7, #12]
 8000e44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d006      	beq.n	8000e62 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e54:	4b2d      	ldr	r3, [pc, #180]	; (8000f0c <HAL_GPIO_Init+0x2d0>)
 8000e56:	689a      	ldr	r2, [r3, #8]
 8000e58:	492c      	ldr	r1, [pc, #176]	; (8000f0c <HAL_GPIO_Init+0x2d0>)
 8000e5a:	69bb      	ldr	r3, [r7, #24]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	608b      	str	r3, [r1, #8]
 8000e60:	e006      	b.n	8000e70 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e62:	4b2a      	ldr	r3, [pc, #168]	; (8000f0c <HAL_GPIO_Init+0x2d0>)
 8000e64:	689a      	ldr	r2, [r3, #8]
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	4928      	ldr	r1, [pc, #160]	; (8000f0c <HAL_GPIO_Init+0x2d0>)
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d006      	beq.n	8000e8a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e7c:	4b23      	ldr	r3, [pc, #140]	; (8000f0c <HAL_GPIO_Init+0x2d0>)
 8000e7e:	68da      	ldr	r2, [r3, #12]
 8000e80:	4922      	ldr	r1, [pc, #136]	; (8000f0c <HAL_GPIO_Init+0x2d0>)
 8000e82:	69bb      	ldr	r3, [r7, #24]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	60cb      	str	r3, [r1, #12]
 8000e88:	e006      	b.n	8000e98 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e8a:	4b20      	ldr	r3, [pc, #128]	; (8000f0c <HAL_GPIO_Init+0x2d0>)
 8000e8c:	68da      	ldr	r2, [r3, #12]
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	43db      	mvns	r3, r3
 8000e92:	491e      	ldr	r1, [pc, #120]	; (8000f0c <HAL_GPIO_Init+0x2d0>)
 8000e94:	4013      	ands	r3, r2
 8000e96:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d006      	beq.n	8000eb2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ea4:	4b19      	ldr	r3, [pc, #100]	; (8000f0c <HAL_GPIO_Init+0x2d0>)
 8000ea6:	685a      	ldr	r2, [r3, #4]
 8000ea8:	4918      	ldr	r1, [pc, #96]	; (8000f0c <HAL_GPIO_Init+0x2d0>)
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	604b      	str	r3, [r1, #4]
 8000eb0:	e006      	b.n	8000ec0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000eb2:	4b16      	ldr	r3, [pc, #88]	; (8000f0c <HAL_GPIO_Init+0x2d0>)
 8000eb4:	685a      	ldr	r2, [r3, #4]
 8000eb6:	69bb      	ldr	r3, [r7, #24]
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	4914      	ldr	r1, [pc, #80]	; (8000f0c <HAL_GPIO_Init+0x2d0>)
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d021      	beq.n	8000f10 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ecc:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <HAL_GPIO_Init+0x2d0>)
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	490e      	ldr	r1, [pc, #56]	; (8000f0c <HAL_GPIO_Init+0x2d0>)
 8000ed2:	69bb      	ldr	r3, [r7, #24]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	600b      	str	r3, [r1, #0]
 8000ed8:	e021      	b.n	8000f1e <HAL_GPIO_Init+0x2e2>
 8000eda:	bf00      	nop
 8000edc:	10320000 	.word	0x10320000
 8000ee0:	10310000 	.word	0x10310000
 8000ee4:	10220000 	.word	0x10220000
 8000ee8:	10210000 	.word	0x10210000
 8000eec:	10120000 	.word	0x10120000
 8000ef0:	10110000 	.word	0x10110000
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	40010000 	.word	0x40010000
 8000efc:	40010800 	.word	0x40010800
 8000f00:	40010c00 	.word	0x40010c00
 8000f04:	40011000 	.word	0x40011000
 8000f08:	40011400 	.word	0x40011400
 8000f0c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f10:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <HAL_GPIO_Init+0x304>)
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	43db      	mvns	r3, r3
 8000f18:	4909      	ldr	r1, [pc, #36]	; (8000f40 <HAL_GPIO_Init+0x304>)
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f20:	3301      	adds	r3, #1
 8000f22:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2a:	fa22 f303 	lsr.w	r3, r2, r3
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	f47f ae8e 	bne.w	8000c50 <HAL_GPIO_Init+0x14>
  }
}
 8000f34:	bf00      	nop
 8000f36:	bf00      	nop
 8000f38:	372c      	adds	r7, #44	; 0x2c
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr
 8000f40:	40010400 	.word	0x40010400

08000f44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	807b      	strh	r3, [r7, #2]
 8000f50:	4613      	mov	r3, r2
 8000f52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f54:	787b      	ldrb	r3, [r7, #1]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d003      	beq.n	8000f62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f5a:	887a      	ldrh	r2, [r7, #2]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f60:	e003      	b.n	8000f6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f62:	887b      	ldrh	r3, [r7, #2]
 8000f64:	041a      	lsls	r2, r3, #16
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	611a      	str	r2, [r3, #16]
}
 8000f6a:	bf00      	nop
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr

08000f74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d101      	bne.n	8000f86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e272      	b.n	800146c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	f000 8087 	beq.w	80010a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f94:	4b92      	ldr	r3, [pc, #584]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f003 030c 	and.w	r3, r3, #12
 8000f9c:	2b04      	cmp	r3, #4
 8000f9e:	d00c      	beq.n	8000fba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fa0:	4b8f      	ldr	r3, [pc, #572]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f003 030c 	and.w	r3, r3, #12
 8000fa8:	2b08      	cmp	r3, #8
 8000faa:	d112      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x5e>
 8000fac:	4b8c      	ldr	r3, [pc, #560]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fb8:	d10b      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fba:	4b89      	ldr	r3, [pc, #548]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d06c      	beq.n	80010a0 <HAL_RCC_OscConfig+0x12c>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d168      	bne.n	80010a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e24c      	b.n	800146c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fda:	d106      	bne.n	8000fea <HAL_RCC_OscConfig+0x76>
 8000fdc:	4b80      	ldr	r3, [pc, #512]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a7f      	ldr	r2, [pc, #508]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 8000fe2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fe6:	6013      	str	r3, [r2, #0]
 8000fe8:	e02e      	b.n	8001048 <HAL_RCC_OscConfig+0xd4>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d10c      	bne.n	800100c <HAL_RCC_OscConfig+0x98>
 8000ff2:	4b7b      	ldr	r3, [pc, #492]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a7a      	ldr	r2, [pc, #488]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 8000ff8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ffc:	6013      	str	r3, [r2, #0]
 8000ffe:	4b78      	ldr	r3, [pc, #480]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a77      	ldr	r2, [pc, #476]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 8001004:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001008:	6013      	str	r3, [r2, #0]
 800100a:	e01d      	b.n	8001048 <HAL_RCC_OscConfig+0xd4>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001014:	d10c      	bne.n	8001030 <HAL_RCC_OscConfig+0xbc>
 8001016:	4b72      	ldr	r3, [pc, #456]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a71      	ldr	r2, [pc, #452]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 800101c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001020:	6013      	str	r3, [r2, #0]
 8001022:	4b6f      	ldr	r3, [pc, #444]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a6e      	ldr	r2, [pc, #440]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 8001028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800102c:	6013      	str	r3, [r2, #0]
 800102e:	e00b      	b.n	8001048 <HAL_RCC_OscConfig+0xd4>
 8001030:	4b6b      	ldr	r3, [pc, #428]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a6a      	ldr	r2, [pc, #424]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 8001036:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800103a:	6013      	str	r3, [r2, #0]
 800103c:	4b68      	ldr	r3, [pc, #416]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a67      	ldr	r2, [pc, #412]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 8001042:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001046:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d013      	beq.n	8001078 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001050:	f7ff fce2 	bl	8000a18 <HAL_GetTick>
 8001054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001056:	e008      	b.n	800106a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001058:	f7ff fcde 	bl	8000a18 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b64      	cmp	r3, #100	; 0x64
 8001064:	d901      	bls.n	800106a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e200      	b.n	800146c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800106a:	4b5d      	ldr	r3, [pc, #372]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d0f0      	beq.n	8001058 <HAL_RCC_OscConfig+0xe4>
 8001076:	e014      	b.n	80010a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001078:	f7ff fcce 	bl	8000a18 <HAL_GetTick>
 800107c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800107e:	e008      	b.n	8001092 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001080:	f7ff fcca 	bl	8000a18 <HAL_GetTick>
 8001084:	4602      	mov	r2, r0
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	2b64      	cmp	r3, #100	; 0x64
 800108c:	d901      	bls.n	8001092 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800108e:	2303      	movs	r3, #3
 8001090:	e1ec      	b.n	800146c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001092:	4b53      	ldr	r3, [pc, #332]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d1f0      	bne.n	8001080 <HAL_RCC_OscConfig+0x10c>
 800109e:	e000      	b.n	80010a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d063      	beq.n	8001176 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010ae:	4b4c      	ldr	r3, [pc, #304]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f003 030c 	and.w	r3, r3, #12
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d00b      	beq.n	80010d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80010ba:	4b49      	ldr	r3, [pc, #292]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f003 030c 	and.w	r3, r3, #12
 80010c2:	2b08      	cmp	r3, #8
 80010c4:	d11c      	bne.n	8001100 <HAL_RCC_OscConfig+0x18c>
 80010c6:	4b46      	ldr	r3, [pc, #280]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d116      	bne.n	8001100 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010d2:	4b43      	ldr	r3, [pc, #268]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 0302 	and.w	r3, r3, #2
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d005      	beq.n	80010ea <HAL_RCC_OscConfig+0x176>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	691b      	ldr	r3, [r3, #16]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d001      	beq.n	80010ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e1c0      	b.n	800146c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ea:	4b3d      	ldr	r3, [pc, #244]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	695b      	ldr	r3, [r3, #20]
 80010f6:	00db      	lsls	r3, r3, #3
 80010f8:	4939      	ldr	r1, [pc, #228]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 80010fa:	4313      	orrs	r3, r2
 80010fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010fe:	e03a      	b.n	8001176 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	691b      	ldr	r3, [r3, #16]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d020      	beq.n	800114a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001108:	4b36      	ldr	r3, [pc, #216]	; (80011e4 <HAL_RCC_OscConfig+0x270>)
 800110a:	2201      	movs	r2, #1
 800110c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800110e:	f7ff fc83 	bl	8000a18 <HAL_GetTick>
 8001112:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001114:	e008      	b.n	8001128 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001116:	f7ff fc7f 	bl	8000a18 <HAL_GetTick>
 800111a:	4602      	mov	r2, r0
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	2b02      	cmp	r3, #2
 8001122:	d901      	bls.n	8001128 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001124:	2303      	movs	r3, #3
 8001126:	e1a1      	b.n	800146c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001128:	4b2d      	ldr	r3, [pc, #180]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 0302 	and.w	r3, r3, #2
 8001130:	2b00      	cmp	r3, #0
 8001132:	d0f0      	beq.n	8001116 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001134:	4b2a      	ldr	r3, [pc, #168]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	695b      	ldr	r3, [r3, #20]
 8001140:	00db      	lsls	r3, r3, #3
 8001142:	4927      	ldr	r1, [pc, #156]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 8001144:	4313      	orrs	r3, r2
 8001146:	600b      	str	r3, [r1, #0]
 8001148:	e015      	b.n	8001176 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800114a:	4b26      	ldr	r3, [pc, #152]	; (80011e4 <HAL_RCC_OscConfig+0x270>)
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001150:	f7ff fc62 	bl	8000a18 <HAL_GetTick>
 8001154:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001156:	e008      	b.n	800116a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001158:	f7ff fc5e 	bl	8000a18 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b02      	cmp	r3, #2
 8001164:	d901      	bls.n	800116a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e180      	b.n	800146c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800116a:	4b1d      	ldr	r3, [pc, #116]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1f0      	bne.n	8001158 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0308 	and.w	r3, r3, #8
 800117e:	2b00      	cmp	r3, #0
 8001180:	d03a      	beq.n	80011f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	699b      	ldr	r3, [r3, #24]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d019      	beq.n	80011be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800118a:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <HAL_RCC_OscConfig+0x274>)
 800118c:	2201      	movs	r2, #1
 800118e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001190:	f7ff fc42 	bl	8000a18 <HAL_GetTick>
 8001194:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001196:	e008      	b.n	80011aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001198:	f7ff fc3e 	bl	8000a18 <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d901      	bls.n	80011aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	e160      	b.n	800146c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011aa:	4b0d      	ldr	r3, [pc, #52]	; (80011e0 <HAL_RCC_OscConfig+0x26c>)
 80011ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d0f0      	beq.n	8001198 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80011b6:	2001      	movs	r0, #1
 80011b8:	f000 face 	bl	8001758 <RCC_Delay>
 80011bc:	e01c      	b.n	80011f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011be:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <HAL_RCC_OscConfig+0x274>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011c4:	f7ff fc28 	bl	8000a18 <HAL_GetTick>
 80011c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011ca:	e00f      	b.n	80011ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011cc:	f7ff fc24 	bl	8000a18 <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d908      	bls.n	80011ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80011da:	2303      	movs	r3, #3
 80011dc:	e146      	b.n	800146c <HAL_RCC_OscConfig+0x4f8>
 80011de:	bf00      	nop
 80011e0:	40021000 	.word	0x40021000
 80011e4:	42420000 	.word	0x42420000
 80011e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011ec:	4b92      	ldr	r3, [pc, #584]	; (8001438 <HAL_RCC_OscConfig+0x4c4>)
 80011ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f0:	f003 0302 	and.w	r3, r3, #2
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d1e9      	bne.n	80011cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0304 	and.w	r3, r3, #4
 8001200:	2b00      	cmp	r3, #0
 8001202:	f000 80a6 	beq.w	8001352 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001206:	2300      	movs	r3, #0
 8001208:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800120a:	4b8b      	ldr	r3, [pc, #556]	; (8001438 <HAL_RCC_OscConfig+0x4c4>)
 800120c:	69db      	ldr	r3, [r3, #28]
 800120e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d10d      	bne.n	8001232 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001216:	4b88      	ldr	r3, [pc, #544]	; (8001438 <HAL_RCC_OscConfig+0x4c4>)
 8001218:	69db      	ldr	r3, [r3, #28]
 800121a:	4a87      	ldr	r2, [pc, #540]	; (8001438 <HAL_RCC_OscConfig+0x4c4>)
 800121c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001220:	61d3      	str	r3, [r2, #28]
 8001222:	4b85      	ldr	r3, [pc, #532]	; (8001438 <HAL_RCC_OscConfig+0x4c4>)
 8001224:	69db      	ldr	r3, [r3, #28]
 8001226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800122e:	2301      	movs	r3, #1
 8001230:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001232:	4b82      	ldr	r3, [pc, #520]	; (800143c <HAL_RCC_OscConfig+0x4c8>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800123a:	2b00      	cmp	r3, #0
 800123c:	d118      	bne.n	8001270 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800123e:	4b7f      	ldr	r3, [pc, #508]	; (800143c <HAL_RCC_OscConfig+0x4c8>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a7e      	ldr	r2, [pc, #504]	; (800143c <HAL_RCC_OscConfig+0x4c8>)
 8001244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001248:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800124a:	f7ff fbe5 	bl	8000a18 <HAL_GetTick>
 800124e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001250:	e008      	b.n	8001264 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001252:	f7ff fbe1 	bl	8000a18 <HAL_GetTick>
 8001256:	4602      	mov	r2, r0
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	2b64      	cmp	r3, #100	; 0x64
 800125e:	d901      	bls.n	8001264 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001260:	2303      	movs	r3, #3
 8001262:	e103      	b.n	800146c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001264:	4b75      	ldr	r3, [pc, #468]	; (800143c <HAL_RCC_OscConfig+0x4c8>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800126c:	2b00      	cmp	r3, #0
 800126e:	d0f0      	beq.n	8001252 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d106      	bne.n	8001286 <HAL_RCC_OscConfig+0x312>
 8001278:	4b6f      	ldr	r3, [pc, #444]	; (8001438 <HAL_RCC_OscConfig+0x4c4>)
 800127a:	6a1b      	ldr	r3, [r3, #32]
 800127c:	4a6e      	ldr	r2, [pc, #440]	; (8001438 <HAL_RCC_OscConfig+0x4c4>)
 800127e:	f043 0301 	orr.w	r3, r3, #1
 8001282:	6213      	str	r3, [r2, #32]
 8001284:	e02d      	b.n	80012e2 <HAL_RCC_OscConfig+0x36e>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d10c      	bne.n	80012a8 <HAL_RCC_OscConfig+0x334>
 800128e:	4b6a      	ldr	r3, [pc, #424]	; (8001438 <HAL_RCC_OscConfig+0x4c4>)
 8001290:	6a1b      	ldr	r3, [r3, #32]
 8001292:	4a69      	ldr	r2, [pc, #420]	; (8001438 <HAL_RCC_OscConfig+0x4c4>)
 8001294:	f023 0301 	bic.w	r3, r3, #1
 8001298:	6213      	str	r3, [r2, #32]
 800129a:	4b67      	ldr	r3, [pc, #412]	; (8001438 <HAL_RCC_OscConfig+0x4c4>)
 800129c:	6a1b      	ldr	r3, [r3, #32]
 800129e:	4a66      	ldr	r2, [pc, #408]	; (8001438 <HAL_RCC_OscConfig+0x4c4>)
 80012a0:	f023 0304 	bic.w	r3, r3, #4
 80012a4:	6213      	str	r3, [r2, #32]
 80012a6:	e01c      	b.n	80012e2 <HAL_RCC_OscConfig+0x36e>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	2b05      	cmp	r3, #5
 80012ae:	d10c      	bne.n	80012ca <HAL_RCC_OscConfig+0x356>
 80012b0:	4b61      	ldr	r3, [pc, #388]	; (8001438 <HAL_RCC_OscConfig+0x4c4>)
 80012b2:	6a1b      	ldr	r3, [r3, #32]
 80012b4:	4a60      	ldr	r2, [pc, #384]	; (8001438 <HAL_RCC_OscConfig+0x4c4>)
 80012b6:	f043 0304 	orr.w	r3, r3, #4
 80012ba:	6213      	str	r3, [r2, #32]
 80012bc:	4b5e      	ldr	r3, [pc, #376]	; (8001438 <HAL_RCC_OscConfig+0x4c4>)
 80012be:	6a1b      	ldr	r3, [r3, #32]
 80012c0:	4a5d      	ldr	r2, [pc, #372]	; (8001438 <HAL_RCC_OscConfig+0x4c4>)
 80012c2:	f043 0301 	orr.w	r3, r3, #1
 80012c6:	6213      	str	r3, [r2, #32]
 80012c8:	e00b      	b.n	80012e2 <HAL_RCC_OscConfig+0x36e>
 80012ca:	4b5b      	ldr	r3, [pc, #364]	; (8001438 <HAL_RCC_OscConfig+0x4c4>)
 80012cc:	6a1b      	ldr	r3, [r3, #32]
 80012ce:	4a5a      	ldr	r2, [pc, #360]	; (8001438 <HAL_RCC_OscConfig+0x4c4>)
 80012d0:	f023 0301 	bic.w	r3, r3, #1
 80012d4:	6213      	str	r3, [r2, #32]
 80012d6:	4b58      	ldr	r3, [pc, #352]	; (8001438 <HAL_RCC_OscConfig+0x4c4>)
 80012d8:	6a1b      	ldr	r3, [r3, #32]
 80012da:	4a57      	ldr	r2, [pc, #348]	; (8001438 <HAL_RCC_OscConfig+0x4c4>)
 80012dc:	f023 0304 	bic.w	r3, r3, #4
 80012e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	68db      	ldr	r3, [r3, #12]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d015      	beq.n	8001316 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ea:	f7ff fb95 	bl	8000a18 <HAL_GetTick>
 80012ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012f0:	e00a      	b.n	8001308 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012f2:	f7ff fb91 	bl	8000a18 <HAL_GetTick>
 80012f6:	4602      	mov	r2, r0
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001300:	4293      	cmp	r3, r2
 8001302:	d901      	bls.n	8001308 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	e0b1      	b.n	800146c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001308:	4b4b      	ldr	r3, [pc, #300]	; (8001438 <HAL_RCC_OscConfig+0x4c4>)
 800130a:	6a1b      	ldr	r3, [r3, #32]
 800130c:	f003 0302 	and.w	r3, r3, #2
 8001310:	2b00      	cmp	r3, #0
 8001312:	d0ee      	beq.n	80012f2 <HAL_RCC_OscConfig+0x37e>
 8001314:	e014      	b.n	8001340 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001316:	f7ff fb7f 	bl	8000a18 <HAL_GetTick>
 800131a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800131c:	e00a      	b.n	8001334 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800131e:	f7ff fb7b 	bl	8000a18 <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	f241 3288 	movw	r2, #5000	; 0x1388
 800132c:	4293      	cmp	r3, r2
 800132e:	d901      	bls.n	8001334 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001330:	2303      	movs	r3, #3
 8001332:	e09b      	b.n	800146c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001334:	4b40      	ldr	r3, [pc, #256]	; (8001438 <HAL_RCC_OscConfig+0x4c4>)
 8001336:	6a1b      	ldr	r3, [r3, #32]
 8001338:	f003 0302 	and.w	r3, r3, #2
 800133c:	2b00      	cmp	r3, #0
 800133e:	d1ee      	bne.n	800131e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001340:	7dfb      	ldrb	r3, [r7, #23]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d105      	bne.n	8001352 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001346:	4b3c      	ldr	r3, [pc, #240]	; (8001438 <HAL_RCC_OscConfig+0x4c4>)
 8001348:	69db      	ldr	r3, [r3, #28]
 800134a:	4a3b      	ldr	r2, [pc, #236]	; (8001438 <HAL_RCC_OscConfig+0x4c4>)
 800134c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001350:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	2b00      	cmp	r3, #0
 8001358:	f000 8087 	beq.w	800146a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800135c:	4b36      	ldr	r3, [pc, #216]	; (8001438 <HAL_RCC_OscConfig+0x4c4>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f003 030c 	and.w	r3, r3, #12
 8001364:	2b08      	cmp	r3, #8
 8001366:	d061      	beq.n	800142c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	69db      	ldr	r3, [r3, #28]
 800136c:	2b02      	cmp	r3, #2
 800136e:	d146      	bne.n	80013fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001370:	4b33      	ldr	r3, [pc, #204]	; (8001440 <HAL_RCC_OscConfig+0x4cc>)
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001376:	f7ff fb4f 	bl	8000a18 <HAL_GetTick>
 800137a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800137c:	e008      	b.n	8001390 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800137e:	f7ff fb4b 	bl	8000a18 <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d901      	bls.n	8001390 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e06d      	b.n	800146c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001390:	4b29      	ldr	r3, [pc, #164]	; (8001438 <HAL_RCC_OscConfig+0x4c4>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d1f0      	bne.n	800137e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6a1b      	ldr	r3, [r3, #32]
 80013a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013a4:	d108      	bne.n	80013b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013a6:	4b24      	ldr	r3, [pc, #144]	; (8001438 <HAL_RCC_OscConfig+0x4c4>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	4921      	ldr	r1, [pc, #132]	; (8001438 <HAL_RCC_OscConfig+0x4c4>)
 80013b4:	4313      	orrs	r3, r2
 80013b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013b8:	4b1f      	ldr	r3, [pc, #124]	; (8001438 <HAL_RCC_OscConfig+0x4c4>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a19      	ldr	r1, [r3, #32]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c8:	430b      	orrs	r3, r1
 80013ca:	491b      	ldr	r1, [pc, #108]	; (8001438 <HAL_RCC_OscConfig+0x4c4>)
 80013cc:	4313      	orrs	r3, r2
 80013ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013d0:	4b1b      	ldr	r3, [pc, #108]	; (8001440 <HAL_RCC_OscConfig+0x4cc>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d6:	f7ff fb1f 	bl	8000a18 <HAL_GetTick>
 80013da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013dc:	e008      	b.n	80013f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013de:	f7ff fb1b 	bl	8000a18 <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d901      	bls.n	80013f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e03d      	b.n	800146c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013f0:	4b11      	ldr	r3, [pc, #68]	; (8001438 <HAL_RCC_OscConfig+0x4c4>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d0f0      	beq.n	80013de <HAL_RCC_OscConfig+0x46a>
 80013fc:	e035      	b.n	800146a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013fe:	4b10      	ldr	r3, [pc, #64]	; (8001440 <HAL_RCC_OscConfig+0x4cc>)
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001404:	f7ff fb08 	bl	8000a18 <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800140c:	f7ff fb04 	bl	8000a18 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e026      	b.n	800146c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800141e:	4b06      	ldr	r3, [pc, #24]	; (8001438 <HAL_RCC_OscConfig+0x4c4>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d1f0      	bne.n	800140c <HAL_RCC_OscConfig+0x498>
 800142a:	e01e      	b.n	800146a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	69db      	ldr	r3, [r3, #28]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d107      	bne.n	8001444 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e019      	b.n	800146c <HAL_RCC_OscConfig+0x4f8>
 8001438:	40021000 	.word	0x40021000
 800143c:	40007000 	.word	0x40007000
 8001440:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001444:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <HAL_RCC_OscConfig+0x500>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a1b      	ldr	r3, [r3, #32]
 8001454:	429a      	cmp	r2, r3
 8001456:	d106      	bne.n	8001466 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001462:	429a      	cmp	r2, r3
 8001464:	d001      	beq.n	800146a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e000      	b.n	800146c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800146a:	2300      	movs	r3, #0
}
 800146c:	4618      	mov	r0, r3
 800146e:	3718      	adds	r7, #24
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40021000 	.word	0x40021000

08001478 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d101      	bne.n	800148c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e0d0      	b.n	800162e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800148c:	4b6a      	ldr	r3, [pc, #424]	; (8001638 <HAL_RCC_ClockConfig+0x1c0>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0307 	and.w	r3, r3, #7
 8001494:	683a      	ldr	r2, [r7, #0]
 8001496:	429a      	cmp	r2, r3
 8001498:	d910      	bls.n	80014bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800149a:	4b67      	ldr	r3, [pc, #412]	; (8001638 <HAL_RCC_ClockConfig+0x1c0>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f023 0207 	bic.w	r2, r3, #7
 80014a2:	4965      	ldr	r1, [pc, #404]	; (8001638 <HAL_RCC_ClockConfig+0x1c0>)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014aa:	4b63      	ldr	r3, [pc, #396]	; (8001638 <HAL_RCC_ClockConfig+0x1c0>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	683a      	ldr	r2, [r7, #0]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d001      	beq.n	80014bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e0b8      	b.n	800162e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0302 	and.w	r3, r3, #2
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d020      	beq.n	800150a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0304 	and.w	r3, r3, #4
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d005      	beq.n	80014e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014d4:	4b59      	ldr	r3, [pc, #356]	; (800163c <HAL_RCC_ClockConfig+0x1c4>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	4a58      	ldr	r2, [pc, #352]	; (800163c <HAL_RCC_ClockConfig+0x1c4>)
 80014da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80014de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0308 	and.w	r3, r3, #8
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d005      	beq.n	80014f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014ec:	4b53      	ldr	r3, [pc, #332]	; (800163c <HAL_RCC_ClockConfig+0x1c4>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	4a52      	ldr	r2, [pc, #328]	; (800163c <HAL_RCC_ClockConfig+0x1c4>)
 80014f2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80014f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014f8:	4b50      	ldr	r3, [pc, #320]	; (800163c <HAL_RCC_ClockConfig+0x1c4>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	494d      	ldr	r1, [pc, #308]	; (800163c <HAL_RCC_ClockConfig+0x1c4>)
 8001506:	4313      	orrs	r3, r2
 8001508:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	2b00      	cmp	r3, #0
 8001514:	d040      	beq.n	8001598 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d107      	bne.n	800152e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800151e:	4b47      	ldr	r3, [pc, #284]	; (800163c <HAL_RCC_ClockConfig+0x1c4>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d115      	bne.n	8001556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e07f      	b.n	800162e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	2b02      	cmp	r3, #2
 8001534:	d107      	bne.n	8001546 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001536:	4b41      	ldr	r3, [pc, #260]	; (800163c <HAL_RCC_ClockConfig+0x1c4>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d109      	bne.n	8001556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e073      	b.n	800162e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001546:	4b3d      	ldr	r3, [pc, #244]	; (800163c <HAL_RCC_ClockConfig+0x1c4>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d101      	bne.n	8001556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e06b      	b.n	800162e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001556:	4b39      	ldr	r3, [pc, #228]	; (800163c <HAL_RCC_ClockConfig+0x1c4>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f023 0203 	bic.w	r2, r3, #3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	4936      	ldr	r1, [pc, #216]	; (800163c <HAL_RCC_ClockConfig+0x1c4>)
 8001564:	4313      	orrs	r3, r2
 8001566:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001568:	f7ff fa56 	bl	8000a18 <HAL_GetTick>
 800156c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800156e:	e00a      	b.n	8001586 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001570:	f7ff fa52 	bl	8000a18 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	f241 3288 	movw	r2, #5000	; 0x1388
 800157e:	4293      	cmp	r3, r2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e053      	b.n	800162e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001586:	4b2d      	ldr	r3, [pc, #180]	; (800163c <HAL_RCC_ClockConfig+0x1c4>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f003 020c 	and.w	r2, r3, #12
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	429a      	cmp	r2, r3
 8001596:	d1eb      	bne.n	8001570 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001598:	4b27      	ldr	r3, [pc, #156]	; (8001638 <HAL_RCC_ClockConfig+0x1c0>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0307 	and.w	r3, r3, #7
 80015a0:	683a      	ldr	r2, [r7, #0]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d210      	bcs.n	80015c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015a6:	4b24      	ldr	r3, [pc, #144]	; (8001638 <HAL_RCC_ClockConfig+0x1c0>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f023 0207 	bic.w	r2, r3, #7
 80015ae:	4922      	ldr	r1, [pc, #136]	; (8001638 <HAL_RCC_ClockConfig+0x1c0>)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015b6:	4b20      	ldr	r3, [pc, #128]	; (8001638 <HAL_RCC_ClockConfig+0x1c0>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	683a      	ldr	r2, [r7, #0]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d001      	beq.n	80015c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e032      	b.n	800162e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0304 	and.w	r3, r3, #4
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d008      	beq.n	80015e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015d4:	4b19      	ldr	r3, [pc, #100]	; (800163c <HAL_RCC_ClockConfig+0x1c4>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	4916      	ldr	r1, [pc, #88]	; (800163c <HAL_RCC_ClockConfig+0x1c4>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0308 	and.w	r3, r3, #8
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d009      	beq.n	8001606 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015f2:	4b12      	ldr	r3, [pc, #72]	; (800163c <HAL_RCC_ClockConfig+0x1c4>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	490e      	ldr	r1, [pc, #56]	; (800163c <HAL_RCC_ClockConfig+0x1c4>)
 8001602:	4313      	orrs	r3, r2
 8001604:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001606:	f000 f821 	bl	800164c <HAL_RCC_GetSysClockFreq>
 800160a:	4602      	mov	r2, r0
 800160c:	4b0b      	ldr	r3, [pc, #44]	; (800163c <HAL_RCC_ClockConfig+0x1c4>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	091b      	lsrs	r3, r3, #4
 8001612:	f003 030f 	and.w	r3, r3, #15
 8001616:	490a      	ldr	r1, [pc, #40]	; (8001640 <HAL_RCC_ClockConfig+0x1c8>)
 8001618:	5ccb      	ldrb	r3, [r1, r3]
 800161a:	fa22 f303 	lsr.w	r3, r2, r3
 800161e:	4a09      	ldr	r2, [pc, #36]	; (8001644 <HAL_RCC_ClockConfig+0x1cc>)
 8001620:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001622:	4b09      	ldr	r3, [pc, #36]	; (8001648 <HAL_RCC_ClockConfig+0x1d0>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff f9b4 	bl	8000994 <HAL_InitTick>

  return HAL_OK;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40022000 	.word	0x40022000
 800163c:	40021000 	.word	0x40021000
 8001640:	08001f74 	.word	0x08001f74
 8001644:	20000000 	.word	0x20000000
 8001648:	20000004 	.word	0x20000004

0800164c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800164c:	b480      	push	{r7}
 800164e:	b087      	sub	sp, #28
 8001650:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001652:	2300      	movs	r3, #0
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	2300      	movs	r3, #0
 8001658:	60bb      	str	r3, [r7, #8]
 800165a:	2300      	movs	r3, #0
 800165c:	617b      	str	r3, [r7, #20]
 800165e:	2300      	movs	r3, #0
 8001660:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001662:	2300      	movs	r3, #0
 8001664:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001666:	4b1e      	ldr	r3, [pc, #120]	; (80016e0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f003 030c 	and.w	r3, r3, #12
 8001672:	2b04      	cmp	r3, #4
 8001674:	d002      	beq.n	800167c <HAL_RCC_GetSysClockFreq+0x30>
 8001676:	2b08      	cmp	r3, #8
 8001678:	d003      	beq.n	8001682 <HAL_RCC_GetSysClockFreq+0x36>
 800167a:	e027      	b.n	80016cc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800167c:	4b19      	ldr	r3, [pc, #100]	; (80016e4 <HAL_RCC_GetSysClockFreq+0x98>)
 800167e:	613b      	str	r3, [r7, #16]
      break;
 8001680:	e027      	b.n	80016d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	0c9b      	lsrs	r3, r3, #18
 8001686:	f003 030f 	and.w	r3, r3, #15
 800168a:	4a17      	ldr	r2, [pc, #92]	; (80016e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800168c:	5cd3      	ldrb	r3, [r2, r3]
 800168e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d010      	beq.n	80016bc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800169a:	4b11      	ldr	r3, [pc, #68]	; (80016e0 <HAL_RCC_GetSysClockFreq+0x94>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	0c5b      	lsrs	r3, r3, #17
 80016a0:	f003 0301 	and.w	r3, r3, #1
 80016a4:	4a11      	ldr	r2, [pc, #68]	; (80016ec <HAL_RCC_GetSysClockFreq+0xa0>)
 80016a6:	5cd3      	ldrb	r3, [r2, r3]
 80016a8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a0d      	ldr	r2, [pc, #52]	; (80016e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80016ae:	fb03 f202 	mul.w	r2, r3, r2
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b8:	617b      	str	r3, [r7, #20]
 80016ba:	e004      	b.n	80016c6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	4a0c      	ldr	r2, [pc, #48]	; (80016f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80016c0:	fb02 f303 	mul.w	r3, r2, r3
 80016c4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	613b      	str	r3, [r7, #16]
      break;
 80016ca:	e002      	b.n	80016d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016cc:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80016ce:	613b      	str	r3, [r7, #16]
      break;
 80016d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016d2:	693b      	ldr	r3, [r7, #16]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	371c      	adds	r7, #28
 80016d8:	46bd      	mov	sp, r7
 80016da:	bc80      	pop	{r7}
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	40021000 	.word	0x40021000
 80016e4:	007a1200 	.word	0x007a1200
 80016e8:	08001f8c 	.word	0x08001f8c
 80016ec:	08001f9c 	.word	0x08001f9c
 80016f0:	003d0900 	.word	0x003d0900

080016f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016f8:	4b02      	ldr	r3, [pc, #8]	; (8001704 <HAL_RCC_GetHCLKFreq+0x10>)
 80016fa:	681b      	ldr	r3, [r3, #0]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr
 8001704:	20000000 	.word	0x20000000

08001708 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800170c:	f7ff fff2 	bl	80016f4 <HAL_RCC_GetHCLKFreq>
 8001710:	4602      	mov	r2, r0
 8001712:	4b05      	ldr	r3, [pc, #20]	; (8001728 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	0a1b      	lsrs	r3, r3, #8
 8001718:	f003 0307 	and.w	r3, r3, #7
 800171c:	4903      	ldr	r1, [pc, #12]	; (800172c <HAL_RCC_GetPCLK1Freq+0x24>)
 800171e:	5ccb      	ldrb	r3, [r1, r3]
 8001720:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001724:	4618      	mov	r0, r3
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40021000 	.word	0x40021000
 800172c:	08001f84 	.word	0x08001f84

08001730 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001734:	f7ff ffde 	bl	80016f4 <HAL_RCC_GetHCLKFreq>
 8001738:	4602      	mov	r2, r0
 800173a:	4b05      	ldr	r3, [pc, #20]	; (8001750 <HAL_RCC_GetPCLK2Freq+0x20>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	0adb      	lsrs	r3, r3, #11
 8001740:	f003 0307 	and.w	r3, r3, #7
 8001744:	4903      	ldr	r1, [pc, #12]	; (8001754 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001746:	5ccb      	ldrb	r3, [r1, r3]
 8001748:	fa22 f303 	lsr.w	r3, r2, r3
}
 800174c:	4618      	mov	r0, r3
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40021000 	.word	0x40021000
 8001754:	08001f84 	.word	0x08001f84

08001758 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001760:	4b0a      	ldr	r3, [pc, #40]	; (800178c <RCC_Delay+0x34>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a0a      	ldr	r2, [pc, #40]	; (8001790 <RCC_Delay+0x38>)
 8001766:	fba2 2303 	umull	r2, r3, r2, r3
 800176a:	0a5b      	lsrs	r3, r3, #9
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	fb02 f303 	mul.w	r3, r2, r3
 8001772:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001774:	bf00      	nop
  }
  while (Delay --);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	1e5a      	subs	r2, r3, #1
 800177a:	60fa      	str	r2, [r7, #12]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d1f9      	bne.n	8001774 <RCC_Delay+0x1c>
}
 8001780:	bf00      	nop
 8001782:	bf00      	nop
 8001784:	3714      	adds	r7, #20
 8001786:	46bd      	mov	sp, r7
 8001788:	bc80      	pop	{r7}
 800178a:	4770      	bx	lr
 800178c:	20000000 	.word	0x20000000
 8001790:	10624dd3 	.word	0x10624dd3

08001794 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d101      	bne.n	80017a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e076      	b.n	8001894 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d108      	bne.n	80017c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80017b6:	d009      	beq.n	80017cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	61da      	str	r2, [r3, #28]
 80017be:	e005      	b.n	80017cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d106      	bne.n	80017ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f7fe fe3a 	bl	8000460 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2202      	movs	r2, #2
 80017f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001802:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001814:	431a      	orrs	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800181e:	431a      	orrs	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	691b      	ldr	r3, [r3, #16]
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	431a      	orrs	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	431a      	orrs	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800183c:	431a      	orrs	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001846:	431a      	orrs	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a1b      	ldr	r3, [r3, #32]
 800184c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001850:	ea42 0103 	orr.w	r1, r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001858:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	430a      	orrs	r2, r1
 8001862:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	0c1a      	lsrs	r2, r3, #16
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f002 0204 	and.w	r2, r2, #4
 8001872:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	69da      	ldr	r2, [r3, #28]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001882:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2201      	movs	r2, #1
 800188e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001892:	2300      	movs	r3, #0
}
 8001894:	4618      	mov	r0, r3
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b08c      	sub	sp, #48	; 0x30
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
 80018a8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80018aa:	2301      	movs	r3, #1
 80018ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80018ae:	2300      	movs	r3, #0
 80018b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d101      	bne.n	80018c2 <HAL_SPI_TransmitReceive+0x26>
 80018be:	2302      	movs	r3, #2
 80018c0:	e198      	b.n	8001bf4 <HAL_SPI_TransmitReceive+0x358>
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2201      	movs	r2, #1
 80018c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80018ca:	f7ff f8a5 	bl	8000a18 <HAL_GetTick>
 80018ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80018d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80018e0:	887b      	ldrh	r3, [r7, #2]
 80018e2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80018e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d00f      	beq.n	800190c <HAL_SPI_TransmitReceive+0x70>
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80018f2:	d107      	bne.n	8001904 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d103      	bne.n	8001904 <HAL_SPI_TransmitReceive+0x68>
 80018fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001900:	2b04      	cmp	r3, #4
 8001902:	d003      	beq.n	800190c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001904:	2302      	movs	r3, #2
 8001906:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800190a:	e16d      	b.n	8001be8 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d005      	beq.n	800191e <HAL_SPI_TransmitReceive+0x82>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d002      	beq.n	800191e <HAL_SPI_TransmitReceive+0x82>
 8001918:	887b      	ldrh	r3, [r7, #2]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d103      	bne.n	8001926 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001924:	e160      	b.n	8001be8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b04      	cmp	r3, #4
 8001930:	d003      	beq.n	800193a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2205      	movs	r2, #5
 8001936:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2200      	movs	r2, #0
 800193e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	887a      	ldrh	r2, [r7, #2]
 800194a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	887a      	ldrh	r2, [r7, #2]
 8001950:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	68ba      	ldr	r2, [r7, #8]
 8001956:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	887a      	ldrh	r2, [r7, #2]
 800195c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	887a      	ldrh	r2, [r7, #2]
 8001962:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2200      	movs	r2, #0
 8001968:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2200      	movs	r2, #0
 800196e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800197a:	2b40      	cmp	r3, #64	; 0x40
 800197c:	d007      	beq.n	800198e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800198c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001996:	d17c      	bne.n	8001a92 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d002      	beq.n	80019a6 <HAL_SPI_TransmitReceive+0x10a>
 80019a0:	8b7b      	ldrh	r3, [r7, #26]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d16a      	bne.n	8001a7c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	881a      	ldrh	r2, [r3, #0]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	1c9a      	adds	r2, r3, #2
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	3b01      	subs	r3, #1
 80019c4:	b29a      	uxth	r2, r3
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80019ca:	e057      	b.n	8001a7c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d11b      	bne.n	8001a12 <HAL_SPI_TransmitReceive+0x176>
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80019de:	b29b      	uxth	r3, r3
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d016      	beq.n	8001a12 <HAL_SPI_TransmitReceive+0x176>
 80019e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d113      	bne.n	8001a12 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	881a      	ldrh	r2, [r3, #0]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	1c9a      	adds	r2, r3, #2
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	3b01      	subs	r3, #1
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d119      	bne.n	8001a54 <HAL_SPI_TransmitReceive+0x1b8>
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d014      	beq.n	8001a54 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	68da      	ldr	r2, [r3, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a34:	b292      	uxth	r2, r2
 8001a36:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a3c:	1c9a      	adds	r2, r3, #2
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001a50:	2301      	movs	r3, #1
 8001a52:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001a54:	f7fe ffe0 	bl	8000a18 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d80b      	bhi.n	8001a7c <HAL_SPI_TransmitReceive+0x1e0>
 8001a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a6a:	d007      	beq.n	8001a7c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2201      	movs	r2, #1
 8001a76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8001a7a:	e0b5      	b.n	8001be8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1a2      	bne.n	80019cc <HAL_SPI_TransmitReceive+0x130>
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d19d      	bne.n	80019cc <HAL_SPI_TransmitReceive+0x130>
 8001a90:	e080      	b.n	8001b94 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d002      	beq.n	8001aa0 <HAL_SPI_TransmitReceive+0x204>
 8001a9a:	8b7b      	ldrh	r3, [r7, #26]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d16f      	bne.n	8001b80 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	330c      	adds	r3, #12
 8001aaa:	7812      	ldrb	r2, [r2, #0]
 8001aac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	1c5a      	adds	r2, r3, #1
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001ac6:	e05b      	b.n	8001b80 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d11c      	bne.n	8001b10 <HAL_SPI_TransmitReceive+0x274>
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d017      	beq.n	8001b10 <HAL_SPI_TransmitReceive+0x274>
 8001ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d114      	bne.n	8001b10 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	330c      	adds	r3, #12
 8001af0:	7812      	ldrb	r2, [r2, #0]
 8001af2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af8:	1c5a      	adds	r2, r3, #1
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	3b01      	subs	r3, #1
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d119      	bne.n	8001b52 <HAL_SPI_TransmitReceive+0x2b6>
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d014      	beq.n	8001b52 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	68da      	ldr	r2, [r3, #12]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b32:	b2d2      	uxtb	r2, r2
 8001b34:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b3a:	1c5a      	adds	r2, r3, #1
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	3b01      	subs	r3, #1
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001b52:	f7fe ff61 	bl	8000a18 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d803      	bhi.n	8001b6a <HAL_SPI_TransmitReceive+0x2ce>
 8001b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b68:	d102      	bne.n	8001b70 <HAL_SPI_TransmitReceive+0x2d4>
 8001b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d107      	bne.n	8001b80 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8001b7e:	e033      	b.n	8001be8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d19e      	bne.n	8001ac8 <HAL_SPI_TransmitReceive+0x22c>
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d199      	bne.n	8001ac8 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b96:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001b98:	68f8      	ldr	r0, [r7, #12]
 8001b9a:	f000 f8b7 	bl	8001d0c <SPI_EndRxTxTransaction>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d006      	beq.n	8001bb2 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2220      	movs	r2, #32
 8001bae:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001bb0:	e01a      	b.n	8001be8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d10a      	bne.n	8001bd0 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001bba:	2300      	movs	r3, #0
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	617b      	str	r3, [r7, #20]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	617b      	str	r3, [r7, #20]
 8001bce:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d003      	beq.n	8001be0 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001bde:	e003      	b.n	8001be8 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001bf0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3730      	adds	r7, #48	; 0x30
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b088      	sub	sp, #32
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	603b      	str	r3, [r7, #0]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001c0c:	f7fe ff04 	bl	8000a18 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c14:	1a9b      	subs	r3, r3, r2
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	4413      	add	r3, r2
 8001c1a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001c1c:	f7fe fefc 	bl	8000a18 <HAL_GetTick>
 8001c20:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001c22:	4b39      	ldr	r3, [pc, #228]	; (8001d08 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	015b      	lsls	r3, r3, #5
 8001c28:	0d1b      	lsrs	r3, r3, #20
 8001c2a:	69fa      	ldr	r2, [r7, #28]
 8001c2c:	fb02 f303 	mul.w	r3, r2, r3
 8001c30:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001c32:	e054      	b.n	8001cde <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c3a:	d050      	beq.n	8001cde <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001c3c:	f7fe feec 	bl	8000a18 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	69fa      	ldr	r2, [r7, #28]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d902      	bls.n	8001c52 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d13d      	bne.n	8001cce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	685a      	ldr	r2, [r3, #4]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001c60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001c6a:	d111      	bne.n	8001c90 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c74:	d004      	beq.n	8001c80 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c7e:	d107      	bne.n	8001c90 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c98:	d10f      	bne.n	8001cba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ca8:	601a      	str	r2, [r3, #0]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001cb8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e017      	b.n	8001cfe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d101      	bne.n	8001cd8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	689a      	ldr	r2, [r3, #8]
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	68ba      	ldr	r2, [r7, #8]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	bf0c      	ite	eq
 8001cee:	2301      	moveq	r3, #1
 8001cf0:	2300      	movne	r3, #0
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	79fb      	ldrb	r3, [r7, #7]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d19b      	bne.n	8001c34 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3720      	adds	r7, #32
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20000000 	.word	0x20000000

08001d0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af02      	add	r7, sp, #8
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	2180      	movs	r1, #128	; 0x80
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	f7ff ff6a 	bl	8001bfc <SPI_WaitFlagStateUntilTimeout>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d007      	beq.n	8001d3e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d32:	f043 0220 	orr.w	r2, r3, #32
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e000      	b.n	8001d40 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3710      	adds	r7, #16
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e042      	b.n	8001de0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d106      	bne.n	8001d74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f7fe fbc0 	bl	80004f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2224      	movs	r2, #36	; 0x24
 8001d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68da      	ldr	r2, [r3, #12]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 f82b 	bl	8001de8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	691a      	ldr	r2, [r3, #16]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001da0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	695a      	ldr	r2, [r3, #20]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001db0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68da      	ldr	r2, [r3, #12]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001dc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2220      	movs	r2, #32
 8001dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2220      	movs	r2, #32
 8001dd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	68da      	ldr	r2, [r3, #12]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	430a      	orrs	r2, r1
 8001e04:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689a      	ldr	r2, [r3, #8]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	431a      	orrs	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	695b      	ldr	r3, [r3, #20]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001e22:	f023 030c 	bic.w	r3, r3, #12
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6812      	ldr	r2, [r2, #0]
 8001e2a:	68b9      	ldr	r1, [r7, #8]
 8001e2c:	430b      	orrs	r3, r1
 8001e2e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	699a      	ldr	r2, [r3, #24]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	430a      	orrs	r2, r1
 8001e44:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a2c      	ldr	r2, [pc, #176]	; (8001efc <UART_SetConfig+0x114>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d103      	bne.n	8001e58 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001e50:	f7ff fc6e 	bl	8001730 <HAL_RCC_GetPCLK2Freq>
 8001e54:	60f8      	str	r0, [r7, #12]
 8001e56:	e002      	b.n	8001e5e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001e58:	f7ff fc56 	bl	8001708 <HAL_RCC_GetPCLK1Freq>
 8001e5c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	4613      	mov	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4413      	add	r3, r2
 8001e66:	009a      	lsls	r2, r3, #2
 8001e68:	441a      	add	r2, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e74:	4a22      	ldr	r2, [pc, #136]	; (8001f00 <UART_SetConfig+0x118>)
 8001e76:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7a:	095b      	lsrs	r3, r3, #5
 8001e7c:	0119      	lsls	r1, r3, #4
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	4613      	mov	r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	4413      	add	r3, r2
 8001e86:	009a      	lsls	r2, r3, #2
 8001e88:	441a      	add	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e94:	4b1a      	ldr	r3, [pc, #104]	; (8001f00 <UART_SetConfig+0x118>)
 8001e96:	fba3 0302 	umull	r0, r3, r3, r2
 8001e9a:	095b      	lsrs	r3, r3, #5
 8001e9c:	2064      	movs	r0, #100	; 0x64
 8001e9e:	fb00 f303 	mul.w	r3, r0, r3
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	011b      	lsls	r3, r3, #4
 8001ea6:	3332      	adds	r3, #50	; 0x32
 8001ea8:	4a15      	ldr	r2, [pc, #84]	; (8001f00 <UART_SetConfig+0x118>)
 8001eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8001eae:	095b      	lsrs	r3, r3, #5
 8001eb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001eb4:	4419      	add	r1, r3
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	4413      	add	r3, r2
 8001ebe:	009a      	lsls	r2, r3, #2
 8001ec0:	441a      	add	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ecc:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <UART_SetConfig+0x118>)
 8001ece:	fba3 0302 	umull	r0, r3, r3, r2
 8001ed2:	095b      	lsrs	r3, r3, #5
 8001ed4:	2064      	movs	r0, #100	; 0x64
 8001ed6:	fb00 f303 	mul.w	r3, r0, r3
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	011b      	lsls	r3, r3, #4
 8001ede:	3332      	adds	r3, #50	; 0x32
 8001ee0:	4a07      	ldr	r2, [pc, #28]	; (8001f00 <UART_SetConfig+0x118>)
 8001ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee6:	095b      	lsrs	r3, r3, #5
 8001ee8:	f003 020f 	and.w	r2, r3, #15
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	440a      	add	r2, r1
 8001ef2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001ef4:	bf00      	nop
 8001ef6:	3710      	adds	r7, #16
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40013800 	.word	0x40013800
 8001f00:	51eb851f 	.word	0x51eb851f

08001f04 <__libc_init_array>:
 8001f04:	b570      	push	{r4, r5, r6, lr}
 8001f06:	2600      	movs	r6, #0
 8001f08:	4d0c      	ldr	r5, [pc, #48]	; (8001f3c <__libc_init_array+0x38>)
 8001f0a:	4c0d      	ldr	r4, [pc, #52]	; (8001f40 <__libc_init_array+0x3c>)
 8001f0c:	1b64      	subs	r4, r4, r5
 8001f0e:	10a4      	asrs	r4, r4, #2
 8001f10:	42a6      	cmp	r6, r4
 8001f12:	d109      	bne.n	8001f28 <__libc_init_array+0x24>
 8001f14:	f000 f822 	bl	8001f5c <_init>
 8001f18:	2600      	movs	r6, #0
 8001f1a:	4d0a      	ldr	r5, [pc, #40]	; (8001f44 <__libc_init_array+0x40>)
 8001f1c:	4c0a      	ldr	r4, [pc, #40]	; (8001f48 <__libc_init_array+0x44>)
 8001f1e:	1b64      	subs	r4, r4, r5
 8001f20:	10a4      	asrs	r4, r4, #2
 8001f22:	42a6      	cmp	r6, r4
 8001f24:	d105      	bne.n	8001f32 <__libc_init_array+0x2e>
 8001f26:	bd70      	pop	{r4, r5, r6, pc}
 8001f28:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f2c:	4798      	blx	r3
 8001f2e:	3601      	adds	r6, #1
 8001f30:	e7ee      	b.n	8001f10 <__libc_init_array+0xc>
 8001f32:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f36:	4798      	blx	r3
 8001f38:	3601      	adds	r6, #1
 8001f3a:	e7f2      	b.n	8001f22 <__libc_init_array+0x1e>
 8001f3c:	08001fa0 	.word	0x08001fa0
 8001f40:	08001fa0 	.word	0x08001fa0
 8001f44:	08001fa0 	.word	0x08001fa0
 8001f48:	08001fa4 	.word	0x08001fa4

08001f4c <memset>:
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	4402      	add	r2, r0
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d100      	bne.n	8001f56 <memset+0xa>
 8001f54:	4770      	bx	lr
 8001f56:	f803 1b01 	strb.w	r1, [r3], #1
 8001f5a:	e7f9      	b.n	8001f50 <memset+0x4>

08001f5c <_init>:
 8001f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f5e:	bf00      	nop
 8001f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f62:	bc08      	pop	{r3}
 8001f64:	469e      	mov	lr, r3
 8001f66:	4770      	bx	lr

08001f68 <_fini>:
 8001f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f6a:	bf00      	nop
 8001f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f6e:	bc08      	pop	{r3}
 8001f70:	469e      	mov	lr, r3
 8001f72:	4770      	bx	lr
