
F446ZET6_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f48  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800410c  0800410c  0001410c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800413c  0800413c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800413c  0800413c  0001413c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004144  08004144  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004144  08004144  00014144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004148  08004148  00014148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800414c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000010  0800415c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  0800415c  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bf0b  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a35  00000000  00000000  0002bf4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e0  00000000  00000000  0002d980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000960  00000000  00000000  0002e360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020861  00000000  00000000  0002ecc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d463  00000000  00000000  0004f521  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6bcc  00000000  00000000  0005c984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00123550  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002900  00000000  00000000  001235a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080040f4 	.word	0x080040f4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	080040f4 	.word	0x080040f4

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b974 	b.w	8000514 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	468e      	mov	lr, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	d14d      	bne.n	80002ee <__udivmoddi4+0xaa>
 8000252:	428a      	cmp	r2, r1
 8000254:	4694      	mov	ip, r2
 8000256:	d969      	bls.n	800032c <__udivmoddi4+0xe8>
 8000258:	fab2 f282 	clz	r2, r2
 800025c:	b152      	cbz	r2, 8000274 <__udivmoddi4+0x30>
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	f1c2 0120 	rsb	r1, r2, #32
 8000266:	fa20 f101 	lsr.w	r1, r0, r1
 800026a:	fa0c fc02 	lsl.w	ip, ip, r2
 800026e:	ea41 0e03 	orr.w	lr, r1, r3
 8000272:	4094      	lsls	r4, r2
 8000274:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000278:	0c21      	lsrs	r1, r4, #16
 800027a:	fbbe f6f8 	udiv	r6, lr, r8
 800027e:	fa1f f78c 	uxth.w	r7, ip
 8000282:	fb08 e316 	mls	r3, r8, r6, lr
 8000286:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028a:	fb06 f107 	mul.w	r1, r6, r7
 800028e:	4299      	cmp	r1, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x64>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295
 800029a:	f080 811f 	bcs.w	80004dc <__udivmoddi4+0x298>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 811c 	bls.w	80004dc <__udivmoddi4+0x298>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	4463      	add	r3, ip
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 f707 	mul.w	r7, r0, r7
 80002bc:	42a7      	cmp	r7, r4
 80002be:	d90a      	bls.n	80002d6 <__udivmoddi4+0x92>
 80002c0:	eb1c 0404 	adds.w	r4, ip, r4
 80002c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c8:	f080 810a 	bcs.w	80004e0 <__udivmoddi4+0x29c>
 80002cc:	42a7      	cmp	r7, r4
 80002ce:	f240 8107 	bls.w	80004e0 <__udivmoddi4+0x29c>
 80002d2:	4464      	add	r4, ip
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002da:	1be4      	subs	r4, r4, r7
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa4>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xc2>
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	f000 80ef 	beq.w	80004d6 <__udivmoddi4+0x292>
 80002f8:	2600      	movs	r6, #0
 80002fa:	e9c5 0100 	strd	r0, r1, [r5]
 80002fe:	4630      	mov	r0, r6
 8000300:	4631      	mov	r1, r6
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f683 	clz	r6, r3
 800030a:	2e00      	cmp	r6, #0
 800030c:	d14a      	bne.n	80003a4 <__udivmoddi4+0x160>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd4>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80f9 	bhi.w	800050a <__udivmoddi4+0x2c6>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	469e      	mov	lr, r3
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa4>
 8000326:	e9c5 4e00 	strd	r4, lr, [r5]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa4>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xec>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 8092 	bne.w	800045e <__udivmoddi4+0x21a>
 800033a:	eba1 010c 	sub.w	r1, r1, ip
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f fe8c 	uxth.w	lr, ip
 8000346:	2601      	movs	r6, #1
 8000348:	0c20      	lsrs	r0, r4, #16
 800034a:	fbb1 f3f7 	udiv	r3, r1, r7
 800034e:	fb07 1113 	mls	r1, r7, r3, r1
 8000352:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000356:	fb0e f003 	mul.w	r0, lr, r3
 800035a:	4288      	cmp	r0, r1
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0x12c>
 800035e:	eb1c 0101 	adds.w	r1, ip, r1
 8000362:	f103 38ff 	add.w	r8, r3, #4294967295
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x12a>
 8000368:	4288      	cmp	r0, r1
 800036a:	f200 80cb 	bhi.w	8000504 <__udivmoddi4+0x2c0>
 800036e:	4643      	mov	r3, r8
 8000370:	1a09      	subs	r1, r1, r0
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb1 f0f7 	udiv	r0, r1, r7
 8000378:	fb07 1110 	mls	r1, r7, r0, r1
 800037c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000380:	fb0e fe00 	mul.w	lr, lr, r0
 8000384:	45a6      	cmp	lr, r4
 8000386:	d908      	bls.n	800039a <__udivmoddi4+0x156>
 8000388:	eb1c 0404 	adds.w	r4, ip, r4
 800038c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000390:	d202      	bcs.n	8000398 <__udivmoddi4+0x154>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f200 80bb 	bhi.w	800050e <__udivmoddi4+0x2ca>
 8000398:	4608      	mov	r0, r1
 800039a:	eba4 040e 	sub.w	r4, r4, lr
 800039e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a2:	e79c      	b.n	80002de <__udivmoddi4+0x9a>
 80003a4:	f1c6 0720 	rsb	r7, r6, #32
 80003a8:	40b3      	lsls	r3, r6
 80003aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b2:	fa20 f407 	lsr.w	r4, r0, r7
 80003b6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ba:	431c      	orrs	r4, r3
 80003bc:	40f9      	lsrs	r1, r7
 80003be:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c2:	fa00 f306 	lsl.w	r3, r0, r6
 80003c6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ca:	0c20      	lsrs	r0, r4, #16
 80003cc:	fa1f fe8c 	uxth.w	lr, ip
 80003d0:	fb09 1118 	mls	r1, r9, r8, r1
 80003d4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d8:	fb08 f00e 	mul.w	r0, r8, lr
 80003dc:	4288      	cmp	r0, r1
 80003de:	fa02 f206 	lsl.w	r2, r2, r6
 80003e2:	d90b      	bls.n	80003fc <__udivmoddi4+0x1b8>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ec:	f080 8088 	bcs.w	8000500 <__udivmoddi4+0x2bc>
 80003f0:	4288      	cmp	r0, r1
 80003f2:	f240 8085 	bls.w	8000500 <__udivmoddi4+0x2bc>
 80003f6:	f1a8 0802 	sub.w	r8, r8, #2
 80003fa:	4461      	add	r1, ip
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f9 	udiv	r0, r1, r9
 8000404:	fb09 1110 	mls	r1, r9, r0, r1
 8000408:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800040c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000410:	458e      	cmp	lr, r1
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x1e2>
 8000414:	eb1c 0101 	adds.w	r1, ip, r1
 8000418:	f100 34ff 	add.w	r4, r0, #4294967295
 800041c:	d26c      	bcs.n	80004f8 <__udivmoddi4+0x2b4>
 800041e:	458e      	cmp	lr, r1
 8000420:	d96a      	bls.n	80004f8 <__udivmoddi4+0x2b4>
 8000422:	3802      	subs	r0, #2
 8000424:	4461      	add	r1, ip
 8000426:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042a:	fba0 9402 	umull	r9, r4, r0, r2
 800042e:	eba1 010e 	sub.w	r1, r1, lr
 8000432:	42a1      	cmp	r1, r4
 8000434:	46c8      	mov	r8, r9
 8000436:	46a6      	mov	lr, r4
 8000438:	d356      	bcc.n	80004e8 <__udivmoddi4+0x2a4>
 800043a:	d053      	beq.n	80004e4 <__udivmoddi4+0x2a0>
 800043c:	b15d      	cbz	r5, 8000456 <__udivmoddi4+0x212>
 800043e:	ebb3 0208 	subs.w	r2, r3, r8
 8000442:	eb61 010e 	sbc.w	r1, r1, lr
 8000446:	fa01 f707 	lsl.w	r7, r1, r7
 800044a:	fa22 f306 	lsr.w	r3, r2, r6
 800044e:	40f1      	lsrs	r1, r6
 8000450:	431f      	orrs	r7, r3
 8000452:	e9c5 7100 	strd	r7, r1, [r5]
 8000456:	2600      	movs	r6, #0
 8000458:	4631      	mov	r1, r6
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1c2 0320 	rsb	r3, r2, #32
 8000462:	40d8      	lsrs	r0, r3
 8000464:	fa0c fc02 	lsl.w	ip, ip, r2
 8000468:	fa21 f303 	lsr.w	r3, r1, r3
 800046c:	4091      	lsls	r1, r2
 800046e:	4301      	orrs	r1, r0
 8000470:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000474:	fa1f fe8c 	uxth.w	lr, ip
 8000478:	fbb3 f0f7 	udiv	r0, r3, r7
 800047c:	fb07 3610 	mls	r6, r7, r0, r3
 8000480:	0c0b      	lsrs	r3, r1, #16
 8000482:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000486:	fb00 f60e 	mul.w	r6, r0, lr
 800048a:	429e      	cmp	r6, r3
 800048c:	fa04 f402 	lsl.w	r4, r4, r2
 8000490:	d908      	bls.n	80004a4 <__udivmoddi4+0x260>
 8000492:	eb1c 0303 	adds.w	r3, ip, r3
 8000496:	f100 38ff 	add.w	r8, r0, #4294967295
 800049a:	d22f      	bcs.n	80004fc <__udivmoddi4+0x2b8>
 800049c:	429e      	cmp	r6, r3
 800049e:	d92d      	bls.n	80004fc <__udivmoddi4+0x2b8>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4463      	add	r3, ip
 80004a4:	1b9b      	subs	r3, r3, r6
 80004a6:	b289      	uxth	r1, r1
 80004a8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004ac:	fb07 3316 	mls	r3, r7, r6, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb06 f30e 	mul.w	r3, r6, lr
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x28a>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c4:	d216      	bcs.n	80004f4 <__udivmoddi4+0x2b0>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d914      	bls.n	80004f4 <__udivmoddi4+0x2b0>
 80004ca:	3e02      	subs	r6, #2
 80004cc:	4461      	add	r1, ip
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d4:	e738      	b.n	8000348 <__udivmoddi4+0x104>
 80004d6:	462e      	mov	r6, r5
 80004d8:	4628      	mov	r0, r5
 80004da:	e705      	b.n	80002e8 <__udivmoddi4+0xa4>
 80004dc:	4606      	mov	r6, r0
 80004de:	e6e3      	b.n	80002a8 <__udivmoddi4+0x64>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6f8      	b.n	80002d6 <__udivmoddi4+0x92>
 80004e4:	454b      	cmp	r3, r9
 80004e6:	d2a9      	bcs.n	800043c <__udivmoddi4+0x1f8>
 80004e8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ec:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f0:	3801      	subs	r0, #1
 80004f2:	e7a3      	b.n	800043c <__udivmoddi4+0x1f8>
 80004f4:	4646      	mov	r6, r8
 80004f6:	e7ea      	b.n	80004ce <__udivmoddi4+0x28a>
 80004f8:	4620      	mov	r0, r4
 80004fa:	e794      	b.n	8000426 <__udivmoddi4+0x1e2>
 80004fc:	4640      	mov	r0, r8
 80004fe:	e7d1      	b.n	80004a4 <__udivmoddi4+0x260>
 8000500:	46d0      	mov	r8, sl
 8000502:	e77b      	b.n	80003fc <__udivmoddi4+0x1b8>
 8000504:	3b02      	subs	r3, #2
 8000506:	4461      	add	r1, ip
 8000508:	e732      	b.n	8000370 <__udivmoddi4+0x12c>
 800050a:	4630      	mov	r0, r6
 800050c:	e709      	b.n	8000322 <__udivmoddi4+0xde>
 800050e:	4464      	add	r4, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e742      	b.n	800039a <__udivmoddi4+0x156>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <serialPrint>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void serialPrint(char *string){
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 8000520:	6878      	ldr	r0, [r7, #4]
 8000522:	f7ff fe6f 	bl	8000204 <strlen>
 8000526:	4603      	mov	r3, r0
 8000528:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, (uint8_t *)string, len, 10000);
 800052a:	7bfb      	ldrb	r3, [r7, #15]
 800052c:	b29a      	uxth	r2, r3
 800052e:	f242 7310 	movw	r3, #10000	; 0x2710
 8000532:	6879      	ldr	r1, [r7, #4]
 8000534:	4803      	ldr	r0, [pc, #12]	; (8000544 <serialPrint+0x2c>)
 8000536:	f003 fa3c 	bl	80039b2 <HAL_UART_Transmit>
}
 800053a:	bf00      	nop
 800053c:	3710      	adds	r7, #16
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	20000080 	.word	0x20000080

08000548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054c:	f000 fa50 	bl	80009f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000550:	f000 f81a 	bl	8000588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000554:	f000 f8dc 	bl	8000710 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000558:	f000 f882 	bl	8000660 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800055c:	f000 f8ae 	bl	80006bc <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  serialPrint("Sending Interrupt...\r\n");
 8000560:	4806      	ldr	r0, [pc, #24]	; (800057c <main+0x34>)
 8000562:	f7ff ffd9 	bl	8000518 <serialPrint>
	  HAL_I2C_Master_Transmit_IT(&hi2c1, 92, buf, 1);
 8000566:	2301      	movs	r3, #1
 8000568:	4a05      	ldr	r2, [pc, #20]	; (8000580 <main+0x38>)
 800056a:	215c      	movs	r1, #92	; 0x5c
 800056c:	4805      	ldr	r0, [pc, #20]	; (8000584 <main+0x3c>)
 800056e:	f000 feef 	bl	8001350 <HAL_I2C_Master_Transmit_IT>
	  HAL_Delay(10000);
 8000572:	f242 7010 	movw	r0, #10000	; 0x2710
 8000576:	f000 faad 	bl	8000ad4 <HAL_Delay>
	  serialPrint("Sending Interrupt...\r\n");
 800057a:	e7f1      	b.n	8000560 <main+0x18>
 800057c:	0800410c 	.word	0x0800410c
 8000580:	20000000 	.word	0x20000000
 8000584:	2000002c 	.word	0x2000002c

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b094      	sub	sp, #80	; 0x50
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 031c 	add.w	r3, r7, #28
 8000592:	2234      	movs	r2, #52	; 0x34
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f003 fda4 	bl	80040e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	f107 0308 	add.w	r3, r7, #8
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
 80005aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ac:	2300      	movs	r3, #0
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	4b29      	ldr	r3, [pc, #164]	; (8000658 <SystemClock_Config+0xd0>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	4a28      	ldr	r2, [pc, #160]	; (8000658 <SystemClock_Config+0xd0>)
 80005b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ba:	6413      	str	r3, [r2, #64]	; 0x40
 80005bc:	4b26      	ldr	r3, [pc, #152]	; (8000658 <SystemClock_Config+0xd0>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c8:	2300      	movs	r3, #0
 80005ca:	603b      	str	r3, [r7, #0]
 80005cc:	4b23      	ldr	r3, [pc, #140]	; (800065c <SystemClock_Config+0xd4>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a22      	ldr	r2, [pc, #136]	; (800065c <SystemClock_Config+0xd4>)
 80005d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005d6:	6013      	str	r3, [r2, #0]
 80005d8:	4b20      	ldr	r3, [pc, #128]	; (800065c <SystemClock_Config+0xd4>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005e0:	603b      	str	r3, [r7, #0]
 80005e2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e4:	2302      	movs	r3, #2
 80005e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e8:	2301      	movs	r3, #1
 80005ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ec:	2310      	movs	r3, #16
 80005ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f0:	2302      	movs	r3, #2
 80005f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005f4:	2300      	movs	r3, #0
 80005f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005f8:	2308      	movs	r3, #8
 80005fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005fc:	23a8      	movs	r3, #168	; 0xa8
 80005fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000600:	2302      	movs	r3, #2
 8000602:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000604:	2302      	movs	r3, #2
 8000606:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000608:	2302      	movs	r3, #2
 800060a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060c:	f107 031c 	add.w	r3, r7, #28
 8000610:	4618      	mov	r0, r3
 8000612:	f002 fee3 	bl	80033dc <HAL_RCC_OscConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800061c:	f000 f8a0 	bl	8000760 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000620:	230f      	movs	r3, #15
 8000622:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000624:	2302      	movs	r3, #2
 8000626:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800062c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000630:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000632:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000636:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000638:	f107 0308 	add.w	r3, r7, #8
 800063c:	2105      	movs	r1, #5
 800063e:	4618      	mov	r0, r3
 8000640:	f002 fc08 	bl	8002e54 <HAL_RCC_ClockConfig>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800064a:	f000 f889 	bl	8000760 <Error_Handler>
  }
}
 800064e:	bf00      	nop
 8000650:	3750      	adds	r7, #80	; 0x50
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40023800 	.word	0x40023800
 800065c:	40007000 	.word	0x40007000

08000660 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000664:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <MX_I2C1_Init+0x50>)
 8000666:	4a13      	ldr	r2, [pc, #76]	; (80006b4 <MX_I2C1_Init+0x54>)
 8000668:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800066a:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <MX_I2C1_Init+0x50>)
 800066c:	4a12      	ldr	r2, [pc, #72]	; (80006b8 <MX_I2C1_Init+0x58>)
 800066e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000670:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <MX_I2C1_Init+0x50>)
 8000672:	2200      	movs	r2, #0
 8000674:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 90;
 8000676:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <MX_I2C1_Init+0x50>)
 8000678:	225a      	movs	r2, #90	; 0x5a
 800067a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <MX_I2C1_Init+0x50>)
 800067e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000682:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000684:	4b0a      	ldr	r3, [pc, #40]	; (80006b0 <MX_I2C1_Init+0x50>)
 8000686:	2200      	movs	r2, #0
 8000688:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800068a:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <MX_I2C1_Init+0x50>)
 800068c:	2200      	movs	r2, #0
 800068e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000690:	4b07      	ldr	r3, [pc, #28]	; (80006b0 <MX_I2C1_Init+0x50>)
 8000692:	2200      	movs	r2, #0
 8000694:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000696:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <MX_I2C1_Init+0x50>)
 8000698:	2200      	movs	r2, #0
 800069a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800069c:	4804      	ldr	r0, [pc, #16]	; (80006b0 <MX_I2C1_Init+0x50>)
 800069e:	f000 fd13 	bl	80010c8 <HAL_I2C_Init>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006a8:	f000 f85a 	bl	8000760 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	2000002c 	.word	0x2000002c
 80006b4:	40005400 	.word	0x40005400
 80006b8:	000186a0 	.word	0x000186a0

080006bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006c0:	4b11      	ldr	r3, [pc, #68]	; (8000708 <MX_USART1_UART_Init+0x4c>)
 80006c2:	4a12      	ldr	r2, [pc, #72]	; (800070c <MX_USART1_UART_Init+0x50>)
 80006c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006c6:	4b10      	ldr	r3, [pc, #64]	; (8000708 <MX_USART1_UART_Init+0x4c>)
 80006c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <MX_USART1_UART_Init+0x4c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <MX_USART1_UART_Init+0x4c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006da:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <MX_USART1_UART_Init+0x4c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006e0:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_USART1_UART_Init+0x4c>)
 80006e2:	220c      	movs	r2, #12
 80006e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <MX_USART1_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <MX_USART1_UART_Init+0x4c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006f2:	4805      	ldr	r0, [pc, #20]	; (8000708 <MX_USART1_UART_Init+0x4c>)
 80006f4:	f003 f910 	bl	8003918 <HAL_UART_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006fe:	f000 f82f 	bl	8000760 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000080 	.word	0x20000080
 800070c:	40011000 	.word	0x40011000

08000710 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	4b10      	ldr	r3, [pc, #64]	; (800075c <MX_GPIO_Init+0x4c>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a0f      	ldr	r2, [pc, #60]	; (800075c <MX_GPIO_Init+0x4c>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b0d      	ldr	r3, [pc, #52]	; (800075c <MX_GPIO_Init+0x4c>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	603b      	str	r3, [r7, #0]
 8000736:	4b09      	ldr	r3, [pc, #36]	; (800075c <MX_GPIO_Init+0x4c>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a08      	ldr	r2, [pc, #32]	; (800075c <MX_GPIO_Init+0x4c>)
 800073c:	f043 0302 	orr.w	r3, r3, #2
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <MX_GPIO_Init+0x4c>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0302 	and.w	r3, r3, #2
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	683b      	ldr	r3, [r7, #0]

}
 800074e:	bf00      	nop
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	40023800 	.word	0x40023800

08000760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000764:	b672      	cpsid	i
}
 8000766:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000768:	e7fe      	b.n	8000768 <Error_Handler+0x8>
	...

0800076c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	4b10      	ldr	r3, [pc, #64]	; (80007b8 <HAL_MspInit+0x4c>)
 8000778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800077a:	4a0f      	ldr	r2, [pc, #60]	; (80007b8 <HAL_MspInit+0x4c>)
 800077c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000780:	6453      	str	r3, [r2, #68]	; 0x44
 8000782:	4b0d      	ldr	r3, [pc, #52]	; (80007b8 <HAL_MspInit+0x4c>)
 8000784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000786:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	603b      	str	r3, [r7, #0]
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <HAL_MspInit+0x4c>)
 8000794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000796:	4a08      	ldr	r2, [pc, #32]	; (80007b8 <HAL_MspInit+0x4c>)
 8000798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800079c:	6413      	str	r3, [r2, #64]	; 0x40
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <HAL_MspInit+0x4c>)
 80007a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a6:	603b      	str	r3, [r7, #0]
 80007a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007aa:	bf00      	nop
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	40023800 	.word	0x40023800

080007bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08a      	sub	sp, #40	; 0x28
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a21      	ldr	r2, [pc, #132]	; (8000860 <HAL_I2C_MspInit+0xa4>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d13b      	bne.n	8000856 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	613b      	str	r3, [r7, #16]
 80007e2:	4b20      	ldr	r3, [pc, #128]	; (8000864 <HAL_I2C_MspInit+0xa8>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a1f      	ldr	r2, [pc, #124]	; (8000864 <HAL_I2C_MspInit+0xa8>)
 80007e8:	f043 0302 	orr.w	r3, r3, #2
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b1d      	ldr	r3, [pc, #116]	; (8000864 <HAL_I2C_MspInit+0xa8>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007fa:	23c0      	movs	r3, #192	; 0xc0
 80007fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007fe:	2312      	movs	r3, #18
 8000800:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000806:	2303      	movs	r3, #3
 8000808:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800080a:	2304      	movs	r3, #4
 800080c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800080e:	f107 0314 	add.w	r3, r7, #20
 8000812:	4619      	mov	r1, r3
 8000814:	4814      	ldr	r0, [pc, #80]	; (8000868 <HAL_I2C_MspInit+0xac>)
 8000816:	f000 fac3 	bl	8000da0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <HAL_I2C_MspInit+0xa8>)
 8000820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000822:	4a10      	ldr	r2, [pc, #64]	; (8000864 <HAL_I2C_MspInit+0xa8>)
 8000824:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000828:	6413      	str	r3, [r2, #64]	; 0x40
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <HAL_I2C_MspInit+0xa8>)
 800082c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000836:	2200      	movs	r2, #0
 8000838:	2100      	movs	r1, #0
 800083a:	201f      	movs	r0, #31
 800083c:	f000 fa49 	bl	8000cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000840:	201f      	movs	r0, #31
 8000842:	f000 fa62 	bl	8000d0a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000846:	2200      	movs	r2, #0
 8000848:	2100      	movs	r1, #0
 800084a:	2020      	movs	r0, #32
 800084c:	f000 fa41 	bl	8000cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000850:	2020      	movs	r0, #32
 8000852:	f000 fa5a 	bl	8000d0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000856:	bf00      	nop
 8000858:	3728      	adds	r7, #40	; 0x28
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40005400 	.word	0x40005400
 8000864:	40023800 	.word	0x40023800
 8000868:	40020400 	.word	0x40020400

0800086c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08a      	sub	sp, #40	; 0x28
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a19      	ldr	r2, [pc, #100]	; (80008f0 <HAL_UART_MspInit+0x84>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d12c      	bne.n	80008e8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	613b      	str	r3, [r7, #16]
 8000892:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <HAL_UART_MspInit+0x88>)
 8000894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000896:	4a17      	ldr	r2, [pc, #92]	; (80008f4 <HAL_UART_MspInit+0x88>)
 8000898:	f043 0310 	orr.w	r3, r3, #16
 800089c:	6453      	str	r3, [r2, #68]	; 0x44
 800089e:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <HAL_UART_MspInit+0x88>)
 80008a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a2:	f003 0310 	and.w	r3, r3, #16
 80008a6:	613b      	str	r3, [r7, #16]
 80008a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <HAL_UART_MspInit+0x88>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a10      	ldr	r2, [pc, #64]	; (80008f4 <HAL_UART_MspInit+0x88>)
 80008b4:	f043 0301 	orr.w	r3, r3, #1
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <HAL_UART_MspInit+0x88>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008c6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80008ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008cc:	2302      	movs	r3, #2
 80008ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d4:	2303      	movs	r3, #3
 80008d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008d8:	2307      	movs	r3, #7
 80008da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	4619      	mov	r1, r3
 80008e2:	4805      	ldr	r0, [pc, #20]	; (80008f8 <HAL_UART_MspInit+0x8c>)
 80008e4:	f000 fa5c 	bl	8000da0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008e8:	bf00      	nop
 80008ea:	3728      	adds	r7, #40	; 0x28
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40011000 	.word	0x40011000
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40020000 	.word	0x40020000

080008fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <NMI_Handler+0x4>

08000902 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000906:	e7fe      	b.n	8000906 <HardFault_Handler+0x4>

08000908 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800090c:	e7fe      	b.n	800090c <MemManage_Handler+0x4>

0800090e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000912:	e7fe      	b.n	8000912 <BusFault_Handler+0x4>

08000914 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000918:	e7fe      	b.n	8000918 <UsageFault_Handler+0x4>

0800091a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr

08000936 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr

08000944 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000948:	f000 f8a4 	bl	8000a94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}

08000950 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000954:	4802      	ldr	r0, [pc, #8]	; (8000960 <I2C1_EV_IRQHandler+0x10>)
 8000956:	f000 fda1 	bl	800149c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	2000002c 	.word	0x2000002c

08000964 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000968:	4802      	ldr	r0, [pc, #8]	; (8000974 <I2C1_ER_IRQHandler+0x10>)
 800096a:	f000 ff08 	bl	800177e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	2000002c 	.word	0x2000002c

08000978 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <SystemInit+0x20>)
 800097e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000982:	4a05      	ldr	r2, [pc, #20]	; (8000998 <SystemInit+0x20>)
 8000984:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000988:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	e000ed00 	.word	0xe000ed00

0800099c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800099c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009a0:	480d      	ldr	r0, [pc, #52]	; (80009d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009a2:	490e      	ldr	r1, [pc, #56]	; (80009dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009a4:	4a0e      	ldr	r2, [pc, #56]	; (80009e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a8:	e002      	b.n	80009b0 <LoopCopyDataInit>

080009aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ae:	3304      	adds	r3, #4

080009b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b4:	d3f9      	bcc.n	80009aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009b6:	4a0b      	ldr	r2, [pc, #44]	; (80009e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009b8:	4c0b      	ldr	r4, [pc, #44]	; (80009e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009bc:	e001      	b.n	80009c2 <LoopFillZerobss>

080009be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c0:	3204      	adds	r2, #4

080009c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c4:	d3fb      	bcc.n	80009be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009c6:	f7ff ffd7 	bl	8000978 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009ca:	f003 fb67 	bl	800409c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ce:	f7ff fdbb 	bl	8000548 <main>
  bx  lr    
 80009d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009dc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80009e0:	0800414c 	.word	0x0800414c
  ldr r2, =_sbss
 80009e4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80009e8:	200000c8 	.word	0x200000c8

080009ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009ec:	e7fe      	b.n	80009ec <ADC_IRQHandler>
	...

080009f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009f4:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <HAL_Init+0x40>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a0d      	ldr	r2, [pc, #52]	; (8000a30 <HAL_Init+0x40>)
 80009fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a00:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <HAL_Init+0x40>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a0a      	ldr	r2, [pc, #40]	; (8000a30 <HAL_Init+0x40>)
 8000a06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a0c:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <HAL_Init+0x40>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a07      	ldr	r2, [pc, #28]	; (8000a30 <HAL_Init+0x40>)
 8000a12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a18:	2003      	movs	r0, #3
 8000a1a:	f000 f94f 	bl	8000cbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a1e:	200f      	movs	r0, #15
 8000a20:	f000 f808 	bl	8000a34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a24:	f7ff fea2 	bl	800076c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a28:	2300      	movs	r3, #0
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40023c00 	.word	0x40023c00

08000a34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a3c:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <HAL_InitTick+0x54>)
 8000a3e:	681a      	ldr	r2, [r3, #0]
 8000a40:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <HAL_InitTick+0x58>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	4619      	mov	r1, r3
 8000a46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a52:	4618      	mov	r0, r3
 8000a54:	f000 f967 	bl	8000d26 <HAL_SYSTICK_Config>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	e00e      	b.n	8000a80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2b0f      	cmp	r3, #15
 8000a66:	d80a      	bhi.n	8000a7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	6879      	ldr	r1, [r7, #4]
 8000a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a70:	f000 f92f 	bl	8000cd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a74:	4a06      	ldr	r2, [pc, #24]	; (8000a90 <HAL_InitTick+0x5c>)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	e000      	b.n	8000a80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	20000004 	.word	0x20000004
 8000a8c:	2000000c 	.word	0x2000000c
 8000a90:	20000008 	.word	0x20000008

08000a94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <HAL_IncTick+0x20>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <HAL_IncTick+0x24>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4413      	add	r3, r2
 8000aa4:	4a04      	ldr	r2, [pc, #16]	; (8000ab8 <HAL_IncTick+0x24>)
 8000aa6:	6013      	str	r3, [r2, #0]
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	2000000c 	.word	0x2000000c
 8000ab8:	200000c4 	.word	0x200000c4

08000abc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac0:	4b03      	ldr	r3, [pc, #12]	; (8000ad0 <HAL_GetTick+0x14>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	200000c4 	.word	0x200000c4

08000ad4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000adc:	f7ff ffee 	bl	8000abc <HAL_GetTick>
 8000ae0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aec:	d005      	beq.n	8000afa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aee:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <HAL_Delay+0x44>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	461a      	mov	r2, r3
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	4413      	add	r3, r2
 8000af8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000afa:	bf00      	nop
 8000afc:	f7ff ffde 	bl	8000abc <HAL_GetTick>
 8000b00:	4602      	mov	r2, r0
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	1ad3      	subs	r3, r2, r3
 8000b06:	68fa      	ldr	r2, [r7, #12]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d8f7      	bhi.n	8000afc <HAL_Delay+0x28>
  {
  }
}
 8000b0c:	bf00      	nop
 8000b0e:	bf00      	nop
 8000b10:	3710      	adds	r7, #16
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	2000000c 	.word	0x2000000c

08000b1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	f003 0307 	and.w	r3, r3, #7
 8000b2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <__NVIC_SetPriorityGrouping+0x44>)
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b38:	4013      	ands	r3, r2
 8000b3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b4e:	4a04      	ldr	r2, [pc, #16]	; (8000b60 <__NVIC_SetPriorityGrouping+0x44>)
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	60d3      	str	r3, [r2, #12]
}
 8000b54:	bf00      	nop
 8000b56:	3714      	adds	r7, #20
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b68:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <__NVIC_GetPriorityGrouping+0x18>)
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	0a1b      	lsrs	r3, r3, #8
 8000b6e:	f003 0307 	and.w	r3, r3, #7
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	db0b      	blt.n	8000baa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b92:	79fb      	ldrb	r3, [r7, #7]
 8000b94:	f003 021f 	and.w	r2, r3, #31
 8000b98:	4907      	ldr	r1, [pc, #28]	; (8000bb8 <__NVIC_EnableIRQ+0x38>)
 8000b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9e:	095b      	lsrs	r3, r3, #5
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000baa:	bf00      	nop
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	e000e100 	.word	0xe000e100

08000bbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	6039      	str	r1, [r7, #0]
 8000bc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	db0a      	blt.n	8000be6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	b2da      	uxtb	r2, r3
 8000bd4:	490c      	ldr	r1, [pc, #48]	; (8000c08 <__NVIC_SetPriority+0x4c>)
 8000bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bda:	0112      	lsls	r2, r2, #4
 8000bdc:	b2d2      	uxtb	r2, r2
 8000bde:	440b      	add	r3, r1
 8000be0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000be4:	e00a      	b.n	8000bfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	b2da      	uxtb	r2, r3
 8000bea:	4908      	ldr	r1, [pc, #32]	; (8000c0c <__NVIC_SetPriority+0x50>)
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	f003 030f 	and.w	r3, r3, #15
 8000bf2:	3b04      	subs	r3, #4
 8000bf4:	0112      	lsls	r2, r2, #4
 8000bf6:	b2d2      	uxtb	r2, r2
 8000bf8:	440b      	add	r3, r1
 8000bfa:	761a      	strb	r2, [r3, #24]
}
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	e000e100 	.word	0xe000e100
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b089      	sub	sp, #36	; 0x24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	60b9      	str	r1, [r7, #8]
 8000c1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	f003 0307 	and.w	r3, r3, #7
 8000c22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	f1c3 0307 	rsb	r3, r3, #7
 8000c2a:	2b04      	cmp	r3, #4
 8000c2c:	bf28      	it	cs
 8000c2e:	2304      	movcs	r3, #4
 8000c30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	3304      	adds	r3, #4
 8000c36:	2b06      	cmp	r3, #6
 8000c38:	d902      	bls.n	8000c40 <NVIC_EncodePriority+0x30>
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	3b03      	subs	r3, #3
 8000c3e:	e000      	b.n	8000c42 <NVIC_EncodePriority+0x32>
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c44:	f04f 32ff 	mov.w	r2, #4294967295
 8000c48:	69bb      	ldr	r3, [r7, #24]
 8000c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4e:	43da      	mvns	r2, r3
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	401a      	ands	r2, r3
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c58:	f04f 31ff 	mov.w	r1, #4294967295
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c62:	43d9      	mvns	r1, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c68:	4313      	orrs	r3, r2
         );
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3724      	adds	r7, #36	; 0x24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
	...

08000c78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3b01      	subs	r3, #1
 8000c84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c88:	d301      	bcc.n	8000c8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e00f      	b.n	8000cae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c8e:	4a0a      	ldr	r2, [pc, #40]	; (8000cb8 <SysTick_Config+0x40>)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3b01      	subs	r3, #1
 8000c94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c96:	210f      	movs	r1, #15
 8000c98:	f04f 30ff 	mov.w	r0, #4294967295
 8000c9c:	f7ff ff8e 	bl	8000bbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ca0:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <SysTick_Config+0x40>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ca6:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <SysTick_Config+0x40>)
 8000ca8:	2207      	movs	r2, #7
 8000caa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cac:	2300      	movs	r3, #0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	e000e010 	.word	0xe000e010

08000cbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cc4:	6878      	ldr	r0, [r7, #4]
 8000cc6:	f7ff ff29 	bl	8000b1c <__NVIC_SetPriorityGrouping>
}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b086      	sub	sp, #24
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	4603      	mov	r3, r0
 8000cda:	60b9      	str	r1, [r7, #8]
 8000cdc:	607a      	str	r2, [r7, #4]
 8000cde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ce4:	f7ff ff3e 	bl	8000b64 <__NVIC_GetPriorityGrouping>
 8000ce8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	68b9      	ldr	r1, [r7, #8]
 8000cee:	6978      	ldr	r0, [r7, #20]
 8000cf0:	f7ff ff8e 	bl	8000c10 <NVIC_EncodePriority>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cfa:	4611      	mov	r1, r2
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff ff5d 	bl	8000bbc <__NVIC_SetPriority>
}
 8000d02:	bf00      	nop
 8000d04:	3718      	adds	r7, #24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b082      	sub	sp, #8
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	4603      	mov	r3, r0
 8000d12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff ff31 	bl	8000b80 <__NVIC_EnableIRQ>
}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b082      	sub	sp, #8
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f7ff ffa2 	bl	8000c78 <SysTick_Config>
 8000d34:	4603      	mov	r3, r0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	b083      	sub	sp, #12
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	2b02      	cmp	r3, #2
 8000d50:	d004      	beq.n	8000d5c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2280      	movs	r2, #128	; 0x80
 8000d56:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	e00c      	b.n	8000d76 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2205      	movs	r2, #5
 8000d60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f022 0201 	bic.w	r2, r2, #1
 8000d72:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000d82:	b480      	push	{r7}
 8000d84:	b083      	sub	sp, #12
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d90:	b2db      	uxtb	r3, r3
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
	...

08000da0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b089      	sub	sp, #36	; 0x24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000daa:	2300      	movs	r3, #0
 8000dac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000db6:	2300      	movs	r3, #0
 8000db8:	61fb      	str	r3, [r7, #28]
 8000dba:	e165      	b.n	8001088 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	697a      	ldr	r2, [r7, #20]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	f040 8154 	bne.w	8001082 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f003 0303 	and.w	r3, r3, #3
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d005      	beq.n	8000df2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	d130      	bne.n	8000e54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	2203      	movs	r2, #3
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	43db      	mvns	r3, r3
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	4013      	ands	r3, r2
 8000e08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	68da      	ldr	r2, [r3, #12]
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e28:	2201      	movs	r2, #1
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	43db      	mvns	r3, r3
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	4013      	ands	r3, r2
 8000e36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	091b      	lsrs	r3, r3, #4
 8000e3e:	f003 0201 	and.w	r2, r3, #1
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f003 0303 	and.w	r3, r3, #3
 8000e5c:	2b03      	cmp	r3, #3
 8000e5e:	d017      	beq.n	8000e90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	2203      	movs	r2, #3
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	4013      	ands	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	689a      	ldr	r2, [r3, #8]
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f003 0303 	and.w	r3, r3, #3
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d123      	bne.n	8000ee4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	08da      	lsrs	r2, r3, #3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3208      	adds	r2, #8
 8000ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	f003 0307 	and.w	r3, r3, #7
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	220f      	movs	r2, #15
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	691a      	ldr	r2, [r3, #16]
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	08da      	lsrs	r2, r3, #3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	3208      	adds	r2, #8
 8000ede:	69b9      	ldr	r1, [r7, #24]
 8000ee0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	2203      	movs	r2, #3
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f003 0203 	and.w	r2, r3, #3
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	f000 80ae 	beq.w	8001082 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	4b5d      	ldr	r3, [pc, #372]	; (80010a0 <HAL_GPIO_Init+0x300>)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2e:	4a5c      	ldr	r2, [pc, #368]	; (80010a0 <HAL_GPIO_Init+0x300>)
 8000f30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f34:	6453      	str	r3, [r2, #68]	; 0x44
 8000f36:	4b5a      	ldr	r3, [pc, #360]	; (80010a0 <HAL_GPIO_Init+0x300>)
 8000f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f42:	4a58      	ldr	r2, [pc, #352]	; (80010a4 <HAL_GPIO_Init+0x304>)
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	089b      	lsrs	r3, r3, #2
 8000f48:	3302      	adds	r3, #2
 8000f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	f003 0303 	and.w	r3, r3, #3
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	220f      	movs	r2, #15
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4013      	ands	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a4f      	ldr	r2, [pc, #316]	; (80010a8 <HAL_GPIO_Init+0x308>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d025      	beq.n	8000fba <HAL_GPIO_Init+0x21a>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a4e      	ldr	r2, [pc, #312]	; (80010ac <HAL_GPIO_Init+0x30c>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d01f      	beq.n	8000fb6 <HAL_GPIO_Init+0x216>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a4d      	ldr	r2, [pc, #308]	; (80010b0 <HAL_GPIO_Init+0x310>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d019      	beq.n	8000fb2 <HAL_GPIO_Init+0x212>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a4c      	ldr	r2, [pc, #304]	; (80010b4 <HAL_GPIO_Init+0x314>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d013      	beq.n	8000fae <HAL_GPIO_Init+0x20e>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a4b      	ldr	r2, [pc, #300]	; (80010b8 <HAL_GPIO_Init+0x318>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d00d      	beq.n	8000faa <HAL_GPIO_Init+0x20a>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a4a      	ldr	r2, [pc, #296]	; (80010bc <HAL_GPIO_Init+0x31c>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d007      	beq.n	8000fa6 <HAL_GPIO_Init+0x206>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a49      	ldr	r2, [pc, #292]	; (80010c0 <HAL_GPIO_Init+0x320>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d101      	bne.n	8000fa2 <HAL_GPIO_Init+0x202>
 8000f9e:	2306      	movs	r3, #6
 8000fa0:	e00c      	b.n	8000fbc <HAL_GPIO_Init+0x21c>
 8000fa2:	2307      	movs	r3, #7
 8000fa4:	e00a      	b.n	8000fbc <HAL_GPIO_Init+0x21c>
 8000fa6:	2305      	movs	r3, #5
 8000fa8:	e008      	b.n	8000fbc <HAL_GPIO_Init+0x21c>
 8000faa:	2304      	movs	r3, #4
 8000fac:	e006      	b.n	8000fbc <HAL_GPIO_Init+0x21c>
 8000fae:	2303      	movs	r3, #3
 8000fb0:	e004      	b.n	8000fbc <HAL_GPIO_Init+0x21c>
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	e002      	b.n	8000fbc <HAL_GPIO_Init+0x21c>
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e000      	b.n	8000fbc <HAL_GPIO_Init+0x21c>
 8000fba:	2300      	movs	r3, #0
 8000fbc:	69fa      	ldr	r2, [r7, #28]
 8000fbe:	f002 0203 	and.w	r2, r2, #3
 8000fc2:	0092      	lsls	r2, r2, #2
 8000fc4:	4093      	lsls	r3, r2
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fcc:	4935      	ldr	r1, [pc, #212]	; (80010a4 <HAL_GPIO_Init+0x304>)
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	089b      	lsrs	r3, r3, #2
 8000fd2:	3302      	adds	r3, #2
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fda:	4b3a      	ldr	r3, [pc, #232]	; (80010c4 <HAL_GPIO_Init+0x324>)
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d003      	beq.n	8000ffe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ffe:	4a31      	ldr	r2, [pc, #196]	; (80010c4 <HAL_GPIO_Init+0x324>)
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001004:	4b2f      	ldr	r3, [pc, #188]	; (80010c4 <HAL_GPIO_Init+0x324>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	43db      	mvns	r3, r3
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4013      	ands	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d003      	beq.n	8001028 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	4313      	orrs	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001028:	4a26      	ldr	r2, [pc, #152]	; (80010c4 <HAL_GPIO_Init+0x324>)
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800102e:	4b25      	ldr	r3, [pc, #148]	; (80010c4 <HAL_GPIO_Init+0x324>)
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	43db      	mvns	r3, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4013      	ands	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001052:	4a1c      	ldr	r2, [pc, #112]	; (80010c4 <HAL_GPIO_Init+0x324>)
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001058:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <HAL_GPIO_Init+0x324>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d003      	beq.n	800107c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	4313      	orrs	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800107c:	4a11      	ldr	r2, [pc, #68]	; (80010c4 <HAL_GPIO_Init+0x324>)
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	3301      	adds	r3, #1
 8001086:	61fb      	str	r3, [r7, #28]
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	2b0f      	cmp	r3, #15
 800108c:	f67f ae96 	bls.w	8000dbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001090:	bf00      	nop
 8001092:	bf00      	nop
 8001094:	3724      	adds	r7, #36	; 0x24
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40013800 	.word	0x40013800
 80010a8:	40020000 	.word	0x40020000
 80010ac:	40020400 	.word	0x40020400
 80010b0:	40020800 	.word	0x40020800
 80010b4:	40020c00 	.word	0x40020c00
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40021400 	.word	0x40021400
 80010c0:	40021800 	.word	0x40021800
 80010c4:	40013c00 	.word	0x40013c00

080010c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d101      	bne.n	80010da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e12b      	b.n	8001332 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d106      	bne.n	80010f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff fb64 	bl	80007bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2224      	movs	r2, #36	; 0x24
 80010f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f022 0201 	bic.w	r2, r2, #1
 800110a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800111a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800112a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800112c:	f001 ff84 	bl	8003038 <HAL_RCC_GetPCLK1Freq>
 8001130:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	4a81      	ldr	r2, [pc, #516]	; (800133c <HAL_I2C_Init+0x274>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d807      	bhi.n	800114c <HAL_I2C_Init+0x84>
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	4a80      	ldr	r2, [pc, #512]	; (8001340 <HAL_I2C_Init+0x278>)
 8001140:	4293      	cmp	r3, r2
 8001142:	bf94      	ite	ls
 8001144:	2301      	movls	r3, #1
 8001146:	2300      	movhi	r3, #0
 8001148:	b2db      	uxtb	r3, r3
 800114a:	e006      	b.n	800115a <HAL_I2C_Init+0x92>
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	4a7d      	ldr	r2, [pc, #500]	; (8001344 <HAL_I2C_Init+0x27c>)
 8001150:	4293      	cmp	r3, r2
 8001152:	bf94      	ite	ls
 8001154:	2301      	movls	r3, #1
 8001156:	2300      	movhi	r3, #0
 8001158:	b2db      	uxtb	r3, r3
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e0e7      	b.n	8001332 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	4a78      	ldr	r2, [pc, #480]	; (8001348 <HAL_I2C_Init+0x280>)
 8001166:	fba2 2303 	umull	r2, r3, r2, r3
 800116a:	0c9b      	lsrs	r3, r3, #18
 800116c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	68ba      	ldr	r2, [r7, #8]
 800117e:	430a      	orrs	r2, r1
 8001180:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	6a1b      	ldr	r3, [r3, #32]
 8001188:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	4a6a      	ldr	r2, [pc, #424]	; (800133c <HAL_I2C_Init+0x274>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d802      	bhi.n	800119c <HAL_I2C_Init+0xd4>
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	3301      	adds	r3, #1
 800119a:	e009      	b.n	80011b0 <HAL_I2C_Init+0xe8>
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80011a2:	fb02 f303 	mul.w	r3, r2, r3
 80011a6:	4a69      	ldr	r2, [pc, #420]	; (800134c <HAL_I2C_Init+0x284>)
 80011a8:	fba2 2303 	umull	r2, r3, r2, r3
 80011ac:	099b      	lsrs	r3, r3, #6
 80011ae:	3301      	adds	r3, #1
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	6812      	ldr	r2, [r2, #0]
 80011b4:	430b      	orrs	r3, r1
 80011b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	69db      	ldr	r3, [r3, #28]
 80011be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80011c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	495c      	ldr	r1, [pc, #368]	; (800133c <HAL_I2C_Init+0x274>)
 80011cc:	428b      	cmp	r3, r1
 80011ce:	d819      	bhi.n	8001204 <HAL_I2C_Init+0x13c>
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	1e59      	subs	r1, r3, #1
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	fbb1 f3f3 	udiv	r3, r1, r3
 80011de:	1c59      	adds	r1, r3, #1
 80011e0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80011e4:	400b      	ands	r3, r1
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d00a      	beq.n	8001200 <HAL_I2C_Init+0x138>
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	1e59      	subs	r1, r3, #1
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80011f8:	3301      	adds	r3, #1
 80011fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011fe:	e051      	b.n	80012a4 <HAL_I2C_Init+0x1dc>
 8001200:	2304      	movs	r3, #4
 8001202:	e04f      	b.n	80012a4 <HAL_I2C_Init+0x1dc>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d111      	bne.n	8001230 <HAL_I2C_Init+0x168>
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	1e58      	subs	r0, r3, #1
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6859      	ldr	r1, [r3, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	440b      	add	r3, r1
 800121a:	fbb0 f3f3 	udiv	r3, r0, r3
 800121e:	3301      	adds	r3, #1
 8001220:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001224:	2b00      	cmp	r3, #0
 8001226:	bf0c      	ite	eq
 8001228:	2301      	moveq	r3, #1
 800122a:	2300      	movne	r3, #0
 800122c:	b2db      	uxtb	r3, r3
 800122e:	e012      	b.n	8001256 <HAL_I2C_Init+0x18e>
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	1e58      	subs	r0, r3, #1
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6859      	ldr	r1, [r3, #4]
 8001238:	460b      	mov	r3, r1
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	440b      	add	r3, r1
 800123e:	0099      	lsls	r1, r3, #2
 8001240:	440b      	add	r3, r1
 8001242:	fbb0 f3f3 	udiv	r3, r0, r3
 8001246:	3301      	adds	r3, #1
 8001248:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800124c:	2b00      	cmp	r3, #0
 800124e:	bf0c      	ite	eq
 8001250:	2301      	moveq	r3, #1
 8001252:	2300      	movne	r3, #0
 8001254:	b2db      	uxtb	r3, r3
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <HAL_I2C_Init+0x196>
 800125a:	2301      	movs	r3, #1
 800125c:	e022      	b.n	80012a4 <HAL_I2C_Init+0x1dc>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d10e      	bne.n	8001284 <HAL_I2C_Init+0x1bc>
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	1e58      	subs	r0, r3, #1
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6859      	ldr	r1, [r3, #4]
 800126e:	460b      	mov	r3, r1
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	440b      	add	r3, r1
 8001274:	fbb0 f3f3 	udiv	r3, r0, r3
 8001278:	3301      	adds	r3, #1
 800127a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800127e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001282:	e00f      	b.n	80012a4 <HAL_I2C_Init+0x1dc>
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	1e58      	subs	r0, r3, #1
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6859      	ldr	r1, [r3, #4]
 800128c:	460b      	mov	r3, r1
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	440b      	add	r3, r1
 8001292:	0099      	lsls	r1, r3, #2
 8001294:	440b      	add	r3, r1
 8001296:	fbb0 f3f3 	udiv	r3, r0, r3
 800129a:	3301      	adds	r3, #1
 800129c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012a4:	6879      	ldr	r1, [r7, #4]
 80012a6:	6809      	ldr	r1, [r1, #0]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	69da      	ldr	r2, [r3, #28]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6a1b      	ldr	r3, [r3, #32]
 80012be:	431a      	orrs	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	430a      	orrs	r2, r1
 80012c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80012d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	6911      	ldr	r1, [r2, #16]
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	68d2      	ldr	r2, [r2, #12]
 80012de:	4311      	orrs	r1, r2
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	6812      	ldr	r2, [r2, #0]
 80012e4:	430b      	orrs	r3, r1
 80012e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	68db      	ldr	r3, [r3, #12]
 80012ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	695a      	ldr	r2, [r3, #20]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	699b      	ldr	r3, [r3, #24]
 80012fa:	431a      	orrs	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	430a      	orrs	r2, r1
 8001302:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f042 0201 	orr.w	r2, r2, #1
 8001312:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2220      	movs	r2, #32
 800131e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2200      	movs	r2, #0
 8001326:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2200      	movs	r2, #0
 800132c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	000186a0 	.word	0x000186a0
 8001340:	001e847f 	.word	0x001e847f
 8001344:	003d08ff 	.word	0x003d08ff
 8001348:	431bde83 	.word	0x431bde83
 800134c:	10624dd3 	.word	0x10624dd3

08001350 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8001350:	b480      	push	{r7}
 8001352:	b087      	sub	sp, #28
 8001354:	af00      	add	r7, sp, #0
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	607a      	str	r2, [r7, #4]
 800135a:	461a      	mov	r2, r3
 800135c:	460b      	mov	r3, r1
 800135e:	817b      	strh	r3, [r7, #10]
 8001360:	4613      	mov	r3, r2
 8001362:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800136e:	b2db      	uxtb	r3, r3
 8001370:	2b20      	cmp	r3, #32
 8001372:	f040 8085 	bne.w	8001480 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8001376:	4b46      	ldr	r3, [pc, #280]	; (8001490 <HAL_I2C_Master_Transmit_IT+0x140>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	08db      	lsrs	r3, r3, #3
 800137c:	4a45      	ldr	r2, [pc, #276]	; (8001494 <HAL_I2C_Master_Transmit_IT+0x144>)
 800137e:	fba2 2303 	umull	r2, r3, r2, r3
 8001382:	0a1a      	lsrs	r2, r3, #8
 8001384:	4613      	mov	r3, r2
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	4413      	add	r3, r2
 800138a:	009a      	lsls	r2, r3, #2
 800138c:	4413      	add	r3, r2
 800138e:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	3b01      	subs	r3, #1
 8001394:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d116      	bne.n	80013ca <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	2200      	movs	r2, #0
 80013a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	2220      	movs	r2, #32
 80013a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	f043 0220 	orr.w	r2, r3, #32
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e05b      	b.n	8001482 <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d0db      	beq.n	8001390 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d101      	bne.n	80013e6 <HAL_I2C_Master_Transmit_IT+0x96>
 80013e2:	2302      	movs	r3, #2
 80013e4:	e04d      	b.n	8001482 <HAL_I2C_Master_Transmit_IT+0x132>
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	2201      	movs	r2, #1
 80013ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 0301 	and.w	r3, r3, #1
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d007      	beq.n	800140c <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f042 0201 	orr.w	r2, r2, #1
 800140a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800141a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2221      	movs	r2, #33	; 0x21
 8001420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	2210      	movs	r2, #16
 8001428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2200      	movs	r2, #0
 8001430:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	893a      	ldrh	r2, [r7, #8]
 800143c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001442:	b29a      	uxth	r2, r3
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	4a13      	ldr	r2, [pc, #76]	; (8001498 <HAL_I2C_Master_Transmit_IT+0x148>)
 800144c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800144e:	897a      	ldrh	r2, [r7, #10]
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2200      	movs	r2, #0
 8001458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	685a      	ldr	r2, [r3, #4]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800146a:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800147a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800147c:	2300      	movs	r3, #0
 800147e:	e000      	b.n	8001482 <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8001480:	2302      	movs	r3, #2
  }
}
 8001482:	4618      	mov	r0, r3
 8001484:	371c      	adds	r7, #28
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	20000004 	.word	0x20000004
 8001494:	14f8b589 	.word	0x14f8b589
 8001498:	ffff0000 	.word	0xffff0000

0800149c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b088      	sub	sp, #32
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80014a4:	2300      	movs	r3, #0
 80014a6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80014bc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014c4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80014c6:	7bfb      	ldrb	r3, [r7, #15]
 80014c8:	2b10      	cmp	r3, #16
 80014ca:	d003      	beq.n	80014d4 <HAL_I2C_EV_IRQHandler+0x38>
 80014cc:	7bfb      	ldrb	r3, [r7, #15]
 80014ce:	2b40      	cmp	r3, #64	; 0x40
 80014d0:	f040 80c1 	bne.w	8001656 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	699b      	ldr	r3, [r3, #24]
 80014da:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d10d      	bne.n	800150a <HAL_I2C_EV_IRQHandler+0x6e>
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80014f4:	d003      	beq.n	80014fe <HAL_I2C_EV_IRQHandler+0x62>
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80014fc:	d101      	bne.n	8001502 <HAL_I2C_EV_IRQHandler+0x66>
 80014fe:	2301      	movs	r3, #1
 8001500:	e000      	b.n	8001504 <HAL_I2C_EV_IRQHandler+0x68>
 8001502:	2300      	movs	r3, #0
 8001504:	2b01      	cmp	r3, #1
 8001506:	f000 8132 	beq.w	800176e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	f003 0301 	and.w	r3, r3, #1
 8001510:	2b00      	cmp	r3, #0
 8001512:	d00c      	beq.n	800152e <HAL_I2C_EV_IRQHandler+0x92>
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	0a5b      	lsrs	r3, r3, #9
 8001518:	f003 0301 	and.w	r3, r3, #1
 800151c:	2b00      	cmp	r3, #0
 800151e:	d006      	beq.n	800152e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f001 fc7b 	bl	8002e1c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f000 fd83 	bl	8002032 <I2C_Master_SB>
 800152c:	e092      	b.n	8001654 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	08db      	lsrs	r3, r3, #3
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	2b00      	cmp	r3, #0
 8001538:	d009      	beq.n	800154e <HAL_I2C_EV_IRQHandler+0xb2>
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	0a5b      	lsrs	r3, r3, #9
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	2b00      	cmp	r3, #0
 8001544:	d003      	beq.n	800154e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f000 fdf9 	bl	800213e <I2C_Master_ADD10>
 800154c:	e082      	b.n	8001654 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	085b      	lsrs	r3, r3, #1
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	2b00      	cmp	r3, #0
 8001558:	d009      	beq.n	800156e <HAL_I2C_EV_IRQHandler+0xd2>
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	0a5b      	lsrs	r3, r3, #9
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f000 fe13 	bl	8002192 <I2C_Master_ADDR>
 800156c:	e072      	b.n	8001654 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	089b      	lsrs	r3, r3, #2
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	2b00      	cmp	r3, #0
 8001578:	d03b      	beq.n	80015f2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001584:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001588:	f000 80f3 	beq.w	8001772 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	09db      	lsrs	r3, r3, #7
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	2b00      	cmp	r3, #0
 8001596:	d00f      	beq.n	80015b8 <HAL_I2C_EV_IRQHandler+0x11c>
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	0a9b      	lsrs	r3, r3, #10
 800159c:	f003 0301 	and.w	r3, r3, #1
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d009      	beq.n	80015b8 <HAL_I2C_EV_IRQHandler+0x11c>
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	089b      	lsrs	r3, r3, #2
 80015a8:	f003 0301 	and.w	r3, r3, #1
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d103      	bne.n	80015b8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f000 f9f3 	bl	800199c <I2C_MasterTransmit_TXE>
 80015b6:	e04d      	b.n	8001654 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	089b      	lsrs	r3, r3, #2
 80015bc:	f003 0301 	and.w	r3, r3, #1
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	f000 80d6 	beq.w	8001772 <HAL_I2C_EV_IRQHandler+0x2d6>
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	0a5b      	lsrs	r3, r3, #9
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	f000 80cf 	beq.w	8001772 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80015d4:	7bbb      	ldrb	r3, [r7, #14]
 80015d6:	2b21      	cmp	r3, #33	; 0x21
 80015d8:	d103      	bne.n	80015e2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f000 fa7a 	bl	8001ad4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80015e0:	e0c7      	b.n	8001772 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80015e2:	7bfb      	ldrb	r3, [r7, #15]
 80015e4:	2b40      	cmp	r3, #64	; 0x40
 80015e6:	f040 80c4 	bne.w	8001772 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f000 fae8 	bl	8001bc0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80015f0:	e0bf      	b.n	8001772 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001600:	f000 80b7 	beq.w	8001772 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	099b      	lsrs	r3, r3, #6
 8001608:	f003 0301 	and.w	r3, r3, #1
 800160c:	2b00      	cmp	r3, #0
 800160e:	d00f      	beq.n	8001630 <HAL_I2C_EV_IRQHandler+0x194>
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	0a9b      	lsrs	r3, r3, #10
 8001614:	f003 0301 	and.w	r3, r3, #1
 8001618:	2b00      	cmp	r3, #0
 800161a:	d009      	beq.n	8001630 <HAL_I2C_EV_IRQHandler+0x194>
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	089b      	lsrs	r3, r3, #2
 8001620:	f003 0301 	and.w	r3, r3, #1
 8001624:	2b00      	cmp	r3, #0
 8001626:	d103      	bne.n	8001630 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f000 fb5d 	bl	8001ce8 <I2C_MasterReceive_RXNE>
 800162e:	e011      	b.n	8001654 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	089b      	lsrs	r3, r3, #2
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	2b00      	cmp	r3, #0
 800163a:	f000 809a 	beq.w	8001772 <HAL_I2C_EV_IRQHandler+0x2d6>
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	0a5b      	lsrs	r3, r3, #9
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	2b00      	cmp	r3, #0
 8001648:	f000 8093 	beq.w	8001772 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f000 fc06 	bl	8001e5e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001652:	e08e      	b.n	8001772 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001654:	e08d      	b.n	8001772 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	2b00      	cmp	r3, #0
 800165c:	d004      	beq.n	8001668 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	695b      	ldr	r3, [r3, #20]
 8001664:	61fb      	str	r3, [r7, #28]
 8001666:	e007      	b.n	8001678 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	695b      	ldr	r3, [r3, #20]
 8001676:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	085b      	lsrs	r3, r3, #1
 800167c:	f003 0301 	and.w	r3, r3, #1
 8001680:	2b00      	cmp	r3, #0
 8001682:	d012      	beq.n	80016aa <HAL_I2C_EV_IRQHandler+0x20e>
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	0a5b      	lsrs	r3, r3, #9
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	2b00      	cmp	r3, #0
 800168e:	d00c      	beq.n	80016aa <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001694:	2b00      	cmp	r3, #0
 8001696:	d003      	beq.n	80016a0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80016a0:	69b9      	ldr	r1, [r7, #24]
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f000 ffc4 	bl	8002630 <I2C_Slave_ADDR>
 80016a8:	e066      	b.n	8001778 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	091b      	lsrs	r3, r3, #4
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d009      	beq.n	80016ca <HAL_I2C_EV_IRQHandler+0x22e>
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	0a5b      	lsrs	r3, r3, #9
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f000 fffe 	bl	80026c4 <I2C_Slave_STOPF>
 80016c8:	e056      	b.n	8001778 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80016ca:	7bbb      	ldrb	r3, [r7, #14]
 80016cc:	2b21      	cmp	r3, #33	; 0x21
 80016ce:	d002      	beq.n	80016d6 <HAL_I2C_EV_IRQHandler+0x23a>
 80016d0:	7bbb      	ldrb	r3, [r7, #14]
 80016d2:	2b29      	cmp	r3, #41	; 0x29
 80016d4:	d125      	bne.n	8001722 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	09db      	lsrs	r3, r3, #7
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d00f      	beq.n	8001702 <HAL_I2C_EV_IRQHandler+0x266>
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	0a9b      	lsrs	r3, r3, #10
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d009      	beq.n	8001702 <HAL_I2C_EV_IRQHandler+0x266>
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	089b      	lsrs	r3, r3, #2
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d103      	bne.n	8001702 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f000 feda 	bl	80024b4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001700:	e039      	b.n	8001776 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	089b      	lsrs	r3, r3, #2
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	2b00      	cmp	r3, #0
 800170c:	d033      	beq.n	8001776 <HAL_I2C_EV_IRQHandler+0x2da>
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	0a5b      	lsrs	r3, r3, #9
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	2b00      	cmp	r3, #0
 8001718:	d02d      	beq.n	8001776 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f000 ff07 	bl	800252e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001720:	e029      	b.n	8001776 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	099b      	lsrs	r3, r3, #6
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	2b00      	cmp	r3, #0
 800172c:	d00f      	beq.n	800174e <HAL_I2C_EV_IRQHandler+0x2b2>
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	0a9b      	lsrs	r3, r3, #10
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	2b00      	cmp	r3, #0
 8001738:	d009      	beq.n	800174e <HAL_I2C_EV_IRQHandler+0x2b2>
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	089b      	lsrs	r3, r3, #2
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	2b00      	cmp	r3, #0
 8001744:	d103      	bne.n	800174e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f000 ff12 	bl	8002570 <I2C_SlaveReceive_RXNE>
 800174c:	e014      	b.n	8001778 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	089b      	lsrs	r3, r3, #2
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	2b00      	cmp	r3, #0
 8001758:	d00e      	beq.n	8001778 <HAL_I2C_EV_IRQHandler+0x2dc>
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	0a5b      	lsrs	r3, r3, #9
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	2b00      	cmp	r3, #0
 8001764:	d008      	beq.n	8001778 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f000 ff40 	bl	80025ec <I2C_SlaveReceive_BTF>
 800176c:	e004      	b.n	8001778 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800176e:	bf00      	nop
 8001770:	e002      	b.n	8001778 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001772:	bf00      	nop
 8001774:	e000      	b.n	8001778 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001776:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001778:	3720      	adds	r7, #32
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b08a      	sub	sp, #40	; 0x28
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	695b      	ldr	r3, [r3, #20]
 800178c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001796:	2300      	movs	r3, #0
 8001798:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80017a0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80017a2:	6a3b      	ldr	r3, [r7, #32]
 80017a4:	0a1b      	lsrs	r3, r3, #8
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d00e      	beq.n	80017cc <HAL_I2C_ER_IRQHandler+0x4e>
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	0a1b      	lsrs	r3, r3, #8
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d008      	beq.n	80017cc <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80017ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80017ca:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80017cc:	6a3b      	ldr	r3, [r7, #32]
 80017ce:	0a5b      	lsrs	r3, r3, #9
 80017d0:	f003 0301 	and.w	r3, r3, #1
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d00e      	beq.n	80017f6 <HAL_I2C_ER_IRQHandler+0x78>
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	0a1b      	lsrs	r3, r3, #8
 80017dc:	f003 0301 	and.w	r3, r3, #1
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d008      	beq.n	80017f6 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80017e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e6:	f043 0302 	orr.w	r3, r3, #2
 80017ea:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80017f4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80017f6:	6a3b      	ldr	r3, [r7, #32]
 80017f8:	0a9b      	lsrs	r3, r3, #10
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d03f      	beq.n	8001882 <HAL_I2C_ER_IRQHandler+0x104>
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	0a1b      	lsrs	r3, r3, #8
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	2b00      	cmp	r3, #0
 800180c:	d039      	beq.n	8001882 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800180e:	7efb      	ldrb	r3, [r7, #27]
 8001810:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001816:	b29b      	uxth	r3, r3
 8001818:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001820:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001828:	7ebb      	ldrb	r3, [r7, #26]
 800182a:	2b20      	cmp	r3, #32
 800182c:	d112      	bne.n	8001854 <HAL_I2C_ER_IRQHandler+0xd6>
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d10f      	bne.n	8001854 <HAL_I2C_ER_IRQHandler+0xd6>
 8001834:	7cfb      	ldrb	r3, [r7, #19]
 8001836:	2b21      	cmp	r3, #33	; 0x21
 8001838:	d008      	beq.n	800184c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800183a:	7cfb      	ldrb	r3, [r7, #19]
 800183c:	2b29      	cmp	r3, #41	; 0x29
 800183e:	d005      	beq.n	800184c <HAL_I2C_ER_IRQHandler+0xce>
 8001840:	7cfb      	ldrb	r3, [r7, #19]
 8001842:	2b28      	cmp	r3, #40	; 0x28
 8001844:	d106      	bne.n	8001854 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2b21      	cmp	r3, #33	; 0x21
 800184a:	d103      	bne.n	8001854 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f001 f869 	bl	8002924 <I2C_Slave_AF>
 8001852:	e016      	b.n	8001882 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800185c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800185e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001860:	f043 0304 	orr.w	r3, r3, #4
 8001864:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001866:	7efb      	ldrb	r3, [r7, #27]
 8001868:	2b10      	cmp	r3, #16
 800186a:	d002      	beq.n	8001872 <HAL_I2C_ER_IRQHandler+0xf4>
 800186c:	7efb      	ldrb	r3, [r7, #27]
 800186e:	2b40      	cmp	r3, #64	; 0x40
 8001870:	d107      	bne.n	8001882 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001880:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001882:	6a3b      	ldr	r3, [r7, #32]
 8001884:	0adb      	lsrs	r3, r3, #11
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	2b00      	cmp	r3, #0
 800188c:	d00e      	beq.n	80018ac <HAL_I2C_ER_IRQHandler+0x12e>
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	0a1b      	lsrs	r3, r3, #8
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	2b00      	cmp	r3, #0
 8001898:	d008      	beq.n	80018ac <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800189a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189c:	f043 0308 	orr.w	r3, r3, #8
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80018aa:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80018ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d008      	beq.n	80018c4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	431a      	orrs	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f001 f8a0 	bl	8002a04 <I2C_ITError>
  }
}
 80018c4:	bf00      	nop
 80018c6:	3728      	adds	r7, #40	; 0x28
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	460b      	mov	r3, r1
 8001926:	70fb      	strb	r3, [r7, #3]
 8001928:	4613      	mov	r3, r2
 800192a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019aa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80019b2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d150      	bne.n	8001a64 <I2C_MasterTransmit_TXE+0xc8>
 80019c2:	7bfb      	ldrb	r3, [r7, #15]
 80019c4:	2b21      	cmp	r3, #33	; 0x21
 80019c6:	d14d      	bne.n	8001a64 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	2b08      	cmp	r3, #8
 80019cc:	d01d      	beq.n	8001a0a <I2C_MasterTransmit_TXE+0x6e>
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	2b20      	cmp	r3, #32
 80019d2:	d01a      	beq.n	8001a0a <I2C_MasterTransmit_TXE+0x6e>
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80019da:	d016      	beq.n	8001a0a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	685a      	ldr	r2, [r3, #4]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80019ea:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2211      	movs	r2, #17
 80019f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2220      	movs	r2, #32
 80019fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7ff ff62 	bl	80018cc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001a08:	e060      	b.n	8001acc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	685a      	ldr	r2, [r3, #4]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001a18:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a28:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2220      	movs	r2, #32
 8001a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	2b40      	cmp	r3, #64	; 0x40
 8001a42:	d107      	bne.n	8001a54 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7ff ff7d 	bl	800194c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001a52:	e03b      	b.n	8001acc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7ff ff35 	bl	80018cc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001a62:	e033      	b.n	8001acc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
 8001a66:	2b21      	cmp	r3, #33	; 0x21
 8001a68:	d005      	beq.n	8001a76 <I2C_MasterTransmit_TXE+0xda>
 8001a6a:	7bbb      	ldrb	r3, [r7, #14]
 8001a6c:	2b40      	cmp	r3, #64	; 0x40
 8001a6e:	d12d      	bne.n	8001acc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001a70:	7bfb      	ldrb	r3, [r7, #15]
 8001a72:	2b22      	cmp	r3, #34	; 0x22
 8001a74:	d12a      	bne.n	8001acc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d108      	bne.n	8001a92 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	685a      	ldr	r2, [r3, #4]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a8e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001a90:	e01c      	b.n	8001acc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b40      	cmp	r3, #64	; 0x40
 8001a9c:	d103      	bne.n	8001aa6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 f88e 	bl	8001bc0 <I2C_MemoryTransmit_TXE_BTF>
}
 8001aa4:	e012      	b.n	8001acc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aaa:	781a      	ldrb	r2, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab6:	1c5a      	adds	r2, r3, #1
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001aca:	e7ff      	b.n	8001acc <I2C_MasterTransmit_TXE+0x130>
 8001acc:	bf00      	nop
 8001ace:	3710      	adds	r7, #16
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b21      	cmp	r3, #33	; 0x21
 8001aec:	d164      	bne.n	8001bb8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d012      	beq.n	8001b1e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afc:	781a      	ldrb	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b08:	1c5a      	adds	r2, r3, #1
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	3b01      	subs	r3, #1
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001b1c:	e04c      	b.n	8001bb8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2b08      	cmp	r3, #8
 8001b22:	d01d      	beq.n	8001b60 <I2C_MasterTransmit_BTF+0x8c>
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2b20      	cmp	r3, #32
 8001b28:	d01a      	beq.n	8001b60 <I2C_MasterTransmit_BTF+0x8c>
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001b30:	d016      	beq.n	8001b60 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	685a      	ldr	r2, [r3, #4]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001b40:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2211      	movs	r2, #17
 8001b46:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2220      	movs	r2, #32
 8001b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f7ff feb7 	bl	80018cc <HAL_I2C_MasterTxCpltCallback>
}
 8001b5e:	e02b      	b.n	8001bb8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	685a      	ldr	r2, [r3, #4]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001b6e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b7e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2220      	movs	r2, #32
 8001b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b40      	cmp	r3, #64	; 0x40
 8001b98:	d107      	bne.n	8001baa <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f7ff fed2 	bl	800194c <HAL_I2C_MemTxCpltCallback>
}
 8001ba8:	e006      	b.n	8001bb8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7ff fe8a 	bl	80018cc <HAL_I2C_MasterTxCpltCallback>
}
 8001bb8:	bf00      	nop
 8001bba:	3710      	adds	r7, #16
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bce:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d11d      	bne.n	8001c14 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d10b      	bne.n	8001bf8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001be4:	b2da      	uxtb	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bf0:	1c9a      	adds	r2, r3, #2
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8001bf6:	e073      	b.n	8001ce0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	121b      	asrs	r3, r3, #8
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c0c:	1c5a      	adds	r2, r3, #1
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001c12:	e065      	b.n	8001ce0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d10b      	bne.n	8001c34 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c20:	b2da      	uxtb	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c2c:	1c5a      	adds	r2, r3, #1
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001c32:	e055      	b.n	8001ce0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d151      	bne.n	8001ce0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001c3c:	7bfb      	ldrb	r3, [r7, #15]
 8001c3e:	2b22      	cmp	r3, #34	; 0x22
 8001c40:	d10d      	bne.n	8001c5e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c50:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c56:	1c5a      	adds	r2, r3, #1
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001c5c:	e040      	b.n	8001ce0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d015      	beq.n	8001c94 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8001c68:	7bfb      	ldrb	r3, [r7, #15]
 8001c6a:	2b21      	cmp	r3, #33	; 0x21
 8001c6c:	d112      	bne.n	8001c94 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c72:	781a      	ldrb	r2, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7e:	1c5a      	adds	r2, r3, #1
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001c92:	e025      	b.n	8001ce0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d120      	bne.n	8001ce0 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8001c9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ca0:	2b21      	cmp	r3, #33	; 0x21
 8001ca2:	d11d      	bne.n	8001ce0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	685a      	ldr	r2, [r3, #4]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001cb2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cc2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2220      	movs	r2, #32
 8001cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f7ff fe36 	bl	800194c <HAL_I2C_MemTxCpltCallback>
}
 8001ce0:	bf00      	nop
 8001ce2:	3710      	adds	r7, #16
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b22      	cmp	r3, #34	; 0x22
 8001cfa:	f040 80ac 	bne.w	8001e56 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2b03      	cmp	r3, #3
 8001d0a:	d921      	bls.n	8001d50 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	691a      	ldr	r2, [r3, #16]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d16:	b2d2      	uxtb	r2, r2
 8001d18:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1e:	1c5a      	adds	r2, r3, #1
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	2b03      	cmp	r3, #3
 8001d3a:	f040 808c 	bne.w	8001e56 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	685a      	ldr	r2, [r3, #4]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d4c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8001d4e:	e082      	b.n	8001e56 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d075      	beq.n	8001e44 <I2C_MasterReceive_RXNE+0x15c>
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d002      	beq.n	8001d64 <I2C_MasterReceive_RXNE+0x7c>
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d16f      	bne.n	8001e44 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f001 f827 	bl	8002db8 <I2C_WaitOnSTOPRequestThroughIT>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d142      	bne.n	8001df6 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d7e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	685a      	ldr	r2, [r3, #4]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001d8e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	691a      	ldr	r2, [r3, #16]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9a:	b2d2      	uxtb	r2, r2
 8001d9c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da2:	1c5a      	adds	r2, r3, #1
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	3b01      	subs	r3, #1
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2220      	movs	r2, #32
 8001dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b40      	cmp	r3, #64	; 0x40
 8001dc8:	d10a      	bne.n	8001de0 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f7ff fdc1 	bl	8001960 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001dde:	e03a      	b.n	8001e56 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2212      	movs	r2, #18
 8001dec:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f7ff fd76 	bl	80018e0 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001df4:	e02f      	b.n	8001e56 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	685a      	ldr	r2, [r3, #4]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001e04:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	691a      	ldr	r2, [r3, #16]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e10:	b2d2      	uxtb	r2, r2
 8001e12:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e18:	1c5a      	adds	r2, r3, #1
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	3b01      	subs	r3, #1
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2220      	movs	r2, #32
 8001e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f7ff fd99 	bl	8001974 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001e42:	e008      	b.n	8001e56 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	685a      	ldr	r2, [r3, #4]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e52:	605a      	str	r2, [r3, #4]
}
 8001e54:	e7ff      	b.n	8001e56 <I2C_MasterReceive_RXNE+0x16e>
 8001e56:	bf00      	nop
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b084      	sub	sp, #16
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	2b04      	cmp	r3, #4
 8001e74:	d11b      	bne.n	8001eae <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	685a      	ldr	r2, [r3, #4]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e84:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	691a      	ldr	r2, [r3, #16]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e90:	b2d2      	uxtb	r2, r2
 8001e92:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e98:	1c5a      	adds	r2, r3, #1
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8001eac:	e0bd      	b.n	800202a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	2b03      	cmp	r3, #3
 8001eb6:	d129      	bne.n	8001f0c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	685a      	ldr	r2, [r3, #4]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ec6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2b04      	cmp	r3, #4
 8001ecc:	d00a      	beq.n	8001ee4 <I2C_MasterReceive_BTF+0x86>
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d007      	beq.n	8001ee4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ee2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	691a      	ldr	r2, [r3, #16]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eee:	b2d2      	uxtb	r2, r2
 8001ef0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef6:	1c5a      	adds	r2, r3, #1
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	3b01      	subs	r3, #1
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001f0a:	e08e      	b.n	800202a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d176      	bne.n	8002004 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d002      	beq.n	8001f22 <I2C_MasterReceive_BTF+0xc4>
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2b10      	cmp	r3, #16
 8001f20:	d108      	bne.n	8001f34 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	e019      	b.n	8001f68 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2b04      	cmp	r3, #4
 8001f38:	d002      	beq.n	8001f40 <I2C_MasterReceive_BTF+0xe2>
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d108      	bne.n	8001f52 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	e00a      	b.n	8001f68 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2b10      	cmp	r3, #16
 8001f56:	d007      	beq.n	8001f68 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f66:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	691a      	ldr	r2, [r3, #16]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f72:	b2d2      	uxtb	r2, r2
 8001f74:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7a:	1c5a      	adds	r2, r3, #1
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	3b01      	subs	r3, #1
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	691a      	ldr	r2, [r3, #16]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f98:	b2d2      	uxtb	r2, r2
 8001f9a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa0:	1c5a      	adds	r2, r3, #1
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	3b01      	subs	r3, #1
 8001fae:	b29a      	uxth	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001fc2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2220      	movs	r2, #32
 8001fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	2b40      	cmp	r3, #64	; 0x40
 8001fd6:	d10a      	bne.n	8001fee <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7ff fcba 	bl	8001960 <HAL_I2C_MemRxCpltCallback>
}
 8001fec:	e01d      	b.n	800202a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2212      	movs	r2, #18
 8001ffa:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f7ff fc6f 	bl	80018e0 <HAL_I2C_MasterRxCpltCallback>
}
 8002002:	e012      	b.n	800202a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	691a      	ldr	r2, [r3, #16]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200e:	b2d2      	uxtb	r2, r2
 8002010:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002016:	1c5a      	adds	r2, r3, #1
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002020:	b29b      	uxth	r3, r3
 8002022:	3b01      	subs	r3, #1
 8002024:	b29a      	uxth	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800202a:	bf00      	nop
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002032:	b480      	push	{r7}
 8002034:	b083      	sub	sp, #12
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b40      	cmp	r3, #64	; 0x40
 8002044:	d117      	bne.n	8002076 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800204a:	2b00      	cmp	r3, #0
 800204c:	d109      	bne.n	8002062 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002052:	b2db      	uxtb	r3, r3
 8002054:	461a      	mov	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800205e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002060:	e067      	b.n	8002132 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002066:	b2db      	uxtb	r3, r3
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	b2da      	uxtb	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	611a      	str	r2, [r3, #16]
}
 8002074:	e05d      	b.n	8002132 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800207e:	d133      	bne.n	80020e8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002086:	b2db      	uxtb	r3, r3
 8002088:	2b21      	cmp	r3, #33	; 0x21
 800208a:	d109      	bne.n	80020a0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002090:	b2db      	uxtb	r3, r3
 8002092:	461a      	mov	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800209c:	611a      	str	r2, [r3, #16]
 800209e:	e008      	b.n	80020b2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	f043 0301 	orr.w	r3, r3, #1
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d004      	beq.n	80020c4 <I2C_Master_SB+0x92>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d108      	bne.n	80020d6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d032      	beq.n	8002132 <I2C_Master_SB+0x100>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d02d      	beq.n	8002132 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	685a      	ldr	r2, [r3, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020e4:	605a      	str	r2, [r3, #4]
}
 80020e6:	e024      	b.n	8002132 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d10e      	bne.n	800210e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	11db      	asrs	r3, r3, #7
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	f003 0306 	and.w	r3, r3, #6
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	f063 030f 	orn	r3, r3, #15
 8002104:	b2da      	uxtb	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	611a      	str	r2, [r3, #16]
}
 800210c:	e011      	b.n	8002132 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002112:	2b01      	cmp	r3, #1
 8002114:	d10d      	bne.n	8002132 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211a:	b29b      	uxth	r3, r3
 800211c:	11db      	asrs	r3, r3, #7
 800211e:	b2db      	uxtb	r3, r3
 8002120:	f003 0306 	and.w	r3, r3, #6
 8002124:	b2db      	uxtb	r3, r3
 8002126:	f063 030e 	orn	r3, r3, #14
 800212a:	b2da      	uxtb	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	611a      	str	r2, [r3, #16]
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800213e:	b480      	push	{r7}
 8002140:	b083      	sub	sp, #12
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214a:	b2da      	uxtb	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002156:	2b00      	cmp	r3, #0
 8002158:	d004      	beq.n	8002164 <I2C_Master_ADD10+0x26>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800215e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002160:	2b00      	cmp	r3, #0
 8002162:	d108      	bne.n	8002176 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00c      	beq.n	8002186 <I2C_Master_ADD10+0x48>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002172:	2b00      	cmp	r3, #0
 8002174:	d007      	beq.n	8002186 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	685a      	ldr	r2, [r3, #4]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002184:	605a      	str	r2, [r3, #4]
  }
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002192:	b480      	push	{r7}
 8002194:	b091      	sub	sp, #68	; 0x44
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021a0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	2b22      	cmp	r3, #34	; 0x22
 80021ba:	f040 8169 	bne.w	8002490 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d10f      	bne.n	80021e6 <I2C_Master_ADDR+0x54>
 80021c6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80021ca:	2b40      	cmp	r3, #64	; 0x40
 80021cc:	d10b      	bne.n	80021e6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021ce:	2300      	movs	r3, #0
 80021d0:	633b      	str	r3, [r7, #48]	; 0x30
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	695b      	ldr	r3, [r3, #20]
 80021d8:	633b      	str	r3, [r7, #48]	; 0x30
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	633b      	str	r3, [r7, #48]	; 0x30
 80021e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e4:	e160      	b.n	80024a8 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d11d      	bne.n	800222a <I2C_Master_ADDR+0x98>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80021f6:	d118      	bne.n	800222a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021f8:	2300      	movs	r3, #0
 80021fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800220c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800221c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002222:	1c5a      	adds	r2, r3, #1
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	651a      	str	r2, [r3, #80]	; 0x50
 8002228:	e13e      	b.n	80024a8 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800222e:	b29b      	uxth	r3, r3
 8002230:	2b00      	cmp	r3, #0
 8002232:	d113      	bne.n	800225c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002234:	2300      	movs	r3, #0
 8002236:	62bb      	str	r3, [r7, #40]	; 0x28
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	62bb      	str	r3, [r7, #40]	; 0x28
 8002248:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	e115      	b.n	8002488 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002260:	b29b      	uxth	r3, r3
 8002262:	2b01      	cmp	r3, #1
 8002264:	f040 808a 	bne.w	800237c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800226a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800226e:	d137      	bne.n	80022e0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800227e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800228a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800228e:	d113      	bne.n	80022b8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800229e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022a0:	2300      	movs	r3, #0
 80022a2:	627b      	str	r3, [r7, #36]	; 0x24
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	627b      	str	r3, [r7, #36]	; 0x24
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	627b      	str	r3, [r7, #36]	; 0x24
 80022b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b6:	e0e7      	b.n	8002488 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022b8:	2300      	movs	r3, #0
 80022ba:	623b      	str	r3, [r7, #32]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	623b      	str	r3, [r7, #32]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	623b      	str	r3, [r7, #32]
 80022cc:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	e0d3      	b.n	8002488 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80022e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022e2:	2b08      	cmp	r3, #8
 80022e4:	d02e      	beq.n	8002344 <I2C_Master_ADDR+0x1b2>
 80022e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022e8:	2b20      	cmp	r3, #32
 80022ea:	d02b      	beq.n	8002344 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80022ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ee:	2b12      	cmp	r3, #18
 80022f0:	d102      	bne.n	80022f8 <I2C_Master_ADDR+0x166>
 80022f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d125      	bne.n	8002344 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80022f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022fa:	2b04      	cmp	r3, #4
 80022fc:	d00e      	beq.n	800231c <I2C_Master_ADDR+0x18a>
 80022fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002300:	2b02      	cmp	r3, #2
 8002302:	d00b      	beq.n	800231c <I2C_Master_ADDR+0x18a>
 8002304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002306:	2b10      	cmp	r3, #16
 8002308:	d008      	beq.n	800231c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002318:	601a      	str	r2, [r3, #0]
 800231a:	e007      	b.n	800232c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800232a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800232c:	2300      	movs	r3, #0
 800232e:	61fb      	str	r3, [r7, #28]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	61fb      	str	r3, [r7, #28]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	61fb      	str	r3, [r7, #28]
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	e0a1      	b.n	8002488 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002352:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002354:	2300      	movs	r3, #0
 8002356:	61bb      	str	r3, [r7, #24]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	61bb      	str	r3, [r7, #24]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	61bb      	str	r3, [r7, #24]
 8002368:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	e085      	b.n	8002488 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002380:	b29b      	uxth	r3, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d14d      	bne.n	8002422 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002388:	2b04      	cmp	r3, #4
 800238a:	d016      	beq.n	80023ba <I2C_Master_ADDR+0x228>
 800238c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800238e:	2b02      	cmp	r3, #2
 8002390:	d013      	beq.n	80023ba <I2C_Master_ADDR+0x228>
 8002392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002394:	2b10      	cmp	r3, #16
 8002396:	d010      	beq.n	80023ba <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023a6:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	e007      	b.n	80023ca <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80023c8:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023d8:	d117      	bne.n	800240a <I2C_Master_ADDR+0x278>
 80023da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80023e0:	d00b      	beq.n	80023fa <I2C_Master_ADDR+0x268>
 80023e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d008      	beq.n	80023fa <I2C_Master_ADDR+0x268>
 80023e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ea:	2b08      	cmp	r3, #8
 80023ec:	d005      	beq.n	80023fa <I2C_Master_ADDR+0x268>
 80023ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023f0:	2b10      	cmp	r3, #16
 80023f2:	d002      	beq.n	80023fa <I2C_Master_ADDR+0x268>
 80023f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023f6:	2b20      	cmp	r3, #32
 80023f8:	d107      	bne.n	800240a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	685a      	ldr	r2, [r3, #4]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002408:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800240a:	2300      	movs	r3, #0
 800240c:	617b      	str	r3, [r7, #20]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	695b      	ldr	r3, [r3, #20]
 8002414:	617b      	str	r3, [r7, #20]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	617b      	str	r3, [r7, #20]
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	e032      	b.n	8002488 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002430:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800243c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002440:	d117      	bne.n	8002472 <I2C_Master_ADDR+0x2e0>
 8002442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002444:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002448:	d00b      	beq.n	8002462 <I2C_Master_ADDR+0x2d0>
 800244a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800244c:	2b01      	cmp	r3, #1
 800244e:	d008      	beq.n	8002462 <I2C_Master_ADDR+0x2d0>
 8002450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002452:	2b08      	cmp	r3, #8
 8002454:	d005      	beq.n	8002462 <I2C_Master_ADDR+0x2d0>
 8002456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002458:	2b10      	cmp	r3, #16
 800245a:	d002      	beq.n	8002462 <I2C_Master_ADDR+0x2d0>
 800245c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800245e:	2b20      	cmp	r3, #32
 8002460:	d107      	bne.n	8002472 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	685a      	ldr	r2, [r3, #4]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002470:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002472:	2300      	movs	r3, #0
 8002474:	613b      	str	r3, [r7, #16]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	695b      	ldr	r3, [r3, #20]
 800247c:	613b      	str	r3, [r7, #16]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	613b      	str	r3, [r7, #16]
 8002486:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800248e:	e00b      	b.n	80024a8 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002490:	2300      	movs	r3, #0
 8002492:	60fb      	str	r3, [r7, #12]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	60fb      	str	r3, [r7, #12]
 80024a4:	68fb      	ldr	r3, [r7, #12]
}
 80024a6:	e7ff      	b.n	80024a8 <I2C_Master_ADDR+0x316>
 80024a8:	bf00      	nop
 80024aa:	3744      	adds	r7, #68	; 0x44
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024c2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d02b      	beq.n	8002526 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d2:	781a      	ldrb	r2, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024de:	1c5a      	adds	r2, r3, #1
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	3b01      	subs	r3, #1
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d114      	bne.n	8002526 <I2C_SlaveTransmit_TXE+0x72>
 80024fc:	7bfb      	ldrb	r3, [r7, #15]
 80024fe:	2b29      	cmp	r3, #41	; 0x29
 8002500:	d111      	bne.n	8002526 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	685a      	ldr	r2, [r3, #4]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002510:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2221      	movs	r2, #33	; 0x21
 8002516:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2228      	movs	r2, #40	; 0x28
 800251c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f7ff f9e7 	bl	80018f4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002526:	bf00      	nop
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800252e:	b480      	push	{r7}
 8002530:	b083      	sub	sp, #12
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800253a:	b29b      	uxth	r3, r3
 800253c:	2b00      	cmp	r3, #0
 800253e:	d011      	beq.n	8002564 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002544:	781a      	ldrb	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002550:	1c5a      	adds	r2, r3, #1
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800255a:	b29b      	uxth	r3, r3
 800255c:	3b01      	subs	r3, #1
 800255e:	b29a      	uxth	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800257e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002584:	b29b      	uxth	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d02c      	beq.n	80025e4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	691a      	ldr	r2, [r3, #16]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002594:	b2d2      	uxtb	r2, r2
 8002596:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259c:	1c5a      	adds	r2, r3, #1
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	3b01      	subs	r3, #1
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d114      	bne.n	80025e4 <I2C_SlaveReceive_RXNE+0x74>
 80025ba:	7bfb      	ldrb	r3, [r7, #15]
 80025bc:	2b2a      	cmp	r3, #42	; 0x2a
 80025be:	d111      	bne.n	80025e4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	685a      	ldr	r2, [r3, #4]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025ce:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2222      	movs	r2, #34	; 0x22
 80025d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2228      	movs	r2, #40	; 0x28
 80025da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f7ff f992 	bl	8001908 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80025e4:	bf00      	nop
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d012      	beq.n	8002624 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	691a      	ldr	r2, [r3, #16]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002608:	b2d2      	uxtb	r2, r2
 800260a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002610:	1c5a      	adds	r2, r3, #1
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800261a:	b29b      	uxth	r3, r3
 800261c:	3b01      	subs	r3, #1
 800261e:	b29a      	uxth	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800263a:	2300      	movs	r3, #0
 800263c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002644:	b2db      	uxtb	r3, r3
 8002646:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800264a:	2b28      	cmp	r3, #40	; 0x28
 800264c:	d127      	bne.n	800269e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	685a      	ldr	r2, [r3, #4]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800265c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	089b      	lsrs	r3, r3, #2
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800266a:	2301      	movs	r3, #1
 800266c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	09db      	lsrs	r3, r3, #7
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	2b00      	cmp	r3, #0
 8002678:	d103      	bne.n	8002682 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	81bb      	strh	r3, [r7, #12]
 8002680:	e002      	b.n	8002688 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002690:	89ba      	ldrh	r2, [r7, #12]
 8002692:	7bfb      	ldrb	r3, [r7, #15]
 8002694:	4619      	mov	r1, r3
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7ff f940 	bl	800191c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800269c:	e00e      	b.n	80026bc <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800269e:	2300      	movs	r3, #0
 80026a0:	60bb      	str	r3, [r7, #8]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	695b      	ldr	r3, [r3, #20]
 80026a8:	60bb      	str	r3, [r7, #8]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	60bb      	str	r3, [r7, #8]
 80026b2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80026bc:	bf00      	nop
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026d2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	685a      	ldr	r2, [r3, #4]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80026e2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80026e4:	2300      	movs	r3, #0
 80026e6:	60bb      	str	r3, [r7, #8]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	60bb      	str	r3, [r7, #8]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f042 0201 	orr.w	r2, r2, #1
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002710:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800271c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002720:	d172      	bne.n	8002808 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002722:	7bfb      	ldrb	r3, [r7, #15]
 8002724:	2b22      	cmp	r3, #34	; 0x22
 8002726:	d002      	beq.n	800272e <I2C_Slave_STOPF+0x6a>
 8002728:	7bfb      	ldrb	r3, [r7, #15]
 800272a:	2b2a      	cmp	r3, #42	; 0x2a
 800272c:	d135      	bne.n	800279a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	b29a      	uxth	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002740:	b29b      	uxth	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d005      	beq.n	8002752 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	f043 0204 	orr.w	r2, r3, #4
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002760:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002766:	4618      	mov	r0, r3
 8002768:	f7fe fb0b 	bl	8000d82 <HAL_DMA_GetState>
 800276c:	4603      	mov	r3, r0
 800276e:	2b01      	cmp	r3, #1
 8002770:	d049      	beq.n	8002806 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002776:	4a69      	ldr	r2, [pc, #420]	; (800291c <I2C_Slave_STOPF+0x258>)
 8002778:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800277e:	4618      	mov	r0, r3
 8002780:	f7fe fadd 	bl	8000d3e <HAL_DMA_Abort_IT>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d03d      	beq.n	8002806 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800278e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002794:	4610      	mov	r0, r2
 8002796:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002798:	e035      	b.n	8002806 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d005      	beq.n	80027be <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	f043 0204 	orr.w	r2, r3, #4
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027cc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7fe fad5 	bl	8000d82 <HAL_DMA_GetState>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d014      	beq.n	8002808 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027e2:	4a4e      	ldr	r2, [pc, #312]	; (800291c <I2C_Slave_STOPF+0x258>)
 80027e4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7fe faa7 	bl	8000d3e <HAL_DMA_Abort_IT>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d008      	beq.n	8002808 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002800:	4610      	mov	r0, r2
 8002802:	4798      	blx	r3
 8002804:	e000      	b.n	8002808 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002806:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800280c:	b29b      	uxth	r3, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	d03e      	beq.n	8002890 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	695b      	ldr	r3, [r3, #20]
 8002818:	f003 0304 	and.w	r3, r3, #4
 800281c:	2b04      	cmp	r3, #4
 800281e:	d112      	bne.n	8002846 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	691a      	ldr	r2, [r3, #16]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282a:	b2d2      	uxtb	r2, r2
 800282c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002832:	1c5a      	adds	r2, r3, #1
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800283c:	b29b      	uxth	r3, r3
 800283e:	3b01      	subs	r3, #1
 8002840:	b29a      	uxth	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	695b      	ldr	r3, [r3, #20]
 800284c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002850:	2b40      	cmp	r3, #64	; 0x40
 8002852:	d112      	bne.n	800287a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	691a      	ldr	r2, [r3, #16]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285e:	b2d2      	uxtb	r2, r2
 8002860:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002866:	1c5a      	adds	r2, r3, #1
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002870:	b29b      	uxth	r3, r3
 8002872:	3b01      	subs	r3, #1
 8002874:	b29a      	uxth	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800287e:	b29b      	uxth	r3, r3
 8002880:	2b00      	cmp	r3, #0
 8002882:	d005      	beq.n	8002890 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002888:	f043 0204 	orr.w	r2, r3, #4
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002894:	2b00      	cmp	r3, #0
 8002896:	d003      	beq.n	80028a0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f000 f8b3 	bl	8002a04 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800289e:	e039      	b.n	8002914 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80028a0:	7bfb      	ldrb	r3, [r7, #15]
 80028a2:	2b2a      	cmp	r3, #42	; 0x2a
 80028a4:	d109      	bne.n	80028ba <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2228      	movs	r2, #40	; 0x28
 80028b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f7ff f827 	bl	8001908 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b28      	cmp	r3, #40	; 0x28
 80028c4:	d111      	bne.n	80028ea <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a15      	ldr	r2, [pc, #84]	; (8002920 <I2C_Slave_STOPF+0x25c>)
 80028ca:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2220      	movs	r2, #32
 80028d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7ff f828 	bl	8001938 <HAL_I2C_ListenCpltCallback>
}
 80028e8:	e014      	b.n	8002914 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ee:	2b22      	cmp	r3, #34	; 0x22
 80028f0:	d002      	beq.n	80028f8 <I2C_Slave_STOPF+0x234>
 80028f2:	7bfb      	ldrb	r3, [r7, #15]
 80028f4:	2b22      	cmp	r3, #34	; 0x22
 80028f6:	d10d      	bne.n	8002914 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2220      	movs	r2, #32
 8002902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f7fe fffa 	bl	8001908 <HAL_I2C_SlaveRxCpltCallback>
}
 8002914:	bf00      	nop
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	08002c69 	.word	0x08002c69
 8002920:	ffff0000 	.word	0xffff0000

08002924 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002932:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002938:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	2b08      	cmp	r3, #8
 800293e:	d002      	beq.n	8002946 <I2C_Slave_AF+0x22>
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	2b20      	cmp	r3, #32
 8002944:	d129      	bne.n	800299a <I2C_Slave_AF+0x76>
 8002946:	7bfb      	ldrb	r3, [r7, #15]
 8002948:	2b28      	cmp	r3, #40	; 0x28
 800294a:	d126      	bne.n	800299a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a2c      	ldr	r2, [pc, #176]	; (8002a00 <I2C_Slave_AF+0xdc>)
 8002950:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	685a      	ldr	r2, [r3, #4]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002960:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800296a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800297a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2220      	movs	r2, #32
 8002986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f7fe ffd0 	bl	8001938 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8002998:	e02e      	b.n	80029f8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800299a:	7bfb      	ldrb	r3, [r7, #15]
 800299c:	2b21      	cmp	r3, #33	; 0x21
 800299e:	d126      	bne.n	80029ee <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a17      	ldr	r2, [pc, #92]	; (8002a00 <I2C_Slave_AF+0xdc>)
 80029a4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2221      	movs	r2, #33	; 0x21
 80029aa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2220      	movs	r2, #32
 80029b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	685a      	ldr	r2, [r3, #4]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80029ca:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029d4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029e4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f7fe ff84 	bl	80018f4 <HAL_I2C_SlaveTxCpltCallback>
}
 80029ec:	e004      	b.n	80029f8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029f6:	615a      	str	r2, [r3, #20]
}
 80029f8:	bf00      	nop
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	ffff0000 	.word	0xffff0000

08002a04 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a12:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a1a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002a1c:	7bbb      	ldrb	r3, [r7, #14]
 8002a1e:	2b10      	cmp	r3, #16
 8002a20:	d002      	beq.n	8002a28 <I2C_ITError+0x24>
 8002a22:	7bbb      	ldrb	r3, [r7, #14]
 8002a24:	2b40      	cmp	r3, #64	; 0x40
 8002a26:	d10a      	bne.n	8002a3e <I2C_ITError+0x3a>
 8002a28:	7bfb      	ldrb	r3, [r7, #15]
 8002a2a:	2b22      	cmp	r3, #34	; 0x22
 8002a2c:	d107      	bne.n	8002a3e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a3c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002a3e:	7bfb      	ldrb	r3, [r7, #15]
 8002a40:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002a44:	2b28      	cmp	r3, #40	; 0x28
 8002a46:	d107      	bne.n	8002a58 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2228      	movs	r2, #40	; 0x28
 8002a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002a56:	e015      	b.n	8002a84 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a66:	d00a      	beq.n	8002a7e <I2C_ITError+0x7a>
 8002a68:	7bfb      	ldrb	r3, [r7, #15]
 8002a6a:	2b60      	cmp	r3, #96	; 0x60
 8002a6c:	d007      	beq.n	8002a7e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2220      	movs	r2, #32
 8002a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a92:	d162      	bne.n	8002b5a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	685a      	ldr	r2, [r3, #4]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aa2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d020      	beq.n	8002af4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ab6:	4a6a      	ldr	r2, [pc, #424]	; (8002c60 <I2C_ITError+0x25c>)
 8002ab8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7fe f93d 	bl	8000d3e <HAL_DMA_Abort_IT>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f000 8089 	beq.w	8002bde <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 0201 	bic.w	r2, r2, #1
 8002ada:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2220      	movs	r2, #32
 8002ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002aee:	4610      	mov	r0, r2
 8002af0:	4798      	blx	r3
 8002af2:	e074      	b.n	8002bde <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af8:	4a59      	ldr	r2, [pc, #356]	; (8002c60 <I2C_ITError+0x25c>)
 8002afa:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7fe f91c 	bl	8000d3e <HAL_DMA_Abort_IT>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d068      	beq.n	8002bde <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b16:	2b40      	cmp	r3, #64	; 0x40
 8002b18:	d10b      	bne.n	8002b32 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	691a      	ldr	r2, [r3, #16]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b24:	b2d2      	uxtb	r2, r2
 8002b26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2c:	1c5a      	adds	r2, r3, #1
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f022 0201 	bic.w	r2, r2, #1
 8002b40:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2220      	movs	r2, #32
 8002b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b54:	4610      	mov	r0, r2
 8002b56:	4798      	blx	r3
 8002b58:	e041      	b.n	8002bde <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b60      	cmp	r3, #96	; 0x60
 8002b64:	d125      	bne.n	8002bb2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2220      	movs	r2, #32
 8002b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b7e:	2b40      	cmp	r3, #64	; 0x40
 8002b80:	d10b      	bne.n	8002b9a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	691a      	ldr	r2, [r3, #16]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8c:	b2d2      	uxtb	r2, r2
 8002b8e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b94:	1c5a      	adds	r2, r3, #1
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 0201 	bic.w	r2, r2, #1
 8002ba8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f7fe feec 	bl	8001988 <HAL_I2C_AbortCpltCallback>
 8002bb0:	e015      	b.n	8002bde <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	695b      	ldr	r3, [r3, #20]
 8002bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bbc:	2b40      	cmp	r3, #64	; 0x40
 8002bbe:	d10b      	bne.n	8002bd8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	691a      	ldr	r2, [r3, #16]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bca:	b2d2      	uxtb	r2, r2
 8002bcc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd2:	1c5a      	adds	r2, r3, #1
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f7fe fecb 	bl	8001974 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d10e      	bne.n	8002c0c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d109      	bne.n	8002c0c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d104      	bne.n	8002c0c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d007      	beq.n	8002c1c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	685a      	ldr	r2, [r3, #4]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c1a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c22:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c28:	f003 0304 	and.w	r3, r3, #4
 8002c2c:	2b04      	cmp	r3, #4
 8002c2e:	d113      	bne.n	8002c58 <I2C_ITError+0x254>
 8002c30:	7bfb      	ldrb	r3, [r7, #15]
 8002c32:	2b28      	cmp	r3, #40	; 0x28
 8002c34:	d110      	bne.n	8002c58 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a0a      	ldr	r2, [pc, #40]	; (8002c64 <I2C_ITError+0x260>)
 8002c3a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2220      	movs	r2, #32
 8002c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f7fe fe70 	bl	8001938 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002c58:	bf00      	nop
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	08002c69 	.word	0x08002c69
 8002c64:	ffff0000 	.word	0xffff0000

08002c68 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b086      	sub	sp, #24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002c70:	2300      	movs	r3, #0
 8002c72:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c78:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c80:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002c82:	4b4b      	ldr	r3, [pc, #300]	; (8002db0 <I2C_DMAAbort+0x148>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	08db      	lsrs	r3, r3, #3
 8002c88:	4a4a      	ldr	r2, [pc, #296]	; (8002db4 <I2C_DMAAbort+0x14c>)
 8002c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8e:	0a1a      	lsrs	r2, r3, #8
 8002c90:	4613      	mov	r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	4413      	add	r3, r2
 8002c96:	00da      	lsls	r2, r3, #3
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d106      	bne.n	8002cb0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	f043 0220 	orr.w	r2, r3, #32
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8002cae:	e00a      	b.n	8002cc6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cc4:	d0ea      	beq.n	8002c9c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d003      	beq.n	8002cd6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d003      	beq.n	8002ce6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cf4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d003      	beq.n	8002d0c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d08:	2200      	movs	r2, #0
 8002d0a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d003      	beq.n	8002d1c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d18:	2200      	movs	r2, #0
 8002d1a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f022 0201 	bic.w	r2, r2, #1
 8002d2a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b60      	cmp	r3, #96	; 0x60
 8002d36:	d10e      	bne.n	8002d56 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	2220      	movs	r2, #32
 8002d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002d4e:	6978      	ldr	r0, [r7, #20]
 8002d50:	f7fe fe1a 	bl	8001988 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002d54:	e027      	b.n	8002da6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002d56:	7cfb      	ldrb	r3, [r7, #19]
 8002d58:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002d5c:	2b28      	cmp	r3, #40	; 0x28
 8002d5e:	d117      	bne.n	8002d90 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f042 0201 	orr.w	r2, r2, #1
 8002d6e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d7e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	2200      	movs	r2, #0
 8002d84:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	2228      	movs	r2, #40	; 0x28
 8002d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002d8e:	e007      	b.n	8002da0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	2220      	movs	r2, #32
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8002da0:	6978      	ldr	r0, [r7, #20]
 8002da2:	f7fe fde7 	bl	8001974 <HAL_I2C_ErrorCallback>
}
 8002da6:	bf00      	nop
 8002da8:	3718      	adds	r7, #24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	20000004 	.word	0x20000004
 8002db4:	14f8b589 	.word	0x14f8b589

08002db8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8002dc4:	4b13      	ldr	r3, [pc, #76]	; (8002e14 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	08db      	lsrs	r3, r3, #3
 8002dca:	4a13      	ldr	r2, [pc, #76]	; (8002e18 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8002dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd0:	0a1a      	lsrs	r2, r3, #8
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d107      	bne.n	8002df6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	f043 0220 	orr.w	r2, r3, #32
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e008      	b.n	8002e08 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e04:	d0e9      	beq.n	8002dda <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3714      	adds	r7, #20
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr
 8002e14:	20000004 	.word	0x20000004
 8002e18:	14f8b589 	.word	0x14f8b589

08002e1c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e28:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002e2c:	d103      	bne.n	8002e36 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2201      	movs	r2, #1
 8002e32:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8002e34:	e007      	b.n	8002e46 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002e3e:	d102      	bne.n	8002e46 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2208      	movs	r2, #8
 8002e44:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002e46:	bf00      	nop
 8002e48:	370c      	adds	r7, #12
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
	...

08002e54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e0cc      	b.n	8003002 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e68:	4b68      	ldr	r3, [pc, #416]	; (800300c <HAL_RCC_ClockConfig+0x1b8>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 030f 	and.w	r3, r3, #15
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d90c      	bls.n	8002e90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e76:	4b65      	ldr	r3, [pc, #404]	; (800300c <HAL_RCC_ClockConfig+0x1b8>)
 8002e78:	683a      	ldr	r2, [r7, #0]
 8002e7a:	b2d2      	uxtb	r2, r2
 8002e7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e7e:	4b63      	ldr	r3, [pc, #396]	; (800300c <HAL_RCC_ClockConfig+0x1b8>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 030f 	and.w	r3, r3, #15
 8002e86:	683a      	ldr	r2, [r7, #0]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d001      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e0b8      	b.n	8003002 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d020      	beq.n	8002ede <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0304 	and.w	r3, r3, #4
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d005      	beq.n	8002eb4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ea8:	4b59      	ldr	r3, [pc, #356]	; (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	4a58      	ldr	r2, [pc, #352]	; (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002eae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002eb2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0308 	and.w	r3, r3, #8
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d005      	beq.n	8002ecc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ec0:	4b53      	ldr	r3, [pc, #332]	; (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	4a52      	ldr	r2, [pc, #328]	; (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002eca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ecc:	4b50      	ldr	r3, [pc, #320]	; (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	494d      	ldr	r1, [pc, #308]	; (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d044      	beq.n	8002f74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d107      	bne.n	8002f02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ef2:	4b47      	ldr	r3, [pc, #284]	; (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d119      	bne.n	8002f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e07f      	b.n	8003002 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d003      	beq.n	8002f12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f0e:	2b03      	cmp	r3, #3
 8002f10:	d107      	bne.n	8002f22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f12:	4b3f      	ldr	r3, [pc, #252]	; (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d109      	bne.n	8002f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e06f      	b.n	8003002 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f22:	4b3b      	ldr	r3, [pc, #236]	; (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d101      	bne.n	8002f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e067      	b.n	8003002 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f32:	4b37      	ldr	r3, [pc, #220]	; (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f023 0203 	bic.w	r2, r3, #3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	4934      	ldr	r1, [pc, #208]	; (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f44:	f7fd fdba 	bl	8000abc <HAL_GetTick>
 8002f48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f4a:	e00a      	b.n	8002f62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f4c:	f7fd fdb6 	bl	8000abc <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e04f      	b.n	8003002 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f62:	4b2b      	ldr	r3, [pc, #172]	; (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 020c 	and.w	r2, r3, #12
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d1eb      	bne.n	8002f4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f74:	4b25      	ldr	r3, [pc, #148]	; (800300c <HAL_RCC_ClockConfig+0x1b8>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 030f 	and.w	r3, r3, #15
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d20c      	bcs.n	8002f9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f82:	4b22      	ldr	r3, [pc, #136]	; (800300c <HAL_RCC_ClockConfig+0x1b8>)
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	b2d2      	uxtb	r2, r2
 8002f88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f8a:	4b20      	ldr	r3, [pc, #128]	; (800300c <HAL_RCC_ClockConfig+0x1b8>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 030f 	and.w	r3, r3, #15
 8002f92:	683a      	ldr	r2, [r7, #0]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d001      	beq.n	8002f9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e032      	b.n	8003002 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0304 	and.w	r3, r3, #4
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d008      	beq.n	8002fba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fa8:	4b19      	ldr	r3, [pc, #100]	; (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	4916      	ldr	r1, [pc, #88]	; (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0308 	and.w	r3, r3, #8
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d009      	beq.n	8002fda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fc6:	4b12      	ldr	r3, [pc, #72]	; (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	490e      	ldr	r1, [pc, #56]	; (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fda:	f000 f855 	bl	8003088 <HAL_RCC_GetSysClockFreq>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	4b0b      	ldr	r3, [pc, #44]	; (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	091b      	lsrs	r3, r3, #4
 8002fe6:	f003 030f 	and.w	r3, r3, #15
 8002fea:	490a      	ldr	r1, [pc, #40]	; (8003014 <HAL_RCC_ClockConfig+0x1c0>)
 8002fec:	5ccb      	ldrb	r3, [r1, r3]
 8002fee:	fa22 f303 	lsr.w	r3, r2, r3
 8002ff2:	4a09      	ldr	r2, [pc, #36]	; (8003018 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ff6:	4b09      	ldr	r3, [pc, #36]	; (800301c <HAL_RCC_ClockConfig+0x1c8>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7fd fd1a 	bl	8000a34 <HAL_InitTick>

  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	40023c00 	.word	0x40023c00
 8003010:	40023800 	.word	0x40023800
 8003014:	08004124 	.word	0x08004124
 8003018:	20000004 	.word	0x20000004
 800301c:	20000008 	.word	0x20000008

08003020 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003024:	4b03      	ldr	r3, [pc, #12]	; (8003034 <HAL_RCC_GetHCLKFreq+0x14>)
 8003026:	681b      	ldr	r3, [r3, #0]
}
 8003028:	4618      	mov	r0, r3
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	20000004 	.word	0x20000004

08003038 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800303c:	f7ff fff0 	bl	8003020 <HAL_RCC_GetHCLKFreq>
 8003040:	4602      	mov	r2, r0
 8003042:	4b05      	ldr	r3, [pc, #20]	; (8003058 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	0a9b      	lsrs	r3, r3, #10
 8003048:	f003 0307 	and.w	r3, r3, #7
 800304c:	4903      	ldr	r1, [pc, #12]	; (800305c <HAL_RCC_GetPCLK1Freq+0x24>)
 800304e:	5ccb      	ldrb	r3, [r1, r3]
 8003050:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003054:	4618      	mov	r0, r3
 8003056:	bd80      	pop	{r7, pc}
 8003058:	40023800 	.word	0x40023800
 800305c:	08004134 	.word	0x08004134

08003060 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003064:	f7ff ffdc 	bl	8003020 <HAL_RCC_GetHCLKFreq>
 8003068:	4602      	mov	r2, r0
 800306a:	4b05      	ldr	r3, [pc, #20]	; (8003080 <HAL_RCC_GetPCLK2Freq+0x20>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	0b5b      	lsrs	r3, r3, #13
 8003070:	f003 0307 	and.w	r3, r3, #7
 8003074:	4903      	ldr	r1, [pc, #12]	; (8003084 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003076:	5ccb      	ldrb	r3, [r1, r3]
 8003078:	fa22 f303 	lsr.w	r3, r2, r3
}
 800307c:	4618      	mov	r0, r3
 800307e:	bd80      	pop	{r7, pc}
 8003080:	40023800 	.word	0x40023800
 8003084:	08004134 	.word	0x08004134

08003088 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003088:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800308c:	b0a6      	sub	sp, #152	; 0x98
 800308e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003090:	2300      	movs	r3, #0
 8003092:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8003096:	2300      	movs	r3, #0
 8003098:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 800309c:	2300      	movs	r3, #0
 800309e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 80030a2:	2300      	movs	r3, #0
 80030a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 80030a8:	2300      	movs	r3, #0
 80030aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030ae:	4bc8      	ldr	r3, [pc, #800]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x348>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f003 030c 	and.w	r3, r3, #12
 80030b6:	2b0c      	cmp	r3, #12
 80030b8:	f200 817e 	bhi.w	80033b8 <HAL_RCC_GetSysClockFreq+0x330>
 80030bc:	a201      	add	r2, pc, #4	; (adr r2, 80030c4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80030be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c2:	bf00      	nop
 80030c4:	080030f9 	.word	0x080030f9
 80030c8:	080033b9 	.word	0x080033b9
 80030cc:	080033b9 	.word	0x080033b9
 80030d0:	080033b9 	.word	0x080033b9
 80030d4:	08003101 	.word	0x08003101
 80030d8:	080033b9 	.word	0x080033b9
 80030dc:	080033b9 	.word	0x080033b9
 80030e0:	080033b9 	.word	0x080033b9
 80030e4:	08003109 	.word	0x08003109
 80030e8:	080033b9 	.word	0x080033b9
 80030ec:	080033b9 	.word	0x080033b9
 80030f0:	080033b9 	.word	0x080033b9
 80030f4:	08003273 	.word	0x08003273
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030f8:	4bb6      	ldr	r3, [pc, #728]	; (80033d4 <HAL_RCC_GetSysClockFreq+0x34c>)
 80030fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80030fe:	e15f      	b.n	80033c0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003100:	4bb5      	ldr	r3, [pc, #724]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x350>)
 8003102:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003106:	e15b      	b.n	80033c0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003108:	4bb1      	ldr	r3, [pc, #708]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x348>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003110:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003114:	4bae      	ldr	r3, [pc, #696]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x348>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d031      	beq.n	8003184 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003120:	4bab      	ldr	r3, [pc, #684]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x348>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	099b      	lsrs	r3, r3, #6
 8003126:	2200      	movs	r2, #0
 8003128:	66bb      	str	r3, [r7, #104]	; 0x68
 800312a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800312c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800312e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003132:	663b      	str	r3, [r7, #96]	; 0x60
 8003134:	2300      	movs	r3, #0
 8003136:	667b      	str	r3, [r7, #100]	; 0x64
 8003138:	4ba7      	ldr	r3, [pc, #668]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x350>)
 800313a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800313e:	462a      	mov	r2, r5
 8003140:	fb03 f202 	mul.w	r2, r3, r2
 8003144:	2300      	movs	r3, #0
 8003146:	4621      	mov	r1, r4
 8003148:	fb01 f303 	mul.w	r3, r1, r3
 800314c:	4413      	add	r3, r2
 800314e:	4aa2      	ldr	r2, [pc, #648]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x350>)
 8003150:	4621      	mov	r1, r4
 8003152:	fba1 1202 	umull	r1, r2, r1, r2
 8003156:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003158:	460a      	mov	r2, r1
 800315a:	67ba      	str	r2, [r7, #120]	; 0x78
 800315c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800315e:	4413      	add	r3, r2
 8003160:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003162:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003166:	2200      	movs	r2, #0
 8003168:	65bb      	str	r3, [r7, #88]	; 0x58
 800316a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800316c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003170:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003174:	f7fd f84e 	bl	8000214 <__aeabi_uldivmod>
 8003178:	4602      	mov	r2, r0
 800317a:	460b      	mov	r3, r1
 800317c:	4613      	mov	r3, r2
 800317e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003182:	e064      	b.n	800324e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003184:	4b92      	ldr	r3, [pc, #584]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x348>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	099b      	lsrs	r3, r3, #6
 800318a:	2200      	movs	r2, #0
 800318c:	653b      	str	r3, [r7, #80]	; 0x50
 800318e:	657a      	str	r2, [r7, #84]	; 0x54
 8003190:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003196:	64bb      	str	r3, [r7, #72]	; 0x48
 8003198:	2300      	movs	r3, #0
 800319a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800319c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80031a0:	4622      	mov	r2, r4
 80031a2:	462b      	mov	r3, r5
 80031a4:	f04f 0000 	mov.w	r0, #0
 80031a8:	f04f 0100 	mov.w	r1, #0
 80031ac:	0159      	lsls	r1, r3, #5
 80031ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031b2:	0150      	lsls	r0, r2, #5
 80031b4:	4602      	mov	r2, r0
 80031b6:	460b      	mov	r3, r1
 80031b8:	4621      	mov	r1, r4
 80031ba:	1a51      	subs	r1, r2, r1
 80031bc:	6139      	str	r1, [r7, #16]
 80031be:	4629      	mov	r1, r5
 80031c0:	eb63 0301 	sbc.w	r3, r3, r1
 80031c4:	617b      	str	r3, [r7, #20]
 80031c6:	f04f 0200 	mov.w	r2, #0
 80031ca:	f04f 0300 	mov.w	r3, #0
 80031ce:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031d2:	4659      	mov	r1, fp
 80031d4:	018b      	lsls	r3, r1, #6
 80031d6:	4651      	mov	r1, sl
 80031d8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031dc:	4651      	mov	r1, sl
 80031de:	018a      	lsls	r2, r1, #6
 80031e0:	4651      	mov	r1, sl
 80031e2:	ebb2 0801 	subs.w	r8, r2, r1
 80031e6:	4659      	mov	r1, fp
 80031e8:	eb63 0901 	sbc.w	r9, r3, r1
 80031ec:	f04f 0200 	mov.w	r2, #0
 80031f0:	f04f 0300 	mov.w	r3, #0
 80031f4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031f8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031fc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003200:	4690      	mov	r8, r2
 8003202:	4699      	mov	r9, r3
 8003204:	4623      	mov	r3, r4
 8003206:	eb18 0303 	adds.w	r3, r8, r3
 800320a:	60bb      	str	r3, [r7, #8]
 800320c:	462b      	mov	r3, r5
 800320e:	eb49 0303 	adc.w	r3, r9, r3
 8003212:	60fb      	str	r3, [r7, #12]
 8003214:	f04f 0200 	mov.w	r2, #0
 8003218:	f04f 0300 	mov.w	r3, #0
 800321c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003220:	4629      	mov	r1, r5
 8003222:	028b      	lsls	r3, r1, #10
 8003224:	4621      	mov	r1, r4
 8003226:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800322a:	4621      	mov	r1, r4
 800322c:	028a      	lsls	r2, r1, #10
 800322e:	4610      	mov	r0, r2
 8003230:	4619      	mov	r1, r3
 8003232:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003236:	2200      	movs	r2, #0
 8003238:	643b      	str	r3, [r7, #64]	; 0x40
 800323a:	647a      	str	r2, [r7, #68]	; 0x44
 800323c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003240:	f7fc ffe8 	bl	8000214 <__aeabi_uldivmod>
 8003244:	4602      	mov	r2, r0
 8003246:	460b      	mov	r3, r1
 8003248:	4613      	mov	r3, r2
 800324a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800324e:	4b60      	ldr	r3, [pc, #384]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x348>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	0c1b      	lsrs	r3, r3, #16
 8003254:	f003 0303 	and.w	r3, r3, #3
 8003258:	3301      	adds	r3, #1
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8003260:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003264:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003268:	fbb2 f3f3 	udiv	r3, r2, r3
 800326c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003270:	e0a6      	b.n	80033c0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003272:	4b57      	ldr	r3, [pc, #348]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x348>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800327a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800327e:	4b54      	ldr	r3, [pc, #336]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x348>)
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d02a      	beq.n	80032e0 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800328a:	4b51      	ldr	r3, [pc, #324]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x348>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	099b      	lsrs	r3, r3, #6
 8003290:	2200      	movs	r2, #0
 8003292:	63bb      	str	r3, [r7, #56]	; 0x38
 8003294:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003298:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800329c:	2100      	movs	r1, #0
 800329e:	4b4e      	ldr	r3, [pc, #312]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x350>)
 80032a0:	fb03 f201 	mul.w	r2, r3, r1
 80032a4:	2300      	movs	r3, #0
 80032a6:	fb00 f303 	mul.w	r3, r0, r3
 80032aa:	4413      	add	r3, r2
 80032ac:	4a4a      	ldr	r2, [pc, #296]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x350>)
 80032ae:	fba0 1202 	umull	r1, r2, r0, r2
 80032b2:	677a      	str	r2, [r7, #116]	; 0x74
 80032b4:	460a      	mov	r2, r1
 80032b6:	673a      	str	r2, [r7, #112]	; 0x70
 80032b8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80032ba:	4413      	add	r3, r2
 80032bc:	677b      	str	r3, [r7, #116]	; 0x74
 80032be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032c2:	2200      	movs	r2, #0
 80032c4:	633b      	str	r3, [r7, #48]	; 0x30
 80032c6:	637a      	str	r2, [r7, #52]	; 0x34
 80032c8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80032cc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80032d0:	f7fc ffa0 	bl	8000214 <__aeabi_uldivmod>
 80032d4:	4602      	mov	r2, r0
 80032d6:	460b      	mov	r3, r1
 80032d8:	4613      	mov	r3, r2
 80032da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80032de:	e05b      	b.n	8003398 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032e0:	4b3b      	ldr	r3, [pc, #236]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x348>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	099b      	lsrs	r3, r3, #6
 80032e6:	2200      	movs	r2, #0
 80032e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80032ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032f2:	623b      	str	r3, [r7, #32]
 80032f4:	2300      	movs	r3, #0
 80032f6:	627b      	str	r3, [r7, #36]	; 0x24
 80032f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80032fc:	4642      	mov	r2, r8
 80032fe:	464b      	mov	r3, r9
 8003300:	f04f 0000 	mov.w	r0, #0
 8003304:	f04f 0100 	mov.w	r1, #0
 8003308:	0159      	lsls	r1, r3, #5
 800330a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800330e:	0150      	lsls	r0, r2, #5
 8003310:	4602      	mov	r2, r0
 8003312:	460b      	mov	r3, r1
 8003314:	4641      	mov	r1, r8
 8003316:	ebb2 0a01 	subs.w	sl, r2, r1
 800331a:	4649      	mov	r1, r9
 800331c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003320:	f04f 0200 	mov.w	r2, #0
 8003324:	f04f 0300 	mov.w	r3, #0
 8003328:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800332c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003330:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003334:	ebb2 040a 	subs.w	r4, r2, sl
 8003338:	eb63 050b 	sbc.w	r5, r3, fp
 800333c:	f04f 0200 	mov.w	r2, #0
 8003340:	f04f 0300 	mov.w	r3, #0
 8003344:	00eb      	lsls	r3, r5, #3
 8003346:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800334a:	00e2      	lsls	r2, r4, #3
 800334c:	4614      	mov	r4, r2
 800334e:	461d      	mov	r5, r3
 8003350:	4643      	mov	r3, r8
 8003352:	18e3      	adds	r3, r4, r3
 8003354:	603b      	str	r3, [r7, #0]
 8003356:	464b      	mov	r3, r9
 8003358:	eb45 0303 	adc.w	r3, r5, r3
 800335c:	607b      	str	r3, [r7, #4]
 800335e:	f04f 0200 	mov.w	r2, #0
 8003362:	f04f 0300 	mov.w	r3, #0
 8003366:	e9d7 4500 	ldrd	r4, r5, [r7]
 800336a:	4629      	mov	r1, r5
 800336c:	028b      	lsls	r3, r1, #10
 800336e:	4621      	mov	r1, r4
 8003370:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003374:	4621      	mov	r1, r4
 8003376:	028a      	lsls	r2, r1, #10
 8003378:	4610      	mov	r0, r2
 800337a:	4619      	mov	r1, r3
 800337c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003380:	2200      	movs	r2, #0
 8003382:	61bb      	str	r3, [r7, #24]
 8003384:	61fa      	str	r2, [r7, #28]
 8003386:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800338a:	f7fc ff43 	bl	8000214 <__aeabi_uldivmod>
 800338e:	4602      	mov	r2, r0
 8003390:	460b      	mov	r3, r1
 8003392:	4613      	mov	r3, r2
 8003394:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003398:	4b0d      	ldr	r3, [pc, #52]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x348>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	0f1b      	lsrs	r3, r3, #28
 800339e:	f003 0307 	and.w	r3, r3, #7
 80033a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 80033a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80033aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80033b6:	e003      	b.n	80033c0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033b8:	4b06      	ldr	r3, [pc, #24]	; (80033d4 <HAL_RCC_GetSysClockFreq+0x34c>)
 80033ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80033be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3798      	adds	r7, #152	; 0x98
 80033c8:	46bd      	mov	sp, r7
 80033ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033ce:	bf00      	nop
 80033d0:	40023800 	.word	0x40023800
 80033d4:	00f42400 	.word	0x00f42400
 80033d8:	017d7840 	.word	0x017d7840

080033dc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b086      	sub	sp, #24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e28d      	b.n	800390a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f000 8083 	beq.w	8003502 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80033fc:	4b94      	ldr	r3, [pc, #592]	; (8003650 <HAL_RCC_OscConfig+0x274>)
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f003 030c 	and.w	r3, r3, #12
 8003404:	2b04      	cmp	r3, #4
 8003406:	d019      	beq.n	800343c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003408:	4b91      	ldr	r3, [pc, #580]	; (8003650 <HAL_RCC_OscConfig+0x274>)
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003410:	2b08      	cmp	r3, #8
 8003412:	d106      	bne.n	8003422 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003414:	4b8e      	ldr	r3, [pc, #568]	; (8003650 <HAL_RCC_OscConfig+0x274>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800341c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003420:	d00c      	beq.n	800343c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003422:	4b8b      	ldr	r3, [pc, #556]	; (8003650 <HAL_RCC_OscConfig+0x274>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800342a:	2b0c      	cmp	r3, #12
 800342c:	d112      	bne.n	8003454 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800342e:	4b88      	ldr	r3, [pc, #544]	; (8003650 <HAL_RCC_OscConfig+0x274>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003436:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800343a:	d10b      	bne.n	8003454 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800343c:	4b84      	ldr	r3, [pc, #528]	; (8003650 <HAL_RCC_OscConfig+0x274>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d05b      	beq.n	8003500 <HAL_RCC_OscConfig+0x124>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d157      	bne.n	8003500 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e25a      	b.n	800390a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800345c:	d106      	bne.n	800346c <HAL_RCC_OscConfig+0x90>
 800345e:	4b7c      	ldr	r3, [pc, #496]	; (8003650 <HAL_RCC_OscConfig+0x274>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a7b      	ldr	r2, [pc, #492]	; (8003650 <HAL_RCC_OscConfig+0x274>)
 8003464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003468:	6013      	str	r3, [r2, #0]
 800346a:	e01d      	b.n	80034a8 <HAL_RCC_OscConfig+0xcc>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003474:	d10c      	bne.n	8003490 <HAL_RCC_OscConfig+0xb4>
 8003476:	4b76      	ldr	r3, [pc, #472]	; (8003650 <HAL_RCC_OscConfig+0x274>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a75      	ldr	r2, [pc, #468]	; (8003650 <HAL_RCC_OscConfig+0x274>)
 800347c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003480:	6013      	str	r3, [r2, #0]
 8003482:	4b73      	ldr	r3, [pc, #460]	; (8003650 <HAL_RCC_OscConfig+0x274>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a72      	ldr	r2, [pc, #456]	; (8003650 <HAL_RCC_OscConfig+0x274>)
 8003488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800348c:	6013      	str	r3, [r2, #0]
 800348e:	e00b      	b.n	80034a8 <HAL_RCC_OscConfig+0xcc>
 8003490:	4b6f      	ldr	r3, [pc, #444]	; (8003650 <HAL_RCC_OscConfig+0x274>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a6e      	ldr	r2, [pc, #440]	; (8003650 <HAL_RCC_OscConfig+0x274>)
 8003496:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800349a:	6013      	str	r3, [r2, #0]
 800349c:	4b6c      	ldr	r3, [pc, #432]	; (8003650 <HAL_RCC_OscConfig+0x274>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a6b      	ldr	r2, [pc, #428]	; (8003650 <HAL_RCC_OscConfig+0x274>)
 80034a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d013      	beq.n	80034d8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b0:	f7fd fb04 	bl	8000abc <HAL_GetTick>
 80034b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034b6:	e008      	b.n	80034ca <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034b8:	f7fd fb00 	bl	8000abc <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b64      	cmp	r3, #100	; 0x64
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e21f      	b.n	800390a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ca:	4b61      	ldr	r3, [pc, #388]	; (8003650 <HAL_RCC_OscConfig+0x274>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d0f0      	beq.n	80034b8 <HAL_RCC_OscConfig+0xdc>
 80034d6:	e014      	b.n	8003502 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d8:	f7fd faf0 	bl	8000abc <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034de:	e008      	b.n	80034f2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034e0:	f7fd faec 	bl	8000abc <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b64      	cmp	r3, #100	; 0x64
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e20b      	b.n	800390a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034f2:	4b57      	ldr	r3, [pc, #348]	; (8003650 <HAL_RCC_OscConfig+0x274>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1f0      	bne.n	80034e0 <HAL_RCC_OscConfig+0x104>
 80034fe:	e000      	b.n	8003502 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003500:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d06f      	beq.n	80035ee <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800350e:	4b50      	ldr	r3, [pc, #320]	; (8003650 <HAL_RCC_OscConfig+0x274>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f003 030c 	and.w	r3, r3, #12
 8003516:	2b00      	cmp	r3, #0
 8003518:	d017      	beq.n	800354a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800351a:	4b4d      	ldr	r3, [pc, #308]	; (8003650 <HAL_RCC_OscConfig+0x274>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003522:	2b08      	cmp	r3, #8
 8003524:	d105      	bne.n	8003532 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003526:	4b4a      	ldr	r3, [pc, #296]	; (8003650 <HAL_RCC_OscConfig+0x274>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00b      	beq.n	800354a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003532:	4b47      	ldr	r3, [pc, #284]	; (8003650 <HAL_RCC_OscConfig+0x274>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800353a:	2b0c      	cmp	r3, #12
 800353c:	d11c      	bne.n	8003578 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800353e:	4b44      	ldr	r3, [pc, #272]	; (8003650 <HAL_RCC_OscConfig+0x274>)
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d116      	bne.n	8003578 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800354a:	4b41      	ldr	r3, [pc, #260]	; (8003650 <HAL_RCC_OscConfig+0x274>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d005      	beq.n	8003562 <HAL_RCC_OscConfig+0x186>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d001      	beq.n	8003562 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e1d3      	b.n	800390a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003562:	4b3b      	ldr	r3, [pc, #236]	; (8003650 <HAL_RCC_OscConfig+0x274>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	4937      	ldr	r1, [pc, #220]	; (8003650 <HAL_RCC_OscConfig+0x274>)
 8003572:	4313      	orrs	r3, r2
 8003574:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003576:	e03a      	b.n	80035ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d020      	beq.n	80035c2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003580:	4b34      	ldr	r3, [pc, #208]	; (8003654 <HAL_RCC_OscConfig+0x278>)
 8003582:	2201      	movs	r2, #1
 8003584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003586:	f7fd fa99 	bl	8000abc <HAL_GetTick>
 800358a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800358c:	e008      	b.n	80035a0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800358e:	f7fd fa95 	bl	8000abc <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b02      	cmp	r3, #2
 800359a:	d901      	bls.n	80035a0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e1b4      	b.n	800390a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035a0:	4b2b      	ldr	r3, [pc, #172]	; (8003650 <HAL_RCC_OscConfig+0x274>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0302 	and.w	r3, r3, #2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d0f0      	beq.n	800358e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ac:	4b28      	ldr	r3, [pc, #160]	; (8003650 <HAL_RCC_OscConfig+0x274>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	00db      	lsls	r3, r3, #3
 80035ba:	4925      	ldr	r1, [pc, #148]	; (8003650 <HAL_RCC_OscConfig+0x274>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	600b      	str	r3, [r1, #0]
 80035c0:	e015      	b.n	80035ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035c2:	4b24      	ldr	r3, [pc, #144]	; (8003654 <HAL_RCC_OscConfig+0x278>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c8:	f7fd fa78 	bl	8000abc <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035d0:	f7fd fa74 	bl	8000abc <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e193      	b.n	800390a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035e2:	4b1b      	ldr	r3, [pc, #108]	; (8003650 <HAL_RCC_OscConfig+0x274>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1f0      	bne.n	80035d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0308 	and.w	r3, r3, #8
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d036      	beq.n	8003668 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d016      	beq.n	8003630 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003602:	4b15      	ldr	r3, [pc, #84]	; (8003658 <HAL_RCC_OscConfig+0x27c>)
 8003604:	2201      	movs	r2, #1
 8003606:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003608:	f7fd fa58 	bl	8000abc <HAL_GetTick>
 800360c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800360e:	e008      	b.n	8003622 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003610:	f7fd fa54 	bl	8000abc <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e173      	b.n	800390a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003622:	4b0b      	ldr	r3, [pc, #44]	; (8003650 <HAL_RCC_OscConfig+0x274>)
 8003624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d0f0      	beq.n	8003610 <HAL_RCC_OscConfig+0x234>
 800362e:	e01b      	b.n	8003668 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003630:	4b09      	ldr	r3, [pc, #36]	; (8003658 <HAL_RCC_OscConfig+0x27c>)
 8003632:	2200      	movs	r2, #0
 8003634:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003636:	f7fd fa41 	bl	8000abc <HAL_GetTick>
 800363a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800363c:	e00e      	b.n	800365c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800363e:	f7fd fa3d 	bl	8000abc <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	2b02      	cmp	r3, #2
 800364a:	d907      	bls.n	800365c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e15c      	b.n	800390a <HAL_RCC_OscConfig+0x52e>
 8003650:	40023800 	.word	0x40023800
 8003654:	42470000 	.word	0x42470000
 8003658:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800365c:	4b8a      	ldr	r3, [pc, #552]	; (8003888 <HAL_RCC_OscConfig+0x4ac>)
 800365e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1ea      	bne.n	800363e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0304 	and.w	r3, r3, #4
 8003670:	2b00      	cmp	r3, #0
 8003672:	f000 8097 	beq.w	80037a4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003676:	2300      	movs	r3, #0
 8003678:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800367a:	4b83      	ldr	r3, [pc, #524]	; (8003888 <HAL_RCC_OscConfig+0x4ac>)
 800367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d10f      	bne.n	80036a6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003686:	2300      	movs	r3, #0
 8003688:	60bb      	str	r3, [r7, #8]
 800368a:	4b7f      	ldr	r3, [pc, #508]	; (8003888 <HAL_RCC_OscConfig+0x4ac>)
 800368c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368e:	4a7e      	ldr	r2, [pc, #504]	; (8003888 <HAL_RCC_OscConfig+0x4ac>)
 8003690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003694:	6413      	str	r3, [r2, #64]	; 0x40
 8003696:	4b7c      	ldr	r3, [pc, #496]	; (8003888 <HAL_RCC_OscConfig+0x4ac>)
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800369e:	60bb      	str	r3, [r7, #8]
 80036a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036a2:	2301      	movs	r3, #1
 80036a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036a6:	4b79      	ldr	r3, [pc, #484]	; (800388c <HAL_RCC_OscConfig+0x4b0>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d118      	bne.n	80036e4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036b2:	4b76      	ldr	r3, [pc, #472]	; (800388c <HAL_RCC_OscConfig+0x4b0>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a75      	ldr	r2, [pc, #468]	; (800388c <HAL_RCC_OscConfig+0x4b0>)
 80036b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036be:	f7fd f9fd 	bl	8000abc <HAL_GetTick>
 80036c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036c4:	e008      	b.n	80036d8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036c6:	f7fd f9f9 	bl	8000abc <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d901      	bls.n	80036d8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e118      	b.n	800390a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036d8:	4b6c      	ldr	r3, [pc, #432]	; (800388c <HAL_RCC_OscConfig+0x4b0>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d0f0      	beq.n	80036c6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d106      	bne.n	80036fa <HAL_RCC_OscConfig+0x31e>
 80036ec:	4b66      	ldr	r3, [pc, #408]	; (8003888 <HAL_RCC_OscConfig+0x4ac>)
 80036ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f0:	4a65      	ldr	r2, [pc, #404]	; (8003888 <HAL_RCC_OscConfig+0x4ac>)
 80036f2:	f043 0301 	orr.w	r3, r3, #1
 80036f6:	6713      	str	r3, [r2, #112]	; 0x70
 80036f8:	e01c      	b.n	8003734 <HAL_RCC_OscConfig+0x358>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	2b05      	cmp	r3, #5
 8003700:	d10c      	bne.n	800371c <HAL_RCC_OscConfig+0x340>
 8003702:	4b61      	ldr	r3, [pc, #388]	; (8003888 <HAL_RCC_OscConfig+0x4ac>)
 8003704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003706:	4a60      	ldr	r2, [pc, #384]	; (8003888 <HAL_RCC_OscConfig+0x4ac>)
 8003708:	f043 0304 	orr.w	r3, r3, #4
 800370c:	6713      	str	r3, [r2, #112]	; 0x70
 800370e:	4b5e      	ldr	r3, [pc, #376]	; (8003888 <HAL_RCC_OscConfig+0x4ac>)
 8003710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003712:	4a5d      	ldr	r2, [pc, #372]	; (8003888 <HAL_RCC_OscConfig+0x4ac>)
 8003714:	f043 0301 	orr.w	r3, r3, #1
 8003718:	6713      	str	r3, [r2, #112]	; 0x70
 800371a:	e00b      	b.n	8003734 <HAL_RCC_OscConfig+0x358>
 800371c:	4b5a      	ldr	r3, [pc, #360]	; (8003888 <HAL_RCC_OscConfig+0x4ac>)
 800371e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003720:	4a59      	ldr	r2, [pc, #356]	; (8003888 <HAL_RCC_OscConfig+0x4ac>)
 8003722:	f023 0301 	bic.w	r3, r3, #1
 8003726:	6713      	str	r3, [r2, #112]	; 0x70
 8003728:	4b57      	ldr	r3, [pc, #348]	; (8003888 <HAL_RCC_OscConfig+0x4ac>)
 800372a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372c:	4a56      	ldr	r2, [pc, #344]	; (8003888 <HAL_RCC_OscConfig+0x4ac>)
 800372e:	f023 0304 	bic.w	r3, r3, #4
 8003732:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d015      	beq.n	8003768 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800373c:	f7fd f9be 	bl	8000abc <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003742:	e00a      	b.n	800375a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003744:	f7fd f9ba 	bl	8000abc <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003752:	4293      	cmp	r3, r2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e0d7      	b.n	800390a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800375a:	4b4b      	ldr	r3, [pc, #300]	; (8003888 <HAL_RCC_OscConfig+0x4ac>)
 800375c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d0ee      	beq.n	8003744 <HAL_RCC_OscConfig+0x368>
 8003766:	e014      	b.n	8003792 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003768:	f7fd f9a8 	bl	8000abc <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800376e:	e00a      	b.n	8003786 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003770:	f7fd f9a4 	bl	8000abc <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	f241 3288 	movw	r2, #5000	; 0x1388
 800377e:	4293      	cmp	r3, r2
 8003780:	d901      	bls.n	8003786 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e0c1      	b.n	800390a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003786:	4b40      	ldr	r3, [pc, #256]	; (8003888 <HAL_RCC_OscConfig+0x4ac>)
 8003788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1ee      	bne.n	8003770 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003792:	7dfb      	ldrb	r3, [r7, #23]
 8003794:	2b01      	cmp	r3, #1
 8003796:	d105      	bne.n	80037a4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003798:	4b3b      	ldr	r3, [pc, #236]	; (8003888 <HAL_RCC_OscConfig+0x4ac>)
 800379a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379c:	4a3a      	ldr	r2, [pc, #232]	; (8003888 <HAL_RCC_OscConfig+0x4ac>)
 800379e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f000 80ad 	beq.w	8003908 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037ae:	4b36      	ldr	r3, [pc, #216]	; (8003888 <HAL_RCC_OscConfig+0x4ac>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f003 030c 	and.w	r3, r3, #12
 80037b6:	2b08      	cmp	r3, #8
 80037b8:	d060      	beq.n	800387c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d145      	bne.n	800384e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037c2:	4b33      	ldr	r3, [pc, #204]	; (8003890 <HAL_RCC_OscConfig+0x4b4>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c8:	f7fd f978 	bl	8000abc <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ce:	e008      	b.n	80037e2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037d0:	f7fd f974 	bl	8000abc <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e093      	b.n	800390a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037e2:	4b29      	ldr	r3, [pc, #164]	; (8003888 <HAL_RCC_OscConfig+0x4ac>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1f0      	bne.n	80037d0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	69da      	ldr	r2, [r3, #28]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	431a      	orrs	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fc:	019b      	lsls	r3, r3, #6
 80037fe:	431a      	orrs	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003804:	085b      	lsrs	r3, r3, #1
 8003806:	3b01      	subs	r3, #1
 8003808:	041b      	lsls	r3, r3, #16
 800380a:	431a      	orrs	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003810:	061b      	lsls	r3, r3, #24
 8003812:	431a      	orrs	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003818:	071b      	lsls	r3, r3, #28
 800381a:	491b      	ldr	r1, [pc, #108]	; (8003888 <HAL_RCC_OscConfig+0x4ac>)
 800381c:	4313      	orrs	r3, r2
 800381e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003820:	4b1b      	ldr	r3, [pc, #108]	; (8003890 <HAL_RCC_OscConfig+0x4b4>)
 8003822:	2201      	movs	r2, #1
 8003824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003826:	f7fd f949 	bl	8000abc <HAL_GetTick>
 800382a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800382c:	e008      	b.n	8003840 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800382e:	f7fd f945 	bl	8000abc <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	2b02      	cmp	r3, #2
 800383a:	d901      	bls.n	8003840 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e064      	b.n	800390a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003840:	4b11      	ldr	r3, [pc, #68]	; (8003888 <HAL_RCC_OscConfig+0x4ac>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d0f0      	beq.n	800382e <HAL_RCC_OscConfig+0x452>
 800384c:	e05c      	b.n	8003908 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800384e:	4b10      	ldr	r3, [pc, #64]	; (8003890 <HAL_RCC_OscConfig+0x4b4>)
 8003850:	2200      	movs	r2, #0
 8003852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003854:	f7fd f932 	bl	8000abc <HAL_GetTick>
 8003858:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800385a:	e008      	b.n	800386e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800385c:	f7fd f92e 	bl	8000abc <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	2b02      	cmp	r3, #2
 8003868:	d901      	bls.n	800386e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e04d      	b.n	800390a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800386e:	4b06      	ldr	r3, [pc, #24]	; (8003888 <HAL_RCC_OscConfig+0x4ac>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1f0      	bne.n	800385c <HAL_RCC_OscConfig+0x480>
 800387a:	e045      	b.n	8003908 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	2b01      	cmp	r3, #1
 8003882:	d107      	bne.n	8003894 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e040      	b.n	800390a <HAL_RCC_OscConfig+0x52e>
 8003888:	40023800 	.word	0x40023800
 800388c:	40007000 	.word	0x40007000
 8003890:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003894:	4b1f      	ldr	r3, [pc, #124]	; (8003914 <HAL_RCC_OscConfig+0x538>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d030      	beq.n	8003904 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d129      	bne.n	8003904 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d122      	bne.n	8003904 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038c4:	4013      	ands	r3, r2
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d119      	bne.n	8003904 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038da:	085b      	lsrs	r3, r3, #1
 80038dc:	3b01      	subs	r3, #1
 80038de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d10f      	bne.n	8003904 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d107      	bne.n	8003904 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003900:	429a      	cmp	r2, r3
 8003902:	d001      	beq.n	8003908 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e000      	b.n	800390a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3718      	adds	r7, #24
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	40023800 	.word	0x40023800

08003918 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e03f      	b.n	80039aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b00      	cmp	r3, #0
 8003934:	d106      	bne.n	8003944 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7fc ff94 	bl	800086c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2224      	movs	r2, #36	; 0x24
 8003948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68da      	ldr	r2, [r3, #12]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800395a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f000 f929 	bl	8003bb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	691a      	ldr	r2, [r3, #16]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003970:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	695a      	ldr	r2, [r3, #20]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003980:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68da      	ldr	r2, [r3, #12]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003990:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2220      	movs	r2, #32
 800399c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2220      	movs	r2, #32
 80039a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b08a      	sub	sp, #40	; 0x28
 80039b6:	af02      	add	r7, sp, #8
 80039b8:	60f8      	str	r0, [r7, #12]
 80039ba:	60b9      	str	r1, [r7, #8]
 80039bc:	603b      	str	r3, [r7, #0]
 80039be:	4613      	mov	r3, r2
 80039c0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039c2:	2300      	movs	r3, #0
 80039c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b20      	cmp	r3, #32
 80039d0:	d17c      	bne.n	8003acc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d002      	beq.n	80039de <HAL_UART_Transmit+0x2c>
 80039d8:	88fb      	ldrh	r3, [r7, #6]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d101      	bne.n	80039e2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e075      	b.n	8003ace <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d101      	bne.n	80039f0 <HAL_UART_Transmit+0x3e>
 80039ec:	2302      	movs	r3, #2
 80039ee:	e06e      	b.n	8003ace <HAL_UART_Transmit+0x11c>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2221      	movs	r2, #33	; 0x21
 8003a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a06:	f7fd f859 	bl	8000abc <HAL_GetTick>
 8003a0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	88fa      	ldrh	r2, [r7, #6]
 8003a10:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	88fa      	ldrh	r2, [r7, #6]
 8003a16:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a20:	d108      	bne.n	8003a34 <HAL_UART_Transmit+0x82>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d104      	bne.n	8003a34 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	61bb      	str	r3, [r7, #24]
 8003a32:	e003      	b.n	8003a3c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003a44:	e02a      	b.n	8003a9c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	9300      	str	r3, [sp, #0]
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	2180      	movs	r1, #128	; 0x80
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f000 f840 	bl	8003ad6 <UART_WaitOnFlagUntilTimeout>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d001      	beq.n	8003a60 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e036      	b.n	8003ace <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10b      	bne.n	8003a7e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	881b      	ldrh	r3, [r3, #0]
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a74:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	3302      	adds	r3, #2
 8003a7a:	61bb      	str	r3, [r7, #24]
 8003a7c:	e007      	b.n	8003a8e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	781a      	ldrb	r2, [r3, #0]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	3b01      	subs	r3, #1
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1cf      	bne.n	8003a46 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	9300      	str	r3, [sp, #0]
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	2200      	movs	r2, #0
 8003aae:	2140      	movs	r1, #64	; 0x40
 8003ab0:	68f8      	ldr	r0, [r7, #12]
 8003ab2:	f000 f810 	bl	8003ad6 <UART_WaitOnFlagUntilTimeout>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e006      	b.n	8003ace <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2220      	movs	r2, #32
 8003ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	e000      	b.n	8003ace <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003acc:	2302      	movs	r3, #2
  }
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3720      	adds	r7, #32
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}

08003ad6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ad6:	b580      	push	{r7, lr}
 8003ad8:	b090      	sub	sp, #64	; 0x40
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	60f8      	str	r0, [r7, #12]
 8003ade:	60b9      	str	r1, [r7, #8]
 8003ae0:	603b      	str	r3, [r7, #0]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ae6:	e050      	b.n	8003b8a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ae8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aee:	d04c      	beq.n	8003b8a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003af0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d007      	beq.n	8003b06 <UART_WaitOnFlagUntilTimeout+0x30>
 8003af6:	f7fc ffe1 	bl	8000abc <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d241      	bcs.n	8003b8a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	330c      	adds	r3, #12
 8003b0c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b10:	e853 3f00 	ldrex	r3, [r3]
 8003b14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b18:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	330c      	adds	r3, #12
 8003b24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b26:	637a      	str	r2, [r7, #52]	; 0x34
 8003b28:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b2e:	e841 2300 	strex	r3, r2, [r1]
 8003b32:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1e5      	bne.n	8003b06 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	3314      	adds	r3, #20
 8003b40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	e853 3f00 	ldrex	r3, [r3]
 8003b48:	613b      	str	r3, [r7, #16]
   return(result);
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	f023 0301 	bic.w	r3, r3, #1
 8003b50:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	3314      	adds	r3, #20
 8003b58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b5a:	623a      	str	r2, [r7, #32]
 8003b5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b5e:	69f9      	ldr	r1, [r7, #28]
 8003b60:	6a3a      	ldr	r2, [r7, #32]
 8003b62:	e841 2300 	strex	r3, r2, [r1]
 8003b66:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1e5      	bne.n	8003b3a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2220      	movs	r2, #32
 8003b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2220      	movs	r2, #32
 8003b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e00f      	b.n	8003baa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	4013      	ands	r3, r2
 8003b94:	68ba      	ldr	r2, [r7, #8]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	bf0c      	ite	eq
 8003b9a:	2301      	moveq	r3, #1
 8003b9c:	2300      	movne	r3, #0
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	79fb      	ldrb	r3, [r7, #7]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d09f      	beq.n	8003ae8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3740      	adds	r7, #64	; 0x40
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
	...

08003bb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bb8:	b0c0      	sub	sp, #256	; 0x100
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bd0:	68d9      	ldr	r1, [r3, #12]
 8003bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	ea40 0301 	orr.w	r3, r0, r1
 8003bdc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003be2:	689a      	ldr	r2, [r3, #8]
 8003be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	431a      	orrs	r2, r3
 8003bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf0:	695b      	ldr	r3, [r3, #20]
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf8:	69db      	ldr	r3, [r3, #28]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003c0c:	f021 010c 	bic.w	r1, r1, #12
 8003c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003c1a:	430b      	orrs	r3, r1
 8003c1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c2e:	6999      	ldr	r1, [r3, #24]
 8003c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	ea40 0301 	orr.w	r3, r0, r1
 8003c3a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	4b8f      	ldr	r3, [pc, #572]	; (8003e80 <UART_SetConfig+0x2cc>)
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d005      	beq.n	8003c54 <UART_SetConfig+0xa0>
 8003c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	4b8d      	ldr	r3, [pc, #564]	; (8003e84 <UART_SetConfig+0x2d0>)
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d104      	bne.n	8003c5e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c54:	f7ff fa04 	bl	8003060 <HAL_RCC_GetPCLK2Freq>
 8003c58:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003c5c:	e003      	b.n	8003c66 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c5e:	f7ff f9eb 	bl	8003038 <HAL_RCC_GetPCLK1Freq>
 8003c62:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c6a:	69db      	ldr	r3, [r3, #28]
 8003c6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c70:	f040 810c 	bne.w	8003e8c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003c7e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003c82:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003c86:	4622      	mov	r2, r4
 8003c88:	462b      	mov	r3, r5
 8003c8a:	1891      	adds	r1, r2, r2
 8003c8c:	65b9      	str	r1, [r7, #88]	; 0x58
 8003c8e:	415b      	adcs	r3, r3
 8003c90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c92:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003c96:	4621      	mov	r1, r4
 8003c98:	eb12 0801 	adds.w	r8, r2, r1
 8003c9c:	4629      	mov	r1, r5
 8003c9e:	eb43 0901 	adc.w	r9, r3, r1
 8003ca2:	f04f 0200 	mov.w	r2, #0
 8003ca6:	f04f 0300 	mov.w	r3, #0
 8003caa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cb6:	4690      	mov	r8, r2
 8003cb8:	4699      	mov	r9, r3
 8003cba:	4623      	mov	r3, r4
 8003cbc:	eb18 0303 	adds.w	r3, r8, r3
 8003cc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003cc4:	462b      	mov	r3, r5
 8003cc6:	eb49 0303 	adc.w	r3, r9, r3
 8003cca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003cda:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003cde:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	18db      	adds	r3, r3, r3
 8003ce6:	653b      	str	r3, [r7, #80]	; 0x50
 8003ce8:	4613      	mov	r3, r2
 8003cea:	eb42 0303 	adc.w	r3, r2, r3
 8003cee:	657b      	str	r3, [r7, #84]	; 0x54
 8003cf0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003cf4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003cf8:	f7fc fa8c 	bl	8000214 <__aeabi_uldivmod>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	460b      	mov	r3, r1
 8003d00:	4b61      	ldr	r3, [pc, #388]	; (8003e88 <UART_SetConfig+0x2d4>)
 8003d02:	fba3 2302 	umull	r2, r3, r3, r2
 8003d06:	095b      	lsrs	r3, r3, #5
 8003d08:	011c      	lsls	r4, r3, #4
 8003d0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d14:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003d18:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003d1c:	4642      	mov	r2, r8
 8003d1e:	464b      	mov	r3, r9
 8003d20:	1891      	adds	r1, r2, r2
 8003d22:	64b9      	str	r1, [r7, #72]	; 0x48
 8003d24:	415b      	adcs	r3, r3
 8003d26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003d2c:	4641      	mov	r1, r8
 8003d2e:	eb12 0a01 	adds.w	sl, r2, r1
 8003d32:	4649      	mov	r1, r9
 8003d34:	eb43 0b01 	adc.w	fp, r3, r1
 8003d38:	f04f 0200 	mov.w	r2, #0
 8003d3c:	f04f 0300 	mov.w	r3, #0
 8003d40:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d44:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d4c:	4692      	mov	sl, r2
 8003d4e:	469b      	mov	fp, r3
 8003d50:	4643      	mov	r3, r8
 8003d52:	eb1a 0303 	adds.w	r3, sl, r3
 8003d56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d5a:	464b      	mov	r3, r9
 8003d5c:	eb4b 0303 	adc.w	r3, fp, r3
 8003d60:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d70:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003d74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003d78:	460b      	mov	r3, r1
 8003d7a:	18db      	adds	r3, r3, r3
 8003d7c:	643b      	str	r3, [r7, #64]	; 0x40
 8003d7e:	4613      	mov	r3, r2
 8003d80:	eb42 0303 	adc.w	r3, r2, r3
 8003d84:	647b      	str	r3, [r7, #68]	; 0x44
 8003d86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003d8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003d8e:	f7fc fa41 	bl	8000214 <__aeabi_uldivmod>
 8003d92:	4602      	mov	r2, r0
 8003d94:	460b      	mov	r3, r1
 8003d96:	4611      	mov	r1, r2
 8003d98:	4b3b      	ldr	r3, [pc, #236]	; (8003e88 <UART_SetConfig+0x2d4>)
 8003d9a:	fba3 2301 	umull	r2, r3, r3, r1
 8003d9e:	095b      	lsrs	r3, r3, #5
 8003da0:	2264      	movs	r2, #100	; 0x64
 8003da2:	fb02 f303 	mul.w	r3, r2, r3
 8003da6:	1acb      	subs	r3, r1, r3
 8003da8:	00db      	lsls	r3, r3, #3
 8003daa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003dae:	4b36      	ldr	r3, [pc, #216]	; (8003e88 <UART_SetConfig+0x2d4>)
 8003db0:	fba3 2302 	umull	r2, r3, r3, r2
 8003db4:	095b      	lsrs	r3, r3, #5
 8003db6:	005b      	lsls	r3, r3, #1
 8003db8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003dbc:	441c      	add	r4, r3
 8003dbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003dc8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003dcc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003dd0:	4642      	mov	r2, r8
 8003dd2:	464b      	mov	r3, r9
 8003dd4:	1891      	adds	r1, r2, r2
 8003dd6:	63b9      	str	r1, [r7, #56]	; 0x38
 8003dd8:	415b      	adcs	r3, r3
 8003dda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ddc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003de0:	4641      	mov	r1, r8
 8003de2:	1851      	adds	r1, r2, r1
 8003de4:	6339      	str	r1, [r7, #48]	; 0x30
 8003de6:	4649      	mov	r1, r9
 8003de8:	414b      	adcs	r3, r1
 8003dea:	637b      	str	r3, [r7, #52]	; 0x34
 8003dec:	f04f 0200 	mov.w	r2, #0
 8003df0:	f04f 0300 	mov.w	r3, #0
 8003df4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003df8:	4659      	mov	r1, fp
 8003dfa:	00cb      	lsls	r3, r1, #3
 8003dfc:	4651      	mov	r1, sl
 8003dfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e02:	4651      	mov	r1, sl
 8003e04:	00ca      	lsls	r2, r1, #3
 8003e06:	4610      	mov	r0, r2
 8003e08:	4619      	mov	r1, r3
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	4642      	mov	r2, r8
 8003e0e:	189b      	adds	r3, r3, r2
 8003e10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e14:	464b      	mov	r3, r9
 8003e16:	460a      	mov	r2, r1
 8003e18:	eb42 0303 	adc.w	r3, r2, r3
 8003e1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003e2c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003e30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003e34:	460b      	mov	r3, r1
 8003e36:	18db      	adds	r3, r3, r3
 8003e38:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	eb42 0303 	adc.w	r3, r2, r3
 8003e40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e46:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003e4a:	f7fc f9e3 	bl	8000214 <__aeabi_uldivmod>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	460b      	mov	r3, r1
 8003e52:	4b0d      	ldr	r3, [pc, #52]	; (8003e88 <UART_SetConfig+0x2d4>)
 8003e54:	fba3 1302 	umull	r1, r3, r3, r2
 8003e58:	095b      	lsrs	r3, r3, #5
 8003e5a:	2164      	movs	r1, #100	; 0x64
 8003e5c:	fb01 f303 	mul.w	r3, r1, r3
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	00db      	lsls	r3, r3, #3
 8003e64:	3332      	adds	r3, #50	; 0x32
 8003e66:	4a08      	ldr	r2, [pc, #32]	; (8003e88 <UART_SetConfig+0x2d4>)
 8003e68:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6c:	095b      	lsrs	r3, r3, #5
 8003e6e:	f003 0207 	and.w	r2, r3, #7
 8003e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4422      	add	r2, r4
 8003e7a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e7c:	e105      	b.n	800408a <UART_SetConfig+0x4d6>
 8003e7e:	bf00      	nop
 8003e80:	40011000 	.word	0x40011000
 8003e84:	40011400 	.word	0x40011400
 8003e88:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e90:	2200      	movs	r2, #0
 8003e92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003e96:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003e9a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003e9e:	4642      	mov	r2, r8
 8003ea0:	464b      	mov	r3, r9
 8003ea2:	1891      	adds	r1, r2, r2
 8003ea4:	6239      	str	r1, [r7, #32]
 8003ea6:	415b      	adcs	r3, r3
 8003ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8003eaa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003eae:	4641      	mov	r1, r8
 8003eb0:	1854      	adds	r4, r2, r1
 8003eb2:	4649      	mov	r1, r9
 8003eb4:	eb43 0501 	adc.w	r5, r3, r1
 8003eb8:	f04f 0200 	mov.w	r2, #0
 8003ebc:	f04f 0300 	mov.w	r3, #0
 8003ec0:	00eb      	lsls	r3, r5, #3
 8003ec2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ec6:	00e2      	lsls	r2, r4, #3
 8003ec8:	4614      	mov	r4, r2
 8003eca:	461d      	mov	r5, r3
 8003ecc:	4643      	mov	r3, r8
 8003ece:	18e3      	adds	r3, r4, r3
 8003ed0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ed4:	464b      	mov	r3, r9
 8003ed6:	eb45 0303 	adc.w	r3, r5, r3
 8003eda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003eea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003eee:	f04f 0200 	mov.w	r2, #0
 8003ef2:	f04f 0300 	mov.w	r3, #0
 8003ef6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003efa:	4629      	mov	r1, r5
 8003efc:	008b      	lsls	r3, r1, #2
 8003efe:	4621      	mov	r1, r4
 8003f00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f04:	4621      	mov	r1, r4
 8003f06:	008a      	lsls	r2, r1, #2
 8003f08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003f0c:	f7fc f982 	bl	8000214 <__aeabi_uldivmod>
 8003f10:	4602      	mov	r2, r0
 8003f12:	460b      	mov	r3, r1
 8003f14:	4b60      	ldr	r3, [pc, #384]	; (8004098 <UART_SetConfig+0x4e4>)
 8003f16:	fba3 2302 	umull	r2, r3, r3, r2
 8003f1a:	095b      	lsrs	r3, r3, #5
 8003f1c:	011c      	lsls	r4, r3, #4
 8003f1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f22:	2200      	movs	r2, #0
 8003f24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003f28:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003f2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003f30:	4642      	mov	r2, r8
 8003f32:	464b      	mov	r3, r9
 8003f34:	1891      	adds	r1, r2, r2
 8003f36:	61b9      	str	r1, [r7, #24]
 8003f38:	415b      	adcs	r3, r3
 8003f3a:	61fb      	str	r3, [r7, #28]
 8003f3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f40:	4641      	mov	r1, r8
 8003f42:	1851      	adds	r1, r2, r1
 8003f44:	6139      	str	r1, [r7, #16]
 8003f46:	4649      	mov	r1, r9
 8003f48:	414b      	adcs	r3, r1
 8003f4a:	617b      	str	r3, [r7, #20]
 8003f4c:	f04f 0200 	mov.w	r2, #0
 8003f50:	f04f 0300 	mov.w	r3, #0
 8003f54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f58:	4659      	mov	r1, fp
 8003f5a:	00cb      	lsls	r3, r1, #3
 8003f5c:	4651      	mov	r1, sl
 8003f5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f62:	4651      	mov	r1, sl
 8003f64:	00ca      	lsls	r2, r1, #3
 8003f66:	4610      	mov	r0, r2
 8003f68:	4619      	mov	r1, r3
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	4642      	mov	r2, r8
 8003f6e:	189b      	adds	r3, r3, r2
 8003f70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f74:	464b      	mov	r3, r9
 8003f76:	460a      	mov	r2, r1
 8003f78:	eb42 0303 	adc.w	r3, r2, r3
 8003f7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f8a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003f8c:	f04f 0200 	mov.w	r2, #0
 8003f90:	f04f 0300 	mov.w	r3, #0
 8003f94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003f98:	4649      	mov	r1, r9
 8003f9a:	008b      	lsls	r3, r1, #2
 8003f9c:	4641      	mov	r1, r8
 8003f9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fa2:	4641      	mov	r1, r8
 8003fa4:	008a      	lsls	r2, r1, #2
 8003fa6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003faa:	f7fc f933 	bl	8000214 <__aeabi_uldivmod>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	4b39      	ldr	r3, [pc, #228]	; (8004098 <UART_SetConfig+0x4e4>)
 8003fb4:	fba3 1302 	umull	r1, r3, r3, r2
 8003fb8:	095b      	lsrs	r3, r3, #5
 8003fba:	2164      	movs	r1, #100	; 0x64
 8003fbc:	fb01 f303 	mul.w	r3, r1, r3
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	011b      	lsls	r3, r3, #4
 8003fc4:	3332      	adds	r3, #50	; 0x32
 8003fc6:	4a34      	ldr	r2, [pc, #208]	; (8004098 <UART_SetConfig+0x4e4>)
 8003fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fcc:	095b      	lsrs	r3, r3, #5
 8003fce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fd2:	441c      	add	r4, r3
 8003fd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fd8:	2200      	movs	r2, #0
 8003fda:	673b      	str	r3, [r7, #112]	; 0x70
 8003fdc:	677a      	str	r2, [r7, #116]	; 0x74
 8003fde:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003fe2:	4642      	mov	r2, r8
 8003fe4:	464b      	mov	r3, r9
 8003fe6:	1891      	adds	r1, r2, r2
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	415b      	adcs	r3, r3
 8003fec:	60fb      	str	r3, [r7, #12]
 8003fee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ff2:	4641      	mov	r1, r8
 8003ff4:	1851      	adds	r1, r2, r1
 8003ff6:	6039      	str	r1, [r7, #0]
 8003ff8:	4649      	mov	r1, r9
 8003ffa:	414b      	adcs	r3, r1
 8003ffc:	607b      	str	r3, [r7, #4]
 8003ffe:	f04f 0200 	mov.w	r2, #0
 8004002:	f04f 0300 	mov.w	r3, #0
 8004006:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800400a:	4659      	mov	r1, fp
 800400c:	00cb      	lsls	r3, r1, #3
 800400e:	4651      	mov	r1, sl
 8004010:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004014:	4651      	mov	r1, sl
 8004016:	00ca      	lsls	r2, r1, #3
 8004018:	4610      	mov	r0, r2
 800401a:	4619      	mov	r1, r3
 800401c:	4603      	mov	r3, r0
 800401e:	4642      	mov	r2, r8
 8004020:	189b      	adds	r3, r3, r2
 8004022:	66bb      	str	r3, [r7, #104]	; 0x68
 8004024:	464b      	mov	r3, r9
 8004026:	460a      	mov	r2, r1
 8004028:	eb42 0303 	adc.w	r3, r2, r3
 800402c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800402e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	663b      	str	r3, [r7, #96]	; 0x60
 8004038:	667a      	str	r2, [r7, #100]	; 0x64
 800403a:	f04f 0200 	mov.w	r2, #0
 800403e:	f04f 0300 	mov.w	r3, #0
 8004042:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004046:	4649      	mov	r1, r9
 8004048:	008b      	lsls	r3, r1, #2
 800404a:	4641      	mov	r1, r8
 800404c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004050:	4641      	mov	r1, r8
 8004052:	008a      	lsls	r2, r1, #2
 8004054:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004058:	f7fc f8dc 	bl	8000214 <__aeabi_uldivmod>
 800405c:	4602      	mov	r2, r0
 800405e:	460b      	mov	r3, r1
 8004060:	4b0d      	ldr	r3, [pc, #52]	; (8004098 <UART_SetConfig+0x4e4>)
 8004062:	fba3 1302 	umull	r1, r3, r3, r2
 8004066:	095b      	lsrs	r3, r3, #5
 8004068:	2164      	movs	r1, #100	; 0x64
 800406a:	fb01 f303 	mul.w	r3, r1, r3
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	011b      	lsls	r3, r3, #4
 8004072:	3332      	adds	r3, #50	; 0x32
 8004074:	4a08      	ldr	r2, [pc, #32]	; (8004098 <UART_SetConfig+0x4e4>)
 8004076:	fba2 2303 	umull	r2, r3, r2, r3
 800407a:	095b      	lsrs	r3, r3, #5
 800407c:	f003 020f 	and.w	r2, r3, #15
 8004080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4422      	add	r2, r4
 8004088:	609a      	str	r2, [r3, #8]
}
 800408a:	bf00      	nop
 800408c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004090:	46bd      	mov	sp, r7
 8004092:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004096:	bf00      	nop
 8004098:	51eb851f 	.word	0x51eb851f

0800409c <__libc_init_array>:
 800409c:	b570      	push	{r4, r5, r6, lr}
 800409e:	4d0d      	ldr	r5, [pc, #52]	; (80040d4 <__libc_init_array+0x38>)
 80040a0:	4c0d      	ldr	r4, [pc, #52]	; (80040d8 <__libc_init_array+0x3c>)
 80040a2:	1b64      	subs	r4, r4, r5
 80040a4:	10a4      	asrs	r4, r4, #2
 80040a6:	2600      	movs	r6, #0
 80040a8:	42a6      	cmp	r6, r4
 80040aa:	d109      	bne.n	80040c0 <__libc_init_array+0x24>
 80040ac:	4d0b      	ldr	r5, [pc, #44]	; (80040dc <__libc_init_array+0x40>)
 80040ae:	4c0c      	ldr	r4, [pc, #48]	; (80040e0 <__libc_init_array+0x44>)
 80040b0:	f000 f820 	bl	80040f4 <_init>
 80040b4:	1b64      	subs	r4, r4, r5
 80040b6:	10a4      	asrs	r4, r4, #2
 80040b8:	2600      	movs	r6, #0
 80040ba:	42a6      	cmp	r6, r4
 80040bc:	d105      	bne.n	80040ca <__libc_init_array+0x2e>
 80040be:	bd70      	pop	{r4, r5, r6, pc}
 80040c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80040c4:	4798      	blx	r3
 80040c6:	3601      	adds	r6, #1
 80040c8:	e7ee      	b.n	80040a8 <__libc_init_array+0xc>
 80040ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80040ce:	4798      	blx	r3
 80040d0:	3601      	adds	r6, #1
 80040d2:	e7f2      	b.n	80040ba <__libc_init_array+0x1e>
 80040d4:	08004144 	.word	0x08004144
 80040d8:	08004144 	.word	0x08004144
 80040dc:	08004144 	.word	0x08004144
 80040e0:	08004148 	.word	0x08004148

080040e4 <memset>:
 80040e4:	4402      	add	r2, r0
 80040e6:	4603      	mov	r3, r0
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d100      	bne.n	80040ee <memset+0xa>
 80040ec:	4770      	bx	lr
 80040ee:	f803 1b01 	strb.w	r1, [r3], #1
 80040f2:	e7f9      	b.n	80040e8 <memset+0x4>

080040f4 <_init>:
 80040f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040f6:	bf00      	nop
 80040f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040fa:	bc08      	pop	{r3}
 80040fc:	469e      	mov	lr, r3
 80040fe:	4770      	bx	lr

08004100 <_fini>:
 8004100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004102:	bf00      	nop
 8004104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004106:	bc08      	pop	{r3}
 8004108:	469e      	mov	lr, r3
 800410a:	4770      	bx	lr
